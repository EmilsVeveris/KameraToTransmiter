
KameraToTransmiter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b364  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  0800b420  0800b420  0001b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1d8  0800c1d8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1d8  0800c1d8  0001c1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1e0  0800c1e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1e0  0800c1e0  0001c1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1e4  0800c1e4  0001c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800c1e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000014  0800c1fc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800c1fc  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199d1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043a5  00000000  00000000  00039a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0003ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121a  00000000  00000000  0003f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bb07  00000000  00000000  0004079a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6a6  00000000  00000000  0005c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab49d  00000000  00000000  00079947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005828  00000000  00000000  00124de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0012a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b408 	.word	0x0800b408

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	0800b408 	.word	0x0800b408

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 ff97 	bl	8002334 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fee7 	bl	80021e4 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 ff89 	bl	8002334 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 ff7f 	bl	8002334 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 ff0f 	bl	8002268 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff05 	bl	8002268 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fc7b 	bl	8000d70 <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fc07 	bl	8000c98 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fc6d 	bl	8000d70 <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fc63 	bl	8000d70 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fc13 	bl	8000ce4 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc09 	bl	8000ce4 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_uldivmod>:
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d111      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d10f      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e8:	2900      	cmp	r1, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_uldivmod+0xe>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d002      	beq.n	80004f6 <__aeabi_uldivmod+0x16>
 80004f0:	2100      	movs	r1, #0
 80004f2:	43c9      	mvns	r1, r1
 80004f4:	0008      	movs	r0, r1
 80004f6:	b407      	push	{r0, r1, r2}
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <__aeabi_uldivmod+0x24>)
 80004fa:	a102      	add	r1, pc, #8	; (adr r1, 8000504 <__aeabi_uldivmod+0x24>)
 80004fc:	1840      	adds	r0, r0, r1
 80004fe:	9002      	str	r0, [sp, #8]
 8000500:	bd03      	pop	{r0, r1, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	fffffee9 	.word	0xfffffee9
 8000508:	b403      	push	{r0, r1}
 800050a:	4668      	mov	r0, sp
 800050c:	b501      	push	{r0, lr}
 800050e:	9802      	ldr	r0, [sp, #8]
 8000510:	f000 f83c 	bl	800058c <__udivmoddi4>
 8000514:	9b01      	ldr	r3, [sp, #4]
 8000516:	469e      	mov	lr, r3
 8000518:	b002      	add	sp, #8
 800051a:	bc0c      	pop	{r2, r3}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_f2uiz>:
 8000520:	219e      	movs	r1, #158	; 0x9e
 8000522:	b510      	push	{r4, lr}
 8000524:	05c9      	lsls	r1, r1, #23
 8000526:	1c04      	adds	r4, r0, #0
 8000528:	f7ff ffd0 	bl	80004cc <__aeabi_fcmpge>
 800052c:	2800      	cmp	r0, #0
 800052e:	d103      	bne.n	8000538 <__aeabi_f2uiz+0x18>
 8000530:	1c20      	adds	r0, r4, #0
 8000532:	f000 ff4f 	bl	80013d4 <__aeabi_f2iz>
 8000536:	bd10      	pop	{r4, pc}
 8000538:	219e      	movs	r1, #158	; 0x9e
 800053a:	1c20      	adds	r0, r4, #0
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	f000 fda9 	bl	8001094 <__aeabi_fsub>
 8000542:	f000 ff47 	bl	80013d4 <__aeabi_f2iz>
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	061b      	lsls	r3, r3, #24
 800054a:	469c      	mov	ip, r3
 800054c:	4460      	add	r0, ip
 800054e:	e7f2      	b.n	8000536 <__aeabi_f2uiz+0x16>

08000550 <__aeabi_d2uiz>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	2200      	movs	r2, #0
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <__aeabi_d2uiz+0x38>)
 8000556:	0004      	movs	r4, r0
 8000558:	000d      	movs	r5, r1
 800055a:	f7ff ff7d 	bl	8000458 <__aeabi_dcmpge>
 800055e:	2800      	cmp	r0, #0
 8000560:	d104      	bne.n	800056c <__aeabi_d2uiz+0x1c>
 8000562:	0020      	movs	r0, r4
 8000564:	0029      	movs	r1, r5
 8000566:	f002 fd8d 	bl	8003084 <__aeabi_d2iz>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <__aeabi_d2uiz+0x38>)
 800056e:	2200      	movs	r2, #0
 8000570:	0020      	movs	r0, r4
 8000572:	0029      	movs	r1, r5
 8000574:	f002 fa04 	bl	8002980 <__aeabi_dsub>
 8000578:	f002 fd84 	bl	8003084 <__aeabi_d2iz>
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	061b      	lsls	r3, r3, #24
 8000580:	469c      	mov	ip, r3
 8000582:	4460      	add	r0, ip
 8000584:	e7f1      	b.n	800056a <__aeabi_d2uiz+0x1a>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	41e00000 	.word	0x41e00000

0800058c <__udivmoddi4>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	4657      	mov	r7, sl
 8000590:	464e      	mov	r6, r9
 8000592:	4645      	mov	r5, r8
 8000594:	46de      	mov	lr, fp
 8000596:	b5e0      	push	{r5, r6, r7, lr}
 8000598:	0004      	movs	r4, r0
 800059a:	000d      	movs	r5, r1
 800059c:	4692      	mov	sl, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	b083      	sub	sp, #12
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d830      	bhi.n	8000608 <__udivmoddi4+0x7c>
 80005a6:	d02d      	beq.n	8000604 <__udivmoddi4+0x78>
 80005a8:	4649      	mov	r1, r9
 80005aa:	4650      	mov	r0, sl
 80005ac:	f002 fe14 	bl	80031d8 <__clzdi2>
 80005b0:	0029      	movs	r1, r5
 80005b2:	0006      	movs	r6, r0
 80005b4:	0020      	movs	r0, r4
 80005b6:	f002 fe0f 	bl	80031d8 <__clzdi2>
 80005ba:	1a33      	subs	r3, r6, r0
 80005bc:	4698      	mov	r8, r3
 80005be:	3b20      	subs	r3, #32
 80005c0:	d434      	bmi.n	800062c <__udivmoddi4+0xa0>
 80005c2:	469b      	mov	fp, r3
 80005c4:	4653      	mov	r3, sl
 80005c6:	465a      	mov	r2, fp
 80005c8:	4093      	lsls	r3, r2
 80005ca:	4642      	mov	r2, r8
 80005cc:	001f      	movs	r7, r3
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d83b      	bhi.n	8000650 <__udivmoddi4+0xc4>
 80005d8:	42af      	cmp	r7, r5
 80005da:	d100      	bne.n	80005de <__udivmoddi4+0x52>
 80005dc:	e079      	b.n	80006d2 <__udivmoddi4+0x146>
 80005de:	465b      	mov	r3, fp
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5e>
 80005e8:	e076      	b.n	80006d8 <__udivmoddi4+0x14c>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	465a      	mov	r2, fp
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4642      	mov	r2, r8
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e029      	b.n	8000658 <__udivmoddi4+0xcc>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9cf      	bls.n	80005a8 <__udivmoddi4+0x1c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8e>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b003      	add	sp, #12
 8000620:	bcf0      	pop	{r4, r5, r6, r7}
 8000622:	46bb      	mov	fp, r7
 8000624:	46b2      	mov	sl, r6
 8000626:	46a9      	mov	r9, r5
 8000628:	46a0      	mov	r8, r4
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062c:	4642      	mov	r2, r8
 800062e:	469b      	mov	fp, r3
 8000630:	2320      	movs	r3, #32
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	4652      	mov	r2, sl
 8000636:	40da      	lsrs	r2, r3
 8000638:	4641      	mov	r1, r8
 800063a:	0013      	movs	r3, r2
 800063c:	464a      	mov	r2, r9
 800063e:	408a      	lsls	r2, r1
 8000640:	0017      	movs	r7, r2
 8000642:	4642      	mov	r2, r8
 8000644:	431f      	orrs	r7, r3
 8000646:	4653      	mov	r3, sl
 8000648:	4093      	lsls	r3, r2
 800064a:	001e      	movs	r6, r3
 800064c:	42af      	cmp	r7, r5
 800064e:	d9c3      	bls.n	80005d8 <__udivmoddi4+0x4c>
 8000650:	2200      	movs	r2, #0
 8000652:	2300      	movs	r3, #0
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0d8      	beq.n	8000610 <__udivmoddi4+0x84>
 800065e:	07fb      	lsls	r3, r7, #31
 8000660:	0872      	lsrs	r2, r6, #1
 8000662:	431a      	orrs	r2, r3
 8000664:	4646      	mov	r6, r8
 8000666:	087b      	lsrs	r3, r7, #1
 8000668:	e00e      	b.n	8000688 <__udivmoddi4+0xfc>
 800066a:	42ab      	cmp	r3, r5
 800066c:	d101      	bne.n	8000672 <__udivmoddi4+0xe6>
 800066e:	42a2      	cmp	r2, r4
 8000670:	d80c      	bhi.n	800068c <__udivmoddi4+0x100>
 8000672:	1aa4      	subs	r4, r4, r2
 8000674:	419d      	sbcs	r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2100      	movs	r1, #0
 800067e:	3e01      	subs	r6, #1
 8000680:	1824      	adds	r4, r4, r0
 8000682:	414d      	adcs	r5, r1
 8000684:	2e00      	cmp	r6, #0
 8000686:	d006      	beq.n	8000696 <__udivmoddi4+0x10a>
 8000688:	42ab      	cmp	r3, r5
 800068a:	d9ee      	bls.n	800066a <__udivmoddi4+0xde>
 800068c:	3e01      	subs	r6, #1
 800068e:	1924      	adds	r4, r4, r4
 8000690:	416d      	adcs	r5, r5
 8000692:	2e00      	cmp	r6, #0
 8000694:	d1f8      	bne.n	8000688 <__udivmoddi4+0xfc>
 8000696:	9800      	ldr	r0, [sp, #0]
 8000698:	9901      	ldr	r1, [sp, #4]
 800069a:	465b      	mov	r3, fp
 800069c:	1900      	adds	r0, r0, r4
 800069e:	4169      	adcs	r1, r5
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db24      	blt.n	80006ee <__udivmoddi4+0x162>
 80006a4:	002b      	movs	r3, r5
 80006a6:	465a      	mov	r2, fp
 80006a8:	4644      	mov	r4, r8
 80006aa:	40d3      	lsrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db2a      	blt.n	8000710 <__udivmoddi4+0x184>
 80006ba:	0026      	movs	r6, r4
 80006bc:	409e      	lsls	r6, r3
 80006be:	0033      	movs	r3, r6
 80006c0:	0026      	movs	r6, r4
 80006c2:	4647      	mov	r7, r8
 80006c4:	40be      	lsls	r6, r7
 80006c6:	0032      	movs	r2, r6
 80006c8:	1a80      	subs	r0, r0, r2
 80006ca:	4199      	sbcs	r1, r3
 80006cc:	9000      	str	r0, [sp, #0]
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	e79e      	b.n	8000610 <__udivmoddi4+0x84>
 80006d2:	42a3      	cmp	r3, r4
 80006d4:	d8bc      	bhi.n	8000650 <__udivmoddi4+0xc4>
 80006d6:	e782      	b.n	80005de <__udivmoddi4+0x52>
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	2200      	movs	r2, #0
 80006e2:	9100      	str	r1, [sp, #0]
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	40da      	lsrs	r2, r3
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	e785      	b.n	80005fa <__udivmoddi4+0x6e>
 80006ee:	4642      	mov	r2, r8
 80006f0:	2320      	movs	r3, #32
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	002a      	movs	r2, r5
 80006f6:	4646      	mov	r6, r8
 80006f8:	409a      	lsls	r2, r3
 80006fa:	0023      	movs	r3, r4
 80006fc:	40f3      	lsrs	r3, r6
 80006fe:	4644      	mov	r4, r8
 8000700:	4313      	orrs	r3, r2
 8000702:	002a      	movs	r2, r5
 8000704:	40e2      	lsrs	r2, r4
 8000706:	001c      	movs	r4, r3
 8000708:	465b      	mov	r3, fp
 800070a:	0015      	movs	r5, r2
 800070c:	2b00      	cmp	r3, #0
 800070e:	dad4      	bge.n	80006ba <__udivmoddi4+0x12e>
 8000710:	4642      	mov	r2, r8
 8000712:	002f      	movs	r7, r5
 8000714:	2320      	movs	r3, #32
 8000716:	0026      	movs	r6, r4
 8000718:	4097      	lsls	r7, r2
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	40de      	lsrs	r6, r3
 800071e:	003b      	movs	r3, r7
 8000720:	4333      	orrs	r3, r6
 8000722:	e7cd      	b.n	80006c0 <__udivmoddi4+0x134>

08000724 <__aeabi_fadd>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	4647      	mov	r7, r8
 8000728:	46ce      	mov	lr, r9
 800072a:	024a      	lsls	r2, r1, #9
 800072c:	0243      	lsls	r3, r0, #9
 800072e:	0045      	lsls	r5, r0, #1
 8000730:	0fc4      	lsrs	r4, r0, #31
 8000732:	0a50      	lsrs	r0, r2, #9
 8000734:	4680      	mov	r8, r0
 8000736:	0048      	lsls	r0, r1, #1
 8000738:	0a5b      	lsrs	r3, r3, #9
 800073a:	0e00      	lsrs	r0, r0, #24
 800073c:	0992      	lsrs	r2, r2, #6
 800073e:	4694      	mov	ip, r2
 8000740:	b580      	push	{r7, lr}
 8000742:	001e      	movs	r6, r3
 8000744:	4681      	mov	r9, r0
 8000746:	0002      	movs	r2, r0
 8000748:	0e2d      	lsrs	r5, r5, #24
 800074a:	00df      	lsls	r7, r3, #3
 800074c:	0fc9      	lsrs	r1, r1, #31
 800074e:	428c      	cmp	r4, r1
 8000750:	d024      	beq.n	800079c <__aeabi_fadd+0x78>
 8000752:	1a28      	subs	r0, r5, r0
 8000754:	2800      	cmp	r0, #0
 8000756:	dd0e      	ble.n	8000776 <__aeabi_fadd+0x52>
 8000758:	2a00      	cmp	r2, #0
 800075a:	d13e      	bne.n	80007da <__aeabi_fadd+0xb6>
 800075c:	4662      	mov	r2, ip
 800075e:	2a00      	cmp	r2, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x40>
 8000762:	e0fd      	b.n	8000960 <__aeabi_fadd+0x23c>
 8000764:	1e42      	subs	r2, r0, #1
 8000766:	2801      	cmp	r0, #1
 8000768:	d100      	bne.n	800076c <__aeabi_fadd+0x48>
 800076a:	e137      	b.n	80009dc <__aeabi_fadd+0x2b8>
 800076c:	28ff      	cmp	r0, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x4e>
 8000770:	e0a9      	b.n	80008c6 <__aeabi_fadd+0x1a2>
 8000772:	0010      	movs	r0, r2
 8000774:	e039      	b.n	80007ea <__aeabi_fadd+0xc6>
 8000776:	2800      	cmp	r0, #0
 8000778:	d063      	beq.n	8000842 <__aeabi_fadd+0x11e>
 800077a:	464b      	mov	r3, r9
 800077c:	1b52      	subs	r2, r2, r5
 800077e:	2d00      	cmp	r5, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x60>
 8000782:	e0e0      	b.n	8000946 <__aeabi_fadd+0x222>
 8000784:	2f00      	cmp	r7, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0x66>
 8000788:	e0ce      	b.n	8000928 <__aeabi_fadd+0x204>
 800078a:	1e53      	subs	r3, r2, #1
 800078c:	2a01      	cmp	r2, #1
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x6e>
 8000790:	e155      	b.n	8000a3e <__aeabi_fadd+0x31a>
 8000792:	2aff      	cmp	r2, #255	; 0xff
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x74>
 8000796:	e094      	b.n	80008c2 <__aeabi_fadd+0x19e>
 8000798:	001a      	movs	r2, r3
 800079a:	e0d9      	b.n	8000950 <__aeabi_fadd+0x22c>
 800079c:	1a2a      	subs	r2, r5, r0
 800079e:	2a00      	cmp	r2, #0
 80007a0:	dc00      	bgt.n	80007a4 <__aeabi_fadd+0x80>
 80007a2:	e099      	b.n	80008d8 <__aeabi_fadd+0x1b4>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d062      	beq.n	800086e <__aeabi_fadd+0x14a>
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d100      	bne.n	80007ae <__aeabi_fadd+0x8a>
 80007ac:	e08b      	b.n	80008c6 <__aeabi_fadd+0x1a2>
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	4661      	mov	r1, ip
 80007b2:	04db      	lsls	r3, r3, #19
 80007b4:	4319      	orrs	r1, r3
 80007b6:	468c      	mov	ip, r1
 80007b8:	2a1b      	cmp	r2, #27
 80007ba:	dc00      	bgt.n	80007be <__aeabi_fadd+0x9a>
 80007bc:	e0d2      	b.n	8000964 <__aeabi_fadd+0x240>
 80007be:	2301      	movs	r3, #1
 80007c0:	19db      	adds	r3, r3, r7
 80007c2:	015a      	lsls	r2, r3, #5
 80007c4:	d56a      	bpl.n	800089c <__aeabi_fadd+0x178>
 80007c6:	3501      	adds	r5, #1
 80007c8:	2dff      	cmp	r5, #255	; 0xff
 80007ca:	d05b      	beq.n	8000884 <__aeabi_fadd+0x160>
 80007cc:	2201      	movs	r2, #1
 80007ce:	49a3      	ldr	r1, [pc, #652]	; (8000a5c <__aeabi_fadd+0x338>)
 80007d0:	401a      	ands	r2, r3
 80007d2:	085b      	lsrs	r3, r3, #1
 80007d4:	400b      	ands	r3, r1
 80007d6:	4313      	orrs	r3, r2
 80007d8:	e01c      	b.n	8000814 <__aeabi_fadd+0xf0>
 80007da:	2dff      	cmp	r5, #255	; 0xff
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fadd+0xbc>
 80007de:	e072      	b.n	80008c6 <__aeabi_fadd+0x1a2>
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	4662      	mov	r2, ip
 80007e4:	04db      	lsls	r3, r3, #19
 80007e6:	431a      	orrs	r2, r3
 80007e8:	4694      	mov	ip, r2
 80007ea:	281b      	cmp	r0, #27
 80007ec:	dc00      	bgt.n	80007f0 <__aeabi_fadd+0xcc>
 80007ee:	e090      	b.n	8000912 <__aeabi_fadd+0x1ee>
 80007f0:	2301      	movs	r3, #1
 80007f2:	1afb      	subs	r3, r7, r3
 80007f4:	015a      	lsls	r2, r3, #5
 80007f6:	d551      	bpl.n	800089c <__aeabi_fadd+0x178>
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	099e      	lsrs	r6, r3, #6
 80007fc:	0030      	movs	r0, r6
 80007fe:	f002 fccd 	bl	800319c <__clzsi2>
 8000802:	0033      	movs	r3, r6
 8000804:	3805      	subs	r0, #5
 8000806:	4083      	lsls	r3, r0
 8000808:	4285      	cmp	r5, r0
 800080a:	dc00      	bgt.n	800080e <__aeabi_fadd+0xea>
 800080c:	e075      	b.n	80008fa <__aeabi_fadd+0x1d6>
 800080e:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <__aeabi_fadd+0x33c>)
 8000810:	1a2d      	subs	r5, r5, r0
 8000812:	4013      	ands	r3, r2
 8000814:	075a      	lsls	r2, r3, #29
 8000816:	d004      	beq.n	8000822 <__aeabi_fadd+0xfe>
 8000818:	220f      	movs	r2, #15
 800081a:	401a      	ands	r2, r3
 800081c:	2a04      	cmp	r2, #4
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0xfe>
 8000820:	3304      	adds	r3, #4
 8000822:	015a      	lsls	r2, r3, #5
 8000824:	d53c      	bpl.n	80008a0 <__aeabi_fadd+0x17c>
 8000826:	1c68      	adds	r0, r5, #1
 8000828:	2dfe      	cmp	r5, #254	; 0xfe
 800082a:	d02b      	beq.n	8000884 <__aeabi_fadd+0x160>
 800082c:	019b      	lsls	r3, r3, #6
 800082e:	0a5e      	lsrs	r6, r3, #9
 8000830:	b2c0      	uxtb	r0, r0
 8000832:	05c0      	lsls	r0, r0, #23
 8000834:	4330      	orrs	r0, r6
 8000836:	07e4      	lsls	r4, r4, #31
 8000838:	4320      	orrs	r0, r4
 800083a:	bcc0      	pop	{r6, r7}
 800083c:	46b9      	mov	r9, r7
 800083e:	46b0      	mov	r8, r6
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000842:	20fe      	movs	r0, #254	; 0xfe
 8000844:	1c6a      	adds	r2, r5, #1
 8000846:	4210      	tst	r0, r2
 8000848:	d172      	bne.n	8000930 <__aeabi_fadd+0x20c>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fadd+0x12c>
 800084e:	e0ae      	b.n	80009ae <__aeabi_fadd+0x28a>
 8000850:	2f00      	cmp	r7, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x132>
 8000854:	e0ec      	b.n	8000a30 <__aeabi_fadd+0x30c>
 8000856:	4663      	mov	r3, ip
 8000858:	2000      	movs	r0, #0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0e9      	beq.n	8000832 <__aeabi_fadd+0x10e>
 800085e:	1afb      	subs	r3, r7, r3
 8000860:	015a      	lsls	r2, r3, #5
 8000862:	d400      	bmi.n	8000866 <__aeabi_fadd+0x142>
 8000864:	e0f3      	b.n	8000a4e <__aeabi_fadd+0x32a>
 8000866:	4663      	mov	r3, ip
 8000868:	000c      	movs	r4, r1
 800086a:	1bdb      	subs	r3, r3, r7
 800086c:	e7d2      	b.n	8000814 <__aeabi_fadd+0xf0>
 800086e:	4661      	mov	r1, ip
 8000870:	2900      	cmp	r1, #0
 8000872:	d05b      	beq.n	800092c <__aeabi_fadd+0x208>
 8000874:	1e51      	subs	r1, r2, #1
 8000876:	2a01      	cmp	r2, #1
 8000878:	d100      	bne.n	800087c <__aeabi_fadd+0x158>
 800087a:	e0a7      	b.n	80009cc <__aeabi_fadd+0x2a8>
 800087c:	2aff      	cmp	r2, #255	; 0xff
 800087e:	d022      	beq.n	80008c6 <__aeabi_fadd+0x1a2>
 8000880:	000a      	movs	r2, r1
 8000882:	e799      	b.n	80007b8 <__aeabi_fadd+0x94>
 8000884:	20ff      	movs	r0, #255	; 0xff
 8000886:	2600      	movs	r6, #0
 8000888:	e7d3      	b.n	8000832 <__aeabi_fadd+0x10e>
 800088a:	21fe      	movs	r1, #254	; 0xfe
 800088c:	1c6a      	adds	r2, r5, #1
 800088e:	4211      	tst	r1, r2
 8000890:	d073      	beq.n	800097a <__aeabi_fadd+0x256>
 8000892:	2aff      	cmp	r2, #255	; 0xff
 8000894:	d0f6      	beq.n	8000884 <__aeabi_fadd+0x160>
 8000896:	0015      	movs	r5, r2
 8000898:	4467      	add	r7, ip
 800089a:	087b      	lsrs	r3, r7, #1
 800089c:	075a      	lsls	r2, r3, #29
 800089e:	d1bb      	bne.n	8000818 <__aeabi_fadd+0xf4>
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	2dff      	cmp	r5, #255	; 0xff
 80008a4:	d00f      	beq.n	80008c6 <__aeabi_fadd+0x1a2>
 80008a6:	025b      	lsls	r3, r3, #9
 80008a8:	0a5e      	lsrs	r6, r3, #9
 80008aa:	b2e8      	uxtb	r0, r5
 80008ac:	e7c1      	b.n	8000832 <__aeabi_fadd+0x10e>
 80008ae:	4662      	mov	r2, ip
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	d008      	beq.n	80008c6 <__aeabi_fadd+0x1a2>
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	03d2      	lsls	r2, r2, #15
 80008b8:	4213      	tst	r3, r2
 80008ba:	d004      	beq.n	80008c6 <__aeabi_fadd+0x1a2>
 80008bc:	4640      	mov	r0, r8
 80008be:	4210      	tst	r0, r2
 80008c0:	d101      	bne.n	80008c6 <__aeabi_fadd+0x1a2>
 80008c2:	000c      	movs	r4, r1
 80008c4:	4643      	mov	r3, r8
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0dc      	beq.n	8000884 <__aeabi_fadd+0x160>
 80008ca:	2680      	movs	r6, #128	; 0x80
 80008cc:	03f6      	lsls	r6, r6, #15
 80008ce:	431e      	orrs	r6, r3
 80008d0:	0276      	lsls	r6, r6, #9
 80008d2:	20ff      	movs	r0, #255	; 0xff
 80008d4:	0a76      	lsrs	r6, r6, #9
 80008d6:	e7ac      	b.n	8000832 <__aeabi_fadd+0x10e>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d0d6      	beq.n	800088a <__aeabi_fadd+0x166>
 80008dc:	1b42      	subs	r2, r0, r5
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d05c      	beq.n	800099c <__aeabi_fadd+0x278>
 80008e2:	28ff      	cmp	r0, #255	; 0xff
 80008e4:	d0ee      	beq.n	80008c4 <__aeabi_fadd+0x1a0>
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	04db      	lsls	r3, r3, #19
 80008ea:	431f      	orrs	r7, r3
 80008ec:	2a1b      	cmp	r2, #27
 80008ee:	dc00      	bgt.n	80008f2 <__aeabi_fadd+0x1ce>
 80008f0:	e082      	b.n	80009f8 <__aeabi_fadd+0x2d4>
 80008f2:	2301      	movs	r3, #1
 80008f4:	464d      	mov	r5, r9
 80008f6:	4463      	add	r3, ip
 80008f8:	e763      	b.n	80007c2 <__aeabi_fadd+0x9e>
 80008fa:	2220      	movs	r2, #32
 80008fc:	1b40      	subs	r0, r0, r5
 80008fe:	3001      	adds	r0, #1
 8000900:	1a12      	subs	r2, r2, r0
 8000902:	0019      	movs	r1, r3
 8000904:	4093      	lsls	r3, r2
 8000906:	40c1      	lsrs	r1, r0
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	4193      	sbcs	r3, r2
 800090c:	2500      	movs	r5, #0
 800090e:	430b      	orrs	r3, r1
 8000910:	e780      	b.n	8000814 <__aeabi_fadd+0xf0>
 8000912:	2320      	movs	r3, #32
 8000914:	4661      	mov	r1, ip
 8000916:	1a1b      	subs	r3, r3, r0
 8000918:	4099      	lsls	r1, r3
 800091a:	4662      	mov	r2, ip
 800091c:	000b      	movs	r3, r1
 800091e:	40c2      	lsrs	r2, r0
 8000920:	1e59      	subs	r1, r3, #1
 8000922:	418b      	sbcs	r3, r1
 8000924:	4313      	orrs	r3, r2
 8000926:	e764      	b.n	80007f2 <__aeabi_fadd+0xce>
 8000928:	000c      	movs	r4, r1
 800092a:	4643      	mov	r3, r8
 800092c:	0015      	movs	r5, r2
 800092e:	e7b8      	b.n	80008a2 <__aeabi_fadd+0x17e>
 8000930:	4663      	mov	r3, ip
 8000932:	1afe      	subs	r6, r7, r3
 8000934:	0173      	lsls	r3, r6, #5
 8000936:	d445      	bmi.n	80009c4 <__aeabi_fadd+0x2a0>
 8000938:	2e00      	cmp	r6, #0
 800093a:	d000      	beq.n	800093e <__aeabi_fadd+0x21a>
 800093c:	e75e      	b.n	80007fc <__aeabi_fadd+0xd8>
 800093e:	2400      	movs	r4, #0
 8000940:	2000      	movs	r0, #0
 8000942:	2600      	movs	r6, #0
 8000944:	e775      	b.n	8000832 <__aeabi_fadd+0x10e>
 8000946:	2bff      	cmp	r3, #255	; 0xff
 8000948:	d0bb      	beq.n	80008c2 <__aeabi_fadd+0x19e>
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	04db      	lsls	r3, r3, #19
 800094e:	431f      	orrs	r7, r3
 8000950:	2a1b      	cmp	r2, #27
 8000952:	dd47      	ble.n	80009e4 <__aeabi_fadd+0x2c0>
 8000954:	2301      	movs	r3, #1
 8000956:	4662      	mov	r2, ip
 8000958:	000c      	movs	r4, r1
 800095a:	464d      	mov	r5, r9
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	e749      	b.n	80007f4 <__aeabi_fadd+0xd0>
 8000960:	0005      	movs	r5, r0
 8000962:	e79e      	b.n	80008a2 <__aeabi_fadd+0x17e>
 8000964:	4661      	mov	r1, ip
 8000966:	2320      	movs	r3, #32
 8000968:	40d1      	lsrs	r1, r2
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	4662      	mov	r2, ip
 800096e:	409a      	lsls	r2, r3
 8000970:	0013      	movs	r3, r2
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	4193      	sbcs	r3, r2
 8000976:	430b      	orrs	r3, r1
 8000978:	e722      	b.n	80007c0 <__aeabi_fadd+0x9c>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d146      	bne.n	8000a0c <__aeabi_fadd+0x2e8>
 800097e:	2f00      	cmp	r7, #0
 8000980:	d062      	beq.n	8000a48 <__aeabi_fadd+0x324>
 8000982:	4663      	mov	r3, ip
 8000984:	2000      	movs	r0, #0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d100      	bne.n	800098c <__aeabi_fadd+0x268>
 800098a:	e752      	b.n	8000832 <__aeabi_fadd+0x10e>
 800098c:	003b      	movs	r3, r7
 800098e:	4463      	add	r3, ip
 8000990:	015a      	lsls	r2, r3, #5
 8000992:	d583      	bpl.n	800089c <__aeabi_fadd+0x178>
 8000994:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <__aeabi_fadd+0x33c>)
 8000996:	3501      	adds	r5, #1
 8000998:	4013      	ands	r3, r2
 800099a:	e77f      	b.n	800089c <__aeabi_fadd+0x178>
 800099c:	2f00      	cmp	r7, #0
 800099e:	d0c4      	beq.n	800092a <__aeabi_fadd+0x206>
 80009a0:	1e53      	subs	r3, r2, #1
 80009a2:	2a01      	cmp	r2, #1
 80009a4:	d012      	beq.n	80009cc <__aeabi_fadd+0x2a8>
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d08c      	beq.n	80008c4 <__aeabi_fadd+0x1a0>
 80009aa:	001a      	movs	r2, r3
 80009ac:	e79e      	b.n	80008ec <__aeabi_fadd+0x1c8>
 80009ae:	2f00      	cmp	r7, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fadd+0x290>
 80009b2:	e77c      	b.n	80008ae <__aeabi_fadd+0x18a>
 80009b4:	4663      	mov	r3, ip
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d183      	bne.n	80008c2 <__aeabi_fadd+0x19e>
 80009ba:	2680      	movs	r6, #128	; 0x80
 80009bc:	2400      	movs	r4, #0
 80009be:	20ff      	movs	r0, #255	; 0xff
 80009c0:	03f6      	lsls	r6, r6, #15
 80009c2:	e736      	b.n	8000832 <__aeabi_fadd+0x10e>
 80009c4:	4663      	mov	r3, ip
 80009c6:	000c      	movs	r4, r1
 80009c8:	1bde      	subs	r6, r3, r7
 80009ca:	e717      	b.n	80007fc <__aeabi_fadd+0xd8>
 80009cc:	003b      	movs	r3, r7
 80009ce:	4463      	add	r3, ip
 80009d0:	2501      	movs	r5, #1
 80009d2:	015a      	lsls	r2, r3, #5
 80009d4:	d400      	bmi.n	80009d8 <__aeabi_fadd+0x2b4>
 80009d6:	e761      	b.n	800089c <__aeabi_fadd+0x178>
 80009d8:	2502      	movs	r5, #2
 80009da:	e6f7      	b.n	80007cc <__aeabi_fadd+0xa8>
 80009dc:	4663      	mov	r3, ip
 80009de:	2501      	movs	r5, #1
 80009e0:	1afb      	subs	r3, r7, r3
 80009e2:	e707      	b.n	80007f4 <__aeabi_fadd+0xd0>
 80009e4:	2320      	movs	r3, #32
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	0038      	movs	r0, r7
 80009ea:	409f      	lsls	r7, r3
 80009ec:	003b      	movs	r3, r7
 80009ee:	40d0      	lsrs	r0, r2
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	4193      	sbcs	r3, r2
 80009f4:	4303      	orrs	r3, r0
 80009f6:	e7ae      	b.n	8000956 <__aeabi_fadd+0x232>
 80009f8:	2320      	movs	r3, #32
 80009fa:	1a9b      	subs	r3, r3, r2
 80009fc:	0039      	movs	r1, r7
 80009fe:	409f      	lsls	r7, r3
 8000a00:	003b      	movs	r3, r7
 8000a02:	40d1      	lsrs	r1, r2
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	4193      	sbcs	r3, r2
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e773      	b.n	80008f4 <__aeabi_fadd+0x1d0>
 8000a0c:	2f00      	cmp	r7, #0
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x2ee>
 8000a10:	e758      	b.n	80008c4 <__aeabi_fadd+0x1a0>
 8000a12:	4662      	mov	r2, ip
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fadd+0x2f6>
 8000a18:	e755      	b.n	80008c6 <__aeabi_fadd+0x1a2>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	03d2      	lsls	r2, r2, #15
 8000a1e:	4213      	tst	r3, r2
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fadd+0x300>
 8000a22:	e750      	b.n	80008c6 <__aeabi_fadd+0x1a2>
 8000a24:	4641      	mov	r1, r8
 8000a26:	4211      	tst	r1, r2
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fadd+0x308>
 8000a2a:	e74c      	b.n	80008c6 <__aeabi_fadd+0x1a2>
 8000a2c:	4643      	mov	r3, r8
 8000a2e:	e74a      	b.n	80008c6 <__aeabi_fadd+0x1a2>
 8000a30:	4663      	mov	r3, ip
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d083      	beq.n	800093e <__aeabi_fadd+0x21a>
 8000a36:	000c      	movs	r4, r1
 8000a38:	4646      	mov	r6, r8
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e6f9      	b.n	8000832 <__aeabi_fadd+0x10e>
 8000a3e:	4663      	mov	r3, ip
 8000a40:	000c      	movs	r4, r1
 8000a42:	1bdb      	subs	r3, r3, r7
 8000a44:	3501      	adds	r5, #1
 8000a46:	e6d5      	b.n	80007f4 <__aeabi_fadd+0xd0>
 8000a48:	4646      	mov	r6, r8
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	e6f1      	b.n	8000832 <__aeabi_fadd+0x10e>
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fadd+0x330>
 8000a52:	e723      	b.n	800089c <__aeabi_fadd+0x178>
 8000a54:	2400      	movs	r4, #0
 8000a56:	2600      	movs	r6, #0
 8000a58:	e6eb      	b.n	8000832 <__aeabi_fadd+0x10e>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	7dffffff 	.word	0x7dffffff
 8000a60:	fbffffff 	.word	0xfbffffff

08000a64 <__aeabi_fdiv>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	0245      	lsls	r5, r0, #9
 8000a6e:	b5c0      	push	{r6, r7, lr}
 8000a70:	0047      	lsls	r7, r0, #1
 8000a72:	1c0c      	adds	r4, r1, #0
 8000a74:	0a6d      	lsrs	r5, r5, #9
 8000a76:	0e3f      	lsrs	r7, r7, #24
 8000a78:	0fc6      	lsrs	r6, r0, #31
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fdiv+0x1c>
 8000a7e:	e06f      	b.n	8000b60 <__aeabi_fdiv+0xfc>
 8000a80:	2fff      	cmp	r7, #255	; 0xff
 8000a82:	d100      	bne.n	8000a86 <__aeabi_fdiv+0x22>
 8000a84:	e074      	b.n	8000b70 <__aeabi_fdiv+0x10c>
 8000a86:	2300      	movs	r3, #0
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	00ed      	lsls	r5, r5, #3
 8000a90:	04d2      	lsls	r2, r2, #19
 8000a92:	4315      	orrs	r5, r2
 8000a94:	3f7f      	subs	r7, #127	; 0x7f
 8000a96:	0263      	lsls	r3, r4, #9
 8000a98:	0a5b      	lsrs	r3, r3, #9
 8000a9a:	4698      	mov	r8, r3
 8000a9c:	0063      	lsls	r3, r4, #1
 8000a9e:	0e1b      	lsrs	r3, r3, #24
 8000aa0:	0fe4      	lsrs	r4, r4, #31
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d04d      	beq.n	8000b42 <__aeabi_fdiv+0xde>
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d045      	beq.n	8000b36 <__aeabi_fdiv+0xd2>
 8000aaa:	4642      	mov	r2, r8
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	00d2      	lsls	r2, r2, #3
 8000ab0:	04c9      	lsls	r1, r1, #19
 8000ab2:	4311      	orrs	r1, r2
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	3b7f      	subs	r3, #127	; 0x7f
 8000aba:	0031      	movs	r1, r6
 8000abc:	1aff      	subs	r7, r7, r3
 8000abe:	464b      	mov	r3, r9
 8000ac0:	4061      	eors	r1, r4
 8000ac2:	b2c9      	uxtb	r1, r1
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d900      	bls.n	8000aca <__aeabi_fdiv+0x66>
 8000ac8:	e0b8      	b.n	8000c3c <__aeabi_fdiv+0x1d8>
 8000aca:	4870      	ldr	r0, [pc, #448]	; (8000c8c <__aeabi_fdiv+0x228>)
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	58c3      	ldr	r3, [r0, r3]
 8000ad0:	469f      	mov	pc, r3
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	4698      	mov	r8, r3
 8000ad6:	0026      	movs	r6, r4
 8000ad8:	4645      	mov	r5, r8
 8000ada:	4692      	mov	sl, r2
 8000adc:	4653      	mov	r3, sl
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_fdiv+0x80>
 8000ae2:	e08d      	b.n	8000c00 <__aeabi_fdiv+0x19c>
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d100      	bne.n	8000aea <__aeabi_fdiv+0x86>
 8000ae8:	e0a1      	b.n	8000c2e <__aeabi_fdiv+0x1ca>
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d018      	beq.n	8000b20 <__aeabi_fdiv+0xbc>
 8000aee:	003b      	movs	r3, r7
 8000af0:	337f      	adds	r3, #127	; 0x7f
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	dd6d      	ble.n	8000bd2 <__aeabi_fdiv+0x16e>
 8000af6:	076a      	lsls	r2, r5, #29
 8000af8:	d004      	beq.n	8000b04 <__aeabi_fdiv+0xa0>
 8000afa:	220f      	movs	r2, #15
 8000afc:	402a      	ands	r2, r5
 8000afe:	2a04      	cmp	r2, #4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fdiv+0xa0>
 8000b02:	3504      	adds	r5, #4
 8000b04:	012a      	lsls	r2, r5, #4
 8000b06:	d503      	bpl.n	8000b10 <__aeabi_fdiv+0xac>
 8000b08:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <__aeabi_fdiv+0x22c>)
 8000b0a:	401d      	ands	r5, r3
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	3380      	adds	r3, #128	; 0x80
 8000b10:	2bfe      	cmp	r3, #254	; 0xfe
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_fdiv+0xb2>
 8000b14:	e074      	b.n	8000c00 <__aeabi_fdiv+0x19c>
 8000b16:	01aa      	lsls	r2, r5, #6
 8000b18:	0a52      	lsrs	r2, r2, #9
 8000b1a:	b2d8      	uxtb	r0, r3
 8000b1c:	e002      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000b1e:	000e      	movs	r6, r1
 8000b20:	2000      	movs	r0, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	05c0      	lsls	r0, r0, #23
 8000b26:	07f6      	lsls	r6, r6, #31
 8000b28:	4310      	orrs	r0, r2
 8000b2a:	4330      	orrs	r0, r6
 8000b2c:	bce0      	pop	{r5, r6, r7}
 8000b2e:	46ba      	mov	sl, r7
 8000b30:	46b1      	mov	r9, r6
 8000b32:	46a8      	mov	r8, r5
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b36:	4643      	mov	r3, r8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d13f      	bne.n	8000bbc <__aeabi_fdiv+0x158>
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	3fff      	subs	r7, #255	; 0xff
 8000b40:	e003      	b.n	8000b4a <__aeabi_fdiv+0xe6>
 8000b42:	4643      	mov	r3, r8
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d12d      	bne.n	8000ba4 <__aeabi_fdiv+0x140>
 8000b48:	2201      	movs	r2, #1
 8000b4a:	0031      	movs	r1, r6
 8000b4c:	464b      	mov	r3, r9
 8000b4e:	4061      	eors	r1, r4
 8000b50:	b2c9      	uxtb	r1, r1
 8000b52:	4313      	orrs	r3, r2
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d838      	bhi.n	8000bca <__aeabi_fdiv+0x166>
 8000b58:	484e      	ldr	r0, [pc, #312]	; (8000c94 <__aeabi_fdiv+0x230>)
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	58c3      	ldr	r3, [r0, r3]
 8000b5e:	469f      	mov	pc, r3
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d113      	bne.n	8000b8c <__aeabi_fdiv+0x128>
 8000b64:	2304      	movs	r3, #4
 8000b66:	4699      	mov	r9, r3
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	2700      	movs	r7, #0
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	e792      	b.n	8000a96 <__aeabi_fdiv+0x32>
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d105      	bne.n	8000b80 <__aeabi_fdiv+0x11c>
 8000b74:	2308      	movs	r3, #8
 8000b76:	4699      	mov	r9, r3
 8000b78:	3b06      	subs	r3, #6
 8000b7a:	27ff      	movs	r7, #255	; 0xff
 8000b7c:	469a      	mov	sl, r3
 8000b7e:	e78a      	b.n	8000a96 <__aeabi_fdiv+0x32>
 8000b80:	230c      	movs	r3, #12
 8000b82:	4699      	mov	r9, r3
 8000b84:	3b09      	subs	r3, #9
 8000b86:	27ff      	movs	r7, #255	; 0xff
 8000b88:	469a      	mov	sl, r3
 8000b8a:	e784      	b.n	8000a96 <__aeabi_fdiv+0x32>
 8000b8c:	0028      	movs	r0, r5
 8000b8e:	f002 fb05 	bl	800319c <__clzsi2>
 8000b92:	2776      	movs	r7, #118	; 0x76
 8000b94:	1f43      	subs	r3, r0, #5
 8000b96:	409d      	lsls	r5, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	427f      	negs	r7, r7
 8000b9c:	4699      	mov	r9, r3
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	1a3f      	subs	r7, r7, r0
 8000ba2:	e778      	b.n	8000a96 <__aeabi_fdiv+0x32>
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	f002 faf9 	bl	800319c <__clzsi2>
 8000baa:	4642      	mov	r2, r8
 8000bac:	1f43      	subs	r3, r0, #5
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	2376      	movs	r3, #118	; 0x76
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	4690      	mov	r8, r2
 8000bb6:	1a1b      	subs	r3, r3, r0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	e77e      	b.n	8000aba <__aeabi_fdiv+0x56>
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	464a      	mov	r2, r9
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	4691      	mov	r9, r2
 8000bc4:	33fc      	adds	r3, #252	; 0xfc
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	e777      	b.n	8000aba <__aeabi_fdiv+0x56>
 8000bca:	000e      	movs	r6, r1
 8000bcc:	20ff      	movs	r0, #255	; 0xff
 8000bce:	2200      	movs	r2, #0
 8000bd0:	e7a8      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b1b      	cmp	r3, #27
 8000bd8:	dca2      	bgt.n	8000b20 <__aeabi_fdiv+0xbc>
 8000bda:	379e      	adds	r7, #158	; 0x9e
 8000bdc:	002a      	movs	r2, r5
 8000bde:	40bd      	lsls	r5, r7
 8000be0:	40da      	lsrs	r2, r3
 8000be2:	1e6b      	subs	r3, r5, #1
 8000be4:	419d      	sbcs	r5, r3
 8000be6:	4315      	orrs	r5, r2
 8000be8:	076a      	lsls	r2, r5, #29
 8000bea:	d004      	beq.n	8000bf6 <__aeabi_fdiv+0x192>
 8000bec:	220f      	movs	r2, #15
 8000bee:	402a      	ands	r2, r5
 8000bf0:	2a04      	cmp	r2, #4
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_fdiv+0x192>
 8000bf4:	3504      	adds	r5, #4
 8000bf6:	016a      	lsls	r2, r5, #5
 8000bf8:	d544      	bpl.n	8000c84 <__aeabi_fdiv+0x220>
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e791      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000c00:	20ff      	movs	r0, #255	; 0xff
 8000c02:	2200      	movs	r2, #0
 8000c04:	e78e      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	2600      	movs	r6, #0
 8000c0a:	20ff      	movs	r0, #255	; 0xff
 8000c0c:	03d2      	lsls	r2, r2, #15
 8000c0e:	e789      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000c10:	2300      	movs	r3, #0
 8000c12:	4698      	mov	r8, r3
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	03d2      	lsls	r2, r2, #15
 8000c18:	4215      	tst	r5, r2
 8000c1a:	d008      	beq.n	8000c2e <__aeabi_fdiv+0x1ca>
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	4213      	tst	r3, r2
 8000c20:	d105      	bne.n	8000c2e <__aeabi_fdiv+0x1ca>
 8000c22:	431a      	orrs	r2, r3
 8000c24:	0252      	lsls	r2, r2, #9
 8000c26:	0026      	movs	r6, r4
 8000c28:	20ff      	movs	r0, #255	; 0xff
 8000c2a:	0a52      	lsrs	r2, r2, #9
 8000c2c:	e77a      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	03d2      	lsls	r2, r2, #15
 8000c32:	432a      	orrs	r2, r5
 8000c34:	0252      	lsls	r2, r2, #9
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	0a52      	lsrs	r2, r2, #9
 8000c3a:	e773      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	016b      	lsls	r3, r5, #5
 8000c40:	0155      	lsls	r5, r2, #5
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d21a      	bcs.n	8000c7c <__aeabi_fdiv+0x218>
 8000c46:	201b      	movs	r0, #27
 8000c48:	2200      	movs	r2, #0
 8000c4a:	3f01      	subs	r7, #1
 8000c4c:	2601      	movs	r6, #1
 8000c4e:	001c      	movs	r4, r3
 8000c50:	0052      	lsls	r2, r2, #1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	db01      	blt.n	8000c5c <__aeabi_fdiv+0x1f8>
 8000c58:	429d      	cmp	r5, r3
 8000c5a:	d801      	bhi.n	8000c60 <__aeabi_fdiv+0x1fc>
 8000c5c:	1b5b      	subs	r3, r3, r5
 8000c5e:	4332      	orrs	r2, r6
 8000c60:	3801      	subs	r0, #1
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d1f3      	bne.n	8000c4e <__aeabi_fdiv+0x1ea>
 8000c66:	1e58      	subs	r0, r3, #1
 8000c68:	4183      	sbcs	r3, r0
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	001d      	movs	r5, r3
 8000c6e:	003b      	movs	r3, r7
 8000c70:	337f      	adds	r3, #127	; 0x7f
 8000c72:	000e      	movs	r6, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dd00      	ble.n	8000c7a <__aeabi_fdiv+0x216>
 8000c78:	e73d      	b.n	8000af6 <__aeabi_fdiv+0x92>
 8000c7a:	e7aa      	b.n	8000bd2 <__aeabi_fdiv+0x16e>
 8000c7c:	201a      	movs	r0, #26
 8000c7e:	2201      	movs	r2, #1
 8000c80:	1b5b      	subs	r3, r3, r5
 8000c82:	e7e3      	b.n	8000c4c <__aeabi_fdiv+0x1e8>
 8000c84:	01aa      	lsls	r2, r5, #6
 8000c86:	2000      	movs	r0, #0
 8000c88:	0a52      	lsrs	r2, r2, #9
 8000c8a:	e74b      	b.n	8000b24 <__aeabi_fdiv+0xc0>
 8000c8c:	0800b420 	.word	0x0800b420
 8000c90:	f7ffffff 	.word	0xf7ffffff
 8000c94:	0800b460 	.word	0x0800b460

08000c98 <__eqsf2>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	0042      	lsls	r2, r0, #1
 8000c9c:	0245      	lsls	r5, r0, #9
 8000c9e:	024e      	lsls	r6, r1, #9
 8000ca0:	004c      	lsls	r4, r1, #1
 8000ca2:	0fc3      	lsrs	r3, r0, #31
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	0e12      	lsrs	r2, r2, #24
 8000caa:	0a76      	lsrs	r6, r6, #9
 8000cac:	0e24      	lsrs	r4, r4, #24
 8000cae:	0fc9      	lsrs	r1, r1, #31
 8000cb0:	2aff      	cmp	r2, #255	; 0xff
 8000cb2:	d006      	beq.n	8000cc2 <__eqsf2+0x2a>
 8000cb4:	2cff      	cmp	r4, #255	; 0xff
 8000cb6:	d003      	beq.n	8000cc0 <__eqsf2+0x28>
 8000cb8:	42a2      	cmp	r2, r4
 8000cba:	d101      	bne.n	8000cc0 <__eqsf2+0x28>
 8000cbc:	42b5      	cmp	r5, r6
 8000cbe:	d006      	beq.n	8000cce <__eqsf2+0x36>
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d1fc      	bne.n	8000cc0 <__eqsf2+0x28>
 8000cc6:	2cff      	cmp	r4, #255	; 0xff
 8000cc8:	d1fa      	bne.n	8000cc0 <__eqsf2+0x28>
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d1f8      	bne.n	8000cc0 <__eqsf2+0x28>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d006      	beq.n	8000ce0 <__eqsf2+0x48>
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d1f3      	bne.n	8000cc0 <__eqsf2+0x28>
 8000cd8:	0028      	movs	r0, r5
 8000cda:	1e43      	subs	r3, r0, #1
 8000cdc:	4198      	sbcs	r0, r3
 8000cde:	e7ef      	b.n	8000cc0 <__eqsf2+0x28>
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	e7ed      	b.n	8000cc0 <__eqsf2+0x28>

08000ce4 <__gesf2>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	0042      	lsls	r2, r0, #1
 8000ce8:	0245      	lsls	r5, r0, #9
 8000cea:	024e      	lsls	r6, r1, #9
 8000cec:	004c      	lsls	r4, r1, #1
 8000cee:	0fc3      	lsrs	r3, r0, #31
 8000cf0:	0a6d      	lsrs	r5, r5, #9
 8000cf2:	0e12      	lsrs	r2, r2, #24
 8000cf4:	0a76      	lsrs	r6, r6, #9
 8000cf6:	0e24      	lsrs	r4, r4, #24
 8000cf8:	0fc8      	lsrs	r0, r1, #31
 8000cfa:	2aff      	cmp	r2, #255	; 0xff
 8000cfc:	d01b      	beq.n	8000d36 <__gesf2+0x52>
 8000cfe:	2cff      	cmp	r4, #255	; 0xff
 8000d00:	d00e      	beq.n	8000d20 <__gesf2+0x3c>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d11b      	bne.n	8000d3e <__gesf2+0x5a>
 8000d06:	2c00      	cmp	r4, #0
 8000d08:	d101      	bne.n	8000d0e <__gesf2+0x2a>
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d01c      	beq.n	8000d48 <__gesf2+0x64>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d00c      	beq.n	8000d2c <__gesf2+0x48>
 8000d12:	4283      	cmp	r3, r0
 8000d14:	d01c      	beq.n	8000d50 <__gesf2+0x6c>
 8000d16:	2102      	movs	r1, #2
 8000d18:	1e58      	subs	r0, r3, #1
 8000d1a:	4008      	ands	r0, r1
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d122      	bne.n	8000d6a <__gesf2+0x86>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d1f4      	bne.n	8000d12 <__gesf2+0x2e>
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d1f2      	bne.n	8000d12 <__gesf2+0x2e>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d1f6      	bne.n	8000d1e <__gesf2+0x3a>
 8000d30:	2001      	movs	r0, #1
 8000d32:	4240      	negs	r0, r0
 8000d34:	e7f3      	b.n	8000d1e <__gesf2+0x3a>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d117      	bne.n	8000d6a <__gesf2+0x86>
 8000d3a:	2cff      	cmp	r4, #255	; 0xff
 8000d3c:	d0f0      	beq.n	8000d20 <__gesf2+0x3c>
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d1e7      	bne.n	8000d12 <__gesf2+0x2e>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d1e5      	bne.n	8000d12 <__gesf2+0x2e>
 8000d46:	e7e6      	b.n	8000d16 <__gesf2+0x32>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e7      	beq.n	8000d1e <__gesf2+0x3a>
 8000d4e:	e7e2      	b.n	8000d16 <__gesf2+0x32>
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	dc05      	bgt.n	8000d60 <__gesf2+0x7c>
 8000d54:	dbea      	blt.n	8000d2c <__gesf2+0x48>
 8000d56:	42b5      	cmp	r5, r6
 8000d58:	d802      	bhi.n	8000d60 <__gesf2+0x7c>
 8000d5a:	d3e7      	bcc.n	8000d2c <__gesf2+0x48>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7de      	b.n	8000d1e <__gesf2+0x3a>
 8000d60:	4243      	negs	r3, r0
 8000d62:	4158      	adcs	r0, r3
 8000d64:	0040      	lsls	r0, r0, #1
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7d9      	b.n	8000d1e <__gesf2+0x3a>
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	4240      	negs	r0, r0
 8000d6e:	e7d6      	b.n	8000d1e <__gesf2+0x3a>

08000d70 <__lesf2>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	0042      	lsls	r2, r0, #1
 8000d74:	0245      	lsls	r5, r0, #9
 8000d76:	024e      	lsls	r6, r1, #9
 8000d78:	004c      	lsls	r4, r1, #1
 8000d7a:	0fc3      	lsrs	r3, r0, #31
 8000d7c:	0a6d      	lsrs	r5, r5, #9
 8000d7e:	0e12      	lsrs	r2, r2, #24
 8000d80:	0a76      	lsrs	r6, r6, #9
 8000d82:	0e24      	lsrs	r4, r4, #24
 8000d84:	0fc8      	lsrs	r0, r1, #31
 8000d86:	2aff      	cmp	r2, #255	; 0xff
 8000d88:	d00b      	beq.n	8000da2 <__lesf2+0x32>
 8000d8a:	2cff      	cmp	r4, #255	; 0xff
 8000d8c:	d00d      	beq.n	8000daa <__lesf2+0x3a>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d11f      	bne.n	8000dd2 <__lesf2+0x62>
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	d116      	bne.n	8000dc4 <__lesf2+0x54>
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d114      	bne.n	8000dc4 <__lesf2+0x54>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d010      	beq.n	8000dc2 <__lesf2+0x52>
 8000da0:	e009      	b.n	8000db6 <__lesf2+0x46>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d10c      	bne.n	8000dc0 <__lesf2+0x50>
 8000da6:	2cff      	cmp	r4, #255	; 0xff
 8000da8:	d113      	bne.n	8000dd2 <__lesf2+0x62>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d108      	bne.n	8000dc0 <__lesf2+0x50>
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d008      	beq.n	8000dc4 <__lesf2+0x54>
 8000db2:	4283      	cmp	r3, r0
 8000db4:	d012      	beq.n	8000ddc <__lesf2+0x6c>
 8000db6:	2102      	movs	r1, #2
 8000db8:	1e58      	subs	r0, r3, #1
 8000dba:	4008      	ands	r0, r1
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e000      	b.n	8000dc2 <__lesf2+0x52>
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	d1f4      	bne.n	8000db2 <__lesf2+0x42>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1fa      	bne.n	8000dc2 <__lesf2+0x52>
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4240      	negs	r0, r0
 8000dd0:	e7f7      	b.n	8000dc2 <__lesf2+0x52>
 8000dd2:	2c00      	cmp	r4, #0
 8000dd4:	d1ed      	bne.n	8000db2 <__lesf2+0x42>
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d1eb      	bne.n	8000db2 <__lesf2+0x42>
 8000dda:	e7ec      	b.n	8000db6 <__lesf2+0x46>
 8000ddc:	42a2      	cmp	r2, r4
 8000dde:	dc05      	bgt.n	8000dec <__lesf2+0x7c>
 8000de0:	dbf2      	blt.n	8000dc8 <__lesf2+0x58>
 8000de2:	42b5      	cmp	r5, r6
 8000de4:	d802      	bhi.n	8000dec <__lesf2+0x7c>
 8000de6:	d3ef      	bcc.n	8000dc8 <__lesf2+0x58>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7ea      	b.n	8000dc2 <__lesf2+0x52>
 8000dec:	4243      	negs	r3, r0
 8000dee:	4158      	adcs	r0, r3
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	3801      	subs	r0, #1
 8000df4:	e7e5      	b.n	8000dc2 <__lesf2+0x52>
 8000df6:	46c0      	nop			; (mov r8, r8)

08000df8 <__aeabi_fmul>:
 8000df8:	0243      	lsls	r3, r0, #9
 8000dfa:	0a5b      	lsrs	r3, r3, #9
 8000dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfe:	464f      	mov	r7, r9
 8000e00:	4646      	mov	r6, r8
 8000e02:	4699      	mov	r9, r3
 8000e04:	46d6      	mov	lr, sl
 8000e06:	0fc3      	lsrs	r3, r0, #31
 8000e08:	0045      	lsls	r5, r0, #1
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	b5c0      	push	{r6, r7, lr}
 8000e0e:	464b      	mov	r3, r9
 8000e10:	1c0f      	adds	r7, r1, #0
 8000e12:	0e2d      	lsrs	r5, r5, #24
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fmul+0x20>
 8000e16:	e0cb      	b.n	8000fb0 <__aeabi_fmul+0x1b8>
 8000e18:	2dff      	cmp	r5, #255	; 0xff
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fmul+0x26>
 8000e1c:	e0cf      	b.n	8000fbe <__aeabi_fmul+0x1c6>
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	04d2      	lsls	r2, r2, #19
 8000e24:	431a      	orrs	r2, r3
 8000e26:	2300      	movs	r3, #0
 8000e28:	4691      	mov	r9, r2
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	469a      	mov	sl, r3
 8000e2e:	3d7f      	subs	r5, #127	; 0x7f
 8000e30:	027c      	lsls	r4, r7, #9
 8000e32:	007b      	lsls	r3, r7, #1
 8000e34:	0a64      	lsrs	r4, r4, #9
 8000e36:	0e1b      	lsrs	r3, r3, #24
 8000e38:	0fff      	lsrs	r7, r7, #31
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fmul+0x48>
 8000e3e:	e0a9      	b.n	8000f94 <__aeabi_fmul+0x19c>
 8000e40:	2bff      	cmp	r3, #255	; 0xff
 8000e42:	d011      	beq.n	8000e68 <__aeabi_fmul+0x70>
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	00e4      	lsls	r4, r4, #3
 8000e48:	04d2      	lsls	r2, r2, #19
 8000e4a:	4314      	orrs	r4, r2
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	3b7f      	subs	r3, #127	; 0x7f
 8000e50:	195b      	adds	r3, r3, r5
 8000e52:	407a      	eors	r2, r7
 8000e54:	2000      	movs	r0, #0
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	1c5d      	adds	r5, r3, #1
 8000e5a:	2e0a      	cmp	r6, #10
 8000e5c:	dd13      	ble.n	8000e86 <__aeabi_fmul+0x8e>
 8000e5e:	003a      	movs	r2, r7
 8000e60:	2e0b      	cmp	r6, #11
 8000e62:	d047      	beq.n	8000ef4 <__aeabi_fmul+0xfc>
 8000e64:	4647      	mov	r7, r8
 8000e66:	e03f      	b.n	8000ee8 <__aeabi_fmul+0xf0>
 8000e68:	002b      	movs	r3, r5
 8000e6a:	33ff      	adds	r3, #255	; 0xff
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d11e      	bne.n	8000eae <__aeabi_fmul+0xb6>
 8000e70:	2202      	movs	r2, #2
 8000e72:	4316      	orrs	r6, r2
 8000e74:	4642      	mov	r2, r8
 8000e76:	3501      	adds	r5, #1
 8000e78:	407a      	eors	r2, r7
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	35ff      	adds	r5, #255	; 0xff
 8000e7e:	2e0a      	cmp	r6, #10
 8000e80:	dd00      	ble.n	8000e84 <__aeabi_fmul+0x8c>
 8000e82:	e0e4      	b.n	800104e <__aeabi_fmul+0x256>
 8000e84:	2002      	movs	r0, #2
 8000e86:	2e02      	cmp	r6, #2
 8000e88:	dc1c      	bgt.n	8000ec4 <__aeabi_fmul+0xcc>
 8000e8a:	3e01      	subs	r6, #1
 8000e8c:	2e01      	cmp	r6, #1
 8000e8e:	d842      	bhi.n	8000f16 <__aeabi_fmul+0x11e>
 8000e90:	2802      	cmp	r0, #2
 8000e92:	d03d      	beq.n	8000f10 <__aeabi_fmul+0x118>
 8000e94:	2801      	cmp	r0, #1
 8000e96:	d166      	bne.n	8000f66 <__aeabi_fmul+0x16e>
 8000e98:	2000      	movs	r0, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	05c0      	lsls	r0, r0, #23
 8000e9e:	4308      	orrs	r0, r1
 8000ea0:	07d2      	lsls	r2, r2, #31
 8000ea2:	4310      	orrs	r0, r2
 8000ea4:	bce0      	pop	{r5, r6, r7}
 8000ea6:	46ba      	mov	sl, r7
 8000ea8:	46b1      	mov	r9, r6
 8000eaa:	46a8      	mov	r8, r5
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4316      	orrs	r6, r2
 8000eb2:	4642      	mov	r2, r8
 8000eb4:	3501      	adds	r5, #1
 8000eb6:	407a      	eors	r2, r7
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	35ff      	adds	r5, #255	; 0xff
 8000ebc:	2e0a      	cmp	r6, #10
 8000ebe:	dd00      	ble.n	8000ec2 <__aeabi_fmul+0xca>
 8000ec0:	e0e4      	b.n	800108c <__aeabi_fmul+0x294>
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	26a6      	movs	r6, #166	; 0xa6
 8000eca:	00f6      	lsls	r6, r6, #3
 8000ecc:	4231      	tst	r1, r6
 8000ece:	d10a      	bne.n	8000ee6 <__aeabi_fmul+0xee>
 8000ed0:	2690      	movs	r6, #144	; 0x90
 8000ed2:	00b6      	lsls	r6, r6, #2
 8000ed4:	4231      	tst	r1, r6
 8000ed6:	d116      	bne.n	8000f06 <__aeabi_fmul+0x10e>
 8000ed8:	3eb9      	subs	r6, #185	; 0xb9
 8000eda:	3eff      	subs	r6, #255	; 0xff
 8000edc:	420e      	tst	r6, r1
 8000ede:	d01a      	beq.n	8000f16 <__aeabi_fmul+0x11e>
 8000ee0:	46a1      	mov	r9, r4
 8000ee2:	4682      	mov	sl, r0
 8000ee4:	e000      	b.n	8000ee8 <__aeabi_fmul+0xf0>
 8000ee6:	0017      	movs	r7, r2
 8000ee8:	4653      	mov	r3, sl
 8000eea:	003a      	movs	r2, r7
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d00f      	beq.n	8000f10 <__aeabi_fmul+0x118>
 8000ef0:	464c      	mov	r4, r9
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	2803      	cmp	r0, #3
 8000ef6:	d1cd      	bne.n	8000e94 <__aeabi_fmul+0x9c>
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	03c9      	lsls	r1, r1, #15
 8000efc:	4321      	orrs	r1, r4
 8000efe:	0249      	lsls	r1, r1, #9
 8000f00:	20ff      	movs	r0, #255	; 0xff
 8000f02:	0a49      	lsrs	r1, r1, #9
 8000f04:	e7ca      	b.n	8000e9c <__aeabi_fmul+0xa4>
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	2200      	movs	r2, #0
 8000f0a:	20ff      	movs	r0, #255	; 0xff
 8000f0c:	03c9      	lsls	r1, r1, #15
 8000f0e:	e7c5      	b.n	8000e9c <__aeabi_fmul+0xa4>
 8000f10:	20ff      	movs	r0, #255	; 0xff
 8000f12:	2100      	movs	r1, #0
 8000f14:	e7c2      	b.n	8000e9c <__aeabi_fmul+0xa4>
 8000f16:	0c20      	lsrs	r0, r4, #16
 8000f18:	4649      	mov	r1, r9
 8000f1a:	0424      	lsls	r4, r4, #16
 8000f1c:	0c24      	lsrs	r4, r4, #16
 8000f1e:	0027      	movs	r7, r4
 8000f20:	0c0e      	lsrs	r6, r1, #16
 8000f22:	0409      	lsls	r1, r1, #16
 8000f24:	0c09      	lsrs	r1, r1, #16
 8000f26:	4374      	muls	r4, r6
 8000f28:	434f      	muls	r7, r1
 8000f2a:	4346      	muls	r6, r0
 8000f2c:	4348      	muls	r0, r1
 8000f2e:	0c39      	lsrs	r1, r7, #16
 8000f30:	1900      	adds	r0, r0, r4
 8000f32:	1809      	adds	r1, r1, r0
 8000f34:	428c      	cmp	r4, r1
 8000f36:	d903      	bls.n	8000f40 <__aeabi_fmul+0x148>
 8000f38:	2080      	movs	r0, #128	; 0x80
 8000f3a:	0240      	lsls	r0, r0, #9
 8000f3c:	4684      	mov	ip, r0
 8000f3e:	4466      	add	r6, ip
 8000f40:	043f      	lsls	r7, r7, #16
 8000f42:	0408      	lsls	r0, r1, #16
 8000f44:	0c3f      	lsrs	r7, r7, #16
 8000f46:	19c0      	adds	r0, r0, r7
 8000f48:	0184      	lsls	r4, r0, #6
 8000f4a:	1e67      	subs	r7, r4, #1
 8000f4c:	41bc      	sbcs	r4, r7
 8000f4e:	0c09      	lsrs	r1, r1, #16
 8000f50:	0e80      	lsrs	r0, r0, #26
 8000f52:	1989      	adds	r1, r1, r6
 8000f54:	4304      	orrs	r4, r0
 8000f56:	0189      	lsls	r1, r1, #6
 8000f58:	430c      	orrs	r4, r1
 8000f5a:	0109      	lsls	r1, r1, #4
 8000f5c:	d571      	bpl.n	8001042 <__aeabi_fmul+0x24a>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	0861      	lsrs	r1, r4, #1
 8000f62:	401c      	ands	r4, r3
 8000f64:	430c      	orrs	r4, r1
 8000f66:	002b      	movs	r3, r5
 8000f68:	337f      	adds	r3, #127	; 0x7f
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dd51      	ble.n	8001012 <__aeabi_fmul+0x21a>
 8000f6e:	0761      	lsls	r1, r4, #29
 8000f70:	d004      	beq.n	8000f7c <__aeabi_fmul+0x184>
 8000f72:	210f      	movs	r1, #15
 8000f74:	4021      	ands	r1, r4
 8000f76:	2904      	cmp	r1, #4
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fmul+0x184>
 8000f7a:	3404      	adds	r4, #4
 8000f7c:	0121      	lsls	r1, r4, #4
 8000f7e:	d503      	bpl.n	8000f88 <__aeabi_fmul+0x190>
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <__aeabi_fmul+0x298>)
 8000f82:	401c      	ands	r4, r3
 8000f84:	002b      	movs	r3, r5
 8000f86:	3380      	adds	r3, #128	; 0x80
 8000f88:	2bfe      	cmp	r3, #254	; 0xfe
 8000f8a:	dcc1      	bgt.n	8000f10 <__aeabi_fmul+0x118>
 8000f8c:	01a1      	lsls	r1, r4, #6
 8000f8e:	0a49      	lsrs	r1, r1, #9
 8000f90:	b2d8      	uxtb	r0, r3
 8000f92:	e783      	b.n	8000e9c <__aeabi_fmul+0xa4>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d12c      	bne.n	8000ff2 <__aeabi_fmul+0x1fa>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4642      	mov	r2, r8
 8000f9c:	431e      	orrs	r6, r3
 8000f9e:	002b      	movs	r3, r5
 8000fa0:	407a      	eors	r2, r7
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	1c5d      	adds	r5, r3, #1
 8000fa8:	2e0a      	cmp	r6, #10
 8000faa:	dd00      	ble.n	8000fae <__aeabi_fmul+0x1b6>
 8000fac:	e757      	b.n	8000e5e <__aeabi_fmul+0x66>
 8000fae:	e76a      	b.n	8000e86 <__aeabi_fmul+0x8e>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d110      	bne.n	8000fd6 <__aeabi_fmul+0x1de>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	2604      	movs	r6, #4
 8000fb8:	2500      	movs	r5, #0
 8000fba:	469a      	mov	sl, r3
 8000fbc:	e738      	b.n	8000e30 <__aeabi_fmul+0x38>
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d104      	bne.n	8000fcc <__aeabi_fmul+0x1d4>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	2608      	movs	r6, #8
 8000fc6:	25ff      	movs	r5, #255	; 0xff
 8000fc8:	469a      	mov	sl, r3
 8000fca:	e731      	b.n	8000e30 <__aeabi_fmul+0x38>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	260c      	movs	r6, #12
 8000fd0:	25ff      	movs	r5, #255	; 0xff
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	e72c      	b.n	8000e30 <__aeabi_fmul+0x38>
 8000fd6:	4648      	mov	r0, r9
 8000fd8:	f002 f8e0 	bl	800319c <__clzsi2>
 8000fdc:	464a      	mov	r2, r9
 8000fde:	1f43      	subs	r3, r0, #5
 8000fe0:	2576      	movs	r5, #118	; 0x76
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	426d      	negs	r5, r5
 8000fe8:	4691      	mov	r9, r2
 8000fea:	2600      	movs	r6, #0
 8000fec:	469a      	mov	sl, r3
 8000fee:	1a2d      	subs	r5, r5, r0
 8000ff0:	e71e      	b.n	8000e30 <__aeabi_fmul+0x38>
 8000ff2:	0020      	movs	r0, r4
 8000ff4:	f002 f8d2 	bl	800319c <__clzsi2>
 8000ff8:	4642      	mov	r2, r8
 8000ffa:	1f43      	subs	r3, r0, #5
 8000ffc:	409c      	lsls	r4, r3
 8000ffe:	1a2b      	subs	r3, r5, r0
 8001000:	3b76      	subs	r3, #118	; 0x76
 8001002:	407a      	eors	r2, r7
 8001004:	2000      	movs	r0, #0
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	1c5d      	adds	r5, r3, #1
 800100a:	2e0a      	cmp	r6, #10
 800100c:	dd00      	ble.n	8001010 <__aeabi_fmul+0x218>
 800100e:	e726      	b.n	8000e5e <__aeabi_fmul+0x66>
 8001010:	e739      	b.n	8000e86 <__aeabi_fmul+0x8e>
 8001012:	2101      	movs	r1, #1
 8001014:	1acb      	subs	r3, r1, r3
 8001016:	2b1b      	cmp	r3, #27
 8001018:	dd00      	ble.n	800101c <__aeabi_fmul+0x224>
 800101a:	e73d      	b.n	8000e98 <__aeabi_fmul+0xa0>
 800101c:	359e      	adds	r5, #158	; 0x9e
 800101e:	0021      	movs	r1, r4
 8001020:	40ac      	lsls	r4, r5
 8001022:	40d9      	lsrs	r1, r3
 8001024:	1e63      	subs	r3, r4, #1
 8001026:	419c      	sbcs	r4, r3
 8001028:	4321      	orrs	r1, r4
 800102a:	074b      	lsls	r3, r1, #29
 800102c:	d004      	beq.n	8001038 <__aeabi_fmul+0x240>
 800102e:	230f      	movs	r3, #15
 8001030:	400b      	ands	r3, r1
 8001032:	2b04      	cmp	r3, #4
 8001034:	d000      	beq.n	8001038 <__aeabi_fmul+0x240>
 8001036:	3104      	adds	r1, #4
 8001038:	014b      	lsls	r3, r1, #5
 800103a:	d504      	bpl.n	8001046 <__aeabi_fmul+0x24e>
 800103c:	2001      	movs	r0, #1
 800103e:	2100      	movs	r1, #0
 8001040:	e72c      	b.n	8000e9c <__aeabi_fmul+0xa4>
 8001042:	001d      	movs	r5, r3
 8001044:	e78f      	b.n	8000f66 <__aeabi_fmul+0x16e>
 8001046:	0189      	lsls	r1, r1, #6
 8001048:	2000      	movs	r0, #0
 800104a:	0a49      	lsrs	r1, r1, #9
 800104c:	e726      	b.n	8000e9c <__aeabi_fmul+0xa4>
 800104e:	2302      	movs	r3, #2
 8001050:	2e0f      	cmp	r6, #15
 8001052:	d10c      	bne.n	800106e <__aeabi_fmul+0x276>
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	464b      	mov	r3, r9
 8001058:	03c9      	lsls	r1, r1, #15
 800105a:	420b      	tst	r3, r1
 800105c:	d00d      	beq.n	800107a <__aeabi_fmul+0x282>
 800105e:	420c      	tst	r4, r1
 8001060:	d10b      	bne.n	800107a <__aeabi_fmul+0x282>
 8001062:	4321      	orrs	r1, r4
 8001064:	0249      	lsls	r1, r1, #9
 8001066:	003a      	movs	r2, r7
 8001068:	20ff      	movs	r0, #255	; 0xff
 800106a:	0a49      	lsrs	r1, r1, #9
 800106c:	e716      	b.n	8000e9c <__aeabi_fmul+0xa4>
 800106e:	2e0b      	cmp	r6, #11
 8001070:	d000      	beq.n	8001074 <__aeabi_fmul+0x27c>
 8001072:	e6f7      	b.n	8000e64 <__aeabi_fmul+0x6c>
 8001074:	46a1      	mov	r9, r4
 8001076:	469a      	mov	sl, r3
 8001078:	e736      	b.n	8000ee8 <__aeabi_fmul+0xf0>
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	464b      	mov	r3, r9
 800107e:	03c9      	lsls	r1, r1, #15
 8001080:	4319      	orrs	r1, r3
 8001082:	0249      	lsls	r1, r1, #9
 8001084:	4642      	mov	r2, r8
 8001086:	20ff      	movs	r0, #255	; 0xff
 8001088:	0a49      	lsrs	r1, r1, #9
 800108a:	e707      	b.n	8000e9c <__aeabi_fmul+0xa4>
 800108c:	2303      	movs	r3, #3
 800108e:	e7df      	b.n	8001050 <__aeabi_fmul+0x258>
 8001090:	f7ffffff 	.word	0xf7ffffff

08001094 <__aeabi_fsub>:
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	46c6      	mov	lr, r8
 8001098:	0243      	lsls	r3, r0, #9
 800109a:	0a5b      	lsrs	r3, r3, #9
 800109c:	0045      	lsls	r5, r0, #1
 800109e:	00da      	lsls	r2, r3, #3
 80010a0:	0fc4      	lsrs	r4, r0, #31
 80010a2:	0248      	lsls	r0, r1, #9
 80010a4:	004f      	lsls	r7, r1, #1
 80010a6:	4694      	mov	ip, r2
 80010a8:	0a42      	lsrs	r2, r0, #9
 80010aa:	001e      	movs	r6, r3
 80010ac:	4690      	mov	r8, r2
 80010ae:	b500      	push	{lr}
 80010b0:	0e2d      	lsrs	r5, r5, #24
 80010b2:	0e3f      	lsrs	r7, r7, #24
 80010b4:	0fc9      	lsrs	r1, r1, #31
 80010b6:	0980      	lsrs	r0, r0, #6
 80010b8:	2fff      	cmp	r7, #255	; 0xff
 80010ba:	d059      	beq.n	8001170 <__aeabi_fsub+0xdc>
 80010bc:	2201      	movs	r2, #1
 80010be:	4051      	eors	r1, r2
 80010c0:	428c      	cmp	r4, r1
 80010c2:	d039      	beq.n	8001138 <__aeabi_fsub+0xa4>
 80010c4:	1bea      	subs	r2, r5, r7
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	dd58      	ble.n	800117c <__aeabi_fsub+0xe8>
 80010ca:	2f00      	cmp	r7, #0
 80010cc:	d068      	beq.n	80011a0 <__aeabi_fsub+0x10c>
 80010ce:	2dff      	cmp	r5, #255	; 0xff
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x40>
 80010d2:	e0d1      	b.n	8001278 <__aeabi_fsub+0x1e4>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	04db      	lsls	r3, r3, #19
 80010d8:	4318      	orrs	r0, r3
 80010da:	2a1b      	cmp	r2, #27
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_fsub+0x4c>
 80010de:	e0e3      	b.n	80012a8 <__aeabi_fsub+0x214>
 80010e0:	2301      	movs	r3, #1
 80010e2:	4662      	mov	r2, ip
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	d400      	bmi.n	80010ec <__aeabi_fsub+0x58>
 80010ea:	e0ac      	b.n	8001246 <__aeabi_fsub+0x1b2>
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	099e      	lsrs	r6, r3, #6
 80010f0:	0030      	movs	r0, r6
 80010f2:	f002 f853 	bl	800319c <__clzsi2>
 80010f6:	0033      	movs	r3, r6
 80010f8:	3805      	subs	r0, #5
 80010fa:	4083      	lsls	r3, r0
 80010fc:	4285      	cmp	r5, r0
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_fsub+0x6e>
 8001100:	e0c6      	b.n	8001290 <__aeabi_fsub+0x1fc>
 8001102:	4ab2      	ldr	r2, [pc, #712]	; (80013cc <__aeabi_fsub+0x338>)
 8001104:	1a2d      	subs	r5, r5, r0
 8001106:	4013      	ands	r3, r2
 8001108:	075a      	lsls	r2, r3, #29
 800110a:	d004      	beq.n	8001116 <__aeabi_fsub+0x82>
 800110c:	220f      	movs	r2, #15
 800110e:	401a      	ands	r2, r3
 8001110:	2a04      	cmp	r2, #4
 8001112:	d000      	beq.n	8001116 <__aeabi_fsub+0x82>
 8001114:	3304      	adds	r3, #4
 8001116:	015a      	lsls	r2, r3, #5
 8001118:	d400      	bmi.n	800111c <__aeabi_fsub+0x88>
 800111a:	e097      	b.n	800124c <__aeabi_fsub+0x1b8>
 800111c:	1c6a      	adds	r2, r5, #1
 800111e:	2dfe      	cmp	r5, #254	; 0xfe
 8001120:	d100      	bne.n	8001124 <__aeabi_fsub+0x90>
 8001122:	e084      	b.n	800122e <__aeabi_fsub+0x19a>
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	0a5e      	lsrs	r6, r3, #9
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	05d0      	lsls	r0, r2, #23
 800112c:	4330      	orrs	r0, r6
 800112e:	07e4      	lsls	r4, r4, #31
 8001130:	4320      	orrs	r0, r4
 8001132:	bc80      	pop	{r7}
 8001134:	46b8      	mov	r8, r7
 8001136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001138:	1bea      	subs	r2, r5, r7
 800113a:	2a00      	cmp	r2, #0
 800113c:	dd41      	ble.n	80011c2 <__aeabi_fsub+0x12e>
 800113e:	2f00      	cmp	r7, #0
 8001140:	d06b      	beq.n	800121a <__aeabi_fsub+0x186>
 8001142:	2dff      	cmp	r5, #255	; 0xff
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0xb4>
 8001146:	e097      	b.n	8001278 <__aeabi_fsub+0x1e4>
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	04db      	lsls	r3, r3, #19
 800114c:	4318      	orrs	r0, r3
 800114e:	2a1b      	cmp	r2, #27
 8001150:	dc00      	bgt.n	8001154 <__aeabi_fsub+0xc0>
 8001152:	e0cc      	b.n	80012ee <__aeabi_fsub+0x25a>
 8001154:	2301      	movs	r3, #1
 8001156:	4463      	add	r3, ip
 8001158:	015a      	lsls	r2, r3, #5
 800115a:	d574      	bpl.n	8001246 <__aeabi_fsub+0x1b2>
 800115c:	3501      	adds	r5, #1
 800115e:	2dff      	cmp	r5, #255	; 0xff
 8001160:	d065      	beq.n	800122e <__aeabi_fsub+0x19a>
 8001162:	2201      	movs	r2, #1
 8001164:	499a      	ldr	r1, [pc, #616]	; (80013d0 <__aeabi_fsub+0x33c>)
 8001166:	401a      	ands	r2, r3
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	400b      	ands	r3, r1
 800116c:	4313      	orrs	r3, r2
 800116e:	e7cb      	b.n	8001108 <__aeabi_fsub+0x74>
 8001170:	2800      	cmp	r0, #0
 8001172:	d01f      	beq.n	80011b4 <__aeabi_fsub+0x120>
 8001174:	428c      	cmp	r4, r1
 8001176:	d022      	beq.n	80011be <__aeabi_fsub+0x12a>
 8001178:	002a      	movs	r2, r5
 800117a:	3aff      	subs	r2, #255	; 0xff
 800117c:	2a00      	cmp	r2, #0
 800117e:	d035      	beq.n	80011ec <__aeabi_fsub+0x158>
 8001180:	1b7a      	subs	r2, r7, r5
 8001182:	2d00      	cmp	r5, #0
 8001184:	d000      	beq.n	8001188 <__aeabi_fsub+0xf4>
 8001186:	e099      	b.n	80012bc <__aeabi_fsub+0x228>
 8001188:	4663      	mov	r3, ip
 800118a:	2b00      	cmp	r3, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_fsub+0xfc>
 800118e:	e0dd      	b.n	800134c <__aeabi_fsub+0x2b8>
 8001190:	1e53      	subs	r3, r2, #1
 8001192:	2a01      	cmp	r2, #1
 8001194:	d100      	bne.n	8001198 <__aeabi_fsub+0x104>
 8001196:	e105      	b.n	80013a4 <__aeabi_fsub+0x310>
 8001198:	2aff      	cmp	r2, #255	; 0xff
 800119a:	d06b      	beq.n	8001274 <__aeabi_fsub+0x1e0>
 800119c:	001a      	movs	r2, r3
 800119e:	e094      	b.n	80012ca <__aeabi_fsub+0x236>
 80011a0:	2800      	cmp	r0, #0
 80011a2:	d073      	beq.n	800128c <__aeabi_fsub+0x1f8>
 80011a4:	1e51      	subs	r1, r2, #1
 80011a6:	2a01      	cmp	r2, #1
 80011a8:	d100      	bne.n	80011ac <__aeabi_fsub+0x118>
 80011aa:	e0df      	b.n	800136c <__aeabi_fsub+0x2d8>
 80011ac:	2aff      	cmp	r2, #255	; 0xff
 80011ae:	d063      	beq.n	8001278 <__aeabi_fsub+0x1e4>
 80011b0:	000a      	movs	r2, r1
 80011b2:	e792      	b.n	80010da <__aeabi_fsub+0x46>
 80011b4:	2201      	movs	r2, #1
 80011b6:	4051      	eors	r1, r2
 80011b8:	42a1      	cmp	r1, r4
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x12a>
 80011bc:	e782      	b.n	80010c4 <__aeabi_fsub+0x30>
 80011be:	002a      	movs	r2, r5
 80011c0:	3aff      	subs	r2, #255	; 0xff
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d036      	beq.n	8001234 <__aeabi_fsub+0x1a0>
 80011c6:	1b7a      	subs	r2, r7, r5
 80011c8:	2d00      	cmp	r5, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_fsub+0x13a>
 80011cc:	e0aa      	b.n	8001324 <__aeabi_fsub+0x290>
 80011ce:	2fff      	cmp	r7, #255	; 0xff
 80011d0:	d100      	bne.n	80011d4 <__aeabi_fsub+0x140>
 80011d2:	e0da      	b.n	800138a <__aeabi_fsub+0x2f6>
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	4661      	mov	r1, ip
 80011d8:	04db      	lsls	r3, r3, #19
 80011da:	4319      	orrs	r1, r3
 80011dc:	468c      	mov	ip, r1
 80011de:	2a1b      	cmp	r2, #27
 80011e0:	dc00      	bgt.n	80011e4 <__aeabi_fsub+0x150>
 80011e2:	e0d4      	b.n	800138e <__aeabi_fsub+0x2fa>
 80011e4:	2301      	movs	r3, #1
 80011e6:	003d      	movs	r5, r7
 80011e8:	181b      	adds	r3, r3, r0
 80011ea:	e7b5      	b.n	8001158 <__aeabi_fsub+0xc4>
 80011ec:	27fe      	movs	r7, #254	; 0xfe
 80011ee:	1c6a      	adds	r2, r5, #1
 80011f0:	4217      	tst	r7, r2
 80011f2:	d171      	bne.n	80012d8 <__aeabi_fsub+0x244>
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d000      	beq.n	80011fa <__aeabi_fsub+0x166>
 80011f8:	e09e      	b.n	8001338 <__aeabi_fsub+0x2a4>
 80011fa:	4663      	mov	r3, ip
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d100      	bne.n	8001202 <__aeabi_fsub+0x16e>
 8001200:	e0d5      	b.n	80013ae <__aeabi_fsub+0x31a>
 8001202:	2200      	movs	r2, #0
 8001204:	2800      	cmp	r0, #0
 8001206:	d100      	bne.n	800120a <__aeabi_fsub+0x176>
 8001208:	e78f      	b.n	800112a <__aeabi_fsub+0x96>
 800120a:	1a1b      	subs	r3, r3, r0
 800120c:	015e      	lsls	r6, r3, #5
 800120e:	d400      	bmi.n	8001212 <__aeabi_fsub+0x17e>
 8001210:	e0d6      	b.n	80013c0 <__aeabi_fsub+0x32c>
 8001212:	4663      	mov	r3, ip
 8001214:	000c      	movs	r4, r1
 8001216:	1ac3      	subs	r3, r0, r3
 8001218:	e776      	b.n	8001108 <__aeabi_fsub+0x74>
 800121a:	2800      	cmp	r0, #0
 800121c:	d036      	beq.n	800128c <__aeabi_fsub+0x1f8>
 800121e:	1e51      	subs	r1, r2, #1
 8001220:	2a01      	cmp	r2, #1
 8001222:	d100      	bne.n	8001226 <__aeabi_fsub+0x192>
 8001224:	e09a      	b.n	800135c <__aeabi_fsub+0x2c8>
 8001226:	2aff      	cmp	r2, #255	; 0xff
 8001228:	d026      	beq.n	8001278 <__aeabi_fsub+0x1e4>
 800122a:	000a      	movs	r2, r1
 800122c:	e78f      	b.n	800114e <__aeabi_fsub+0xba>
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	2600      	movs	r6, #0
 8001232:	e77a      	b.n	800112a <__aeabi_fsub+0x96>
 8001234:	27fe      	movs	r7, #254	; 0xfe
 8001236:	1c6a      	adds	r2, r5, #1
 8001238:	4217      	tst	r7, r2
 800123a:	d062      	beq.n	8001302 <__aeabi_fsub+0x26e>
 800123c:	2aff      	cmp	r2, #255	; 0xff
 800123e:	d0f6      	beq.n	800122e <__aeabi_fsub+0x19a>
 8001240:	0015      	movs	r5, r2
 8001242:	4460      	add	r0, ip
 8001244:	0843      	lsrs	r3, r0, #1
 8001246:	075a      	lsls	r2, r3, #29
 8001248:	d000      	beq.n	800124c <__aeabi_fsub+0x1b8>
 800124a:	e75f      	b.n	800110c <__aeabi_fsub+0x78>
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	2dff      	cmp	r5, #255	; 0xff
 8001250:	d012      	beq.n	8001278 <__aeabi_fsub+0x1e4>
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	0a5e      	lsrs	r6, r3, #9
 8001256:	b2ea      	uxtb	r2, r5
 8001258:	e767      	b.n	800112a <__aeabi_fsub+0x96>
 800125a:	4662      	mov	r2, ip
 800125c:	2a00      	cmp	r2, #0
 800125e:	d100      	bne.n	8001262 <__aeabi_fsub+0x1ce>
 8001260:	e093      	b.n	800138a <__aeabi_fsub+0x2f6>
 8001262:	2800      	cmp	r0, #0
 8001264:	d008      	beq.n	8001278 <__aeabi_fsub+0x1e4>
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	03d2      	lsls	r2, r2, #15
 800126a:	4213      	tst	r3, r2
 800126c:	d004      	beq.n	8001278 <__aeabi_fsub+0x1e4>
 800126e:	4640      	mov	r0, r8
 8001270:	4210      	tst	r0, r2
 8001272:	d101      	bne.n	8001278 <__aeabi_fsub+0x1e4>
 8001274:	000c      	movs	r4, r1
 8001276:	4643      	mov	r3, r8
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0d8      	beq.n	800122e <__aeabi_fsub+0x19a>
 800127c:	2680      	movs	r6, #128	; 0x80
 800127e:	03f6      	lsls	r6, r6, #15
 8001280:	431e      	orrs	r6, r3
 8001282:	0276      	lsls	r6, r6, #9
 8001284:	22ff      	movs	r2, #255	; 0xff
 8001286:	0a76      	lsrs	r6, r6, #9
 8001288:	e74f      	b.n	800112a <__aeabi_fsub+0x96>
 800128a:	4643      	mov	r3, r8
 800128c:	0015      	movs	r5, r2
 800128e:	e7de      	b.n	800124e <__aeabi_fsub+0x1ba>
 8001290:	2220      	movs	r2, #32
 8001292:	1b40      	subs	r0, r0, r5
 8001294:	3001      	adds	r0, #1
 8001296:	1a12      	subs	r2, r2, r0
 8001298:	0019      	movs	r1, r3
 800129a:	4093      	lsls	r3, r2
 800129c:	40c1      	lsrs	r1, r0
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	4193      	sbcs	r3, r2
 80012a2:	2500      	movs	r5, #0
 80012a4:	430b      	orrs	r3, r1
 80012a6:	e72f      	b.n	8001108 <__aeabi_fsub+0x74>
 80012a8:	2320      	movs	r3, #32
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	0001      	movs	r1, r0
 80012ae:	4098      	lsls	r0, r3
 80012b0:	0003      	movs	r3, r0
 80012b2:	40d1      	lsrs	r1, r2
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	4193      	sbcs	r3, r2
 80012b8:	430b      	orrs	r3, r1
 80012ba:	e712      	b.n	80010e2 <__aeabi_fsub+0x4e>
 80012bc:	2fff      	cmp	r7, #255	; 0xff
 80012be:	d0d9      	beq.n	8001274 <__aeabi_fsub+0x1e0>
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	4664      	mov	r4, ip
 80012c4:	04db      	lsls	r3, r3, #19
 80012c6:	431c      	orrs	r4, r3
 80012c8:	46a4      	mov	ip, r4
 80012ca:	2a1b      	cmp	r2, #27
 80012cc:	dd52      	ble.n	8001374 <__aeabi_fsub+0x2e0>
 80012ce:	2301      	movs	r3, #1
 80012d0:	000c      	movs	r4, r1
 80012d2:	003d      	movs	r5, r7
 80012d4:	1ac3      	subs	r3, r0, r3
 80012d6:	e706      	b.n	80010e6 <__aeabi_fsub+0x52>
 80012d8:	4663      	mov	r3, ip
 80012da:	1a1e      	subs	r6, r3, r0
 80012dc:	0173      	lsls	r3, r6, #5
 80012de:	d439      	bmi.n	8001354 <__aeabi_fsub+0x2c0>
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	d000      	beq.n	80012e6 <__aeabi_fsub+0x252>
 80012e4:	e704      	b.n	80010f0 <__aeabi_fsub+0x5c>
 80012e6:	2400      	movs	r4, #0
 80012e8:	2200      	movs	r2, #0
 80012ea:	2600      	movs	r6, #0
 80012ec:	e71d      	b.n	800112a <__aeabi_fsub+0x96>
 80012ee:	2320      	movs	r3, #32
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	0001      	movs	r1, r0
 80012f4:	4098      	lsls	r0, r3
 80012f6:	0003      	movs	r3, r0
 80012f8:	40d1      	lsrs	r1, r2
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	4193      	sbcs	r3, r2
 80012fe:	430b      	orrs	r3, r1
 8001300:	e729      	b.n	8001156 <__aeabi_fsub+0xc2>
 8001302:	2d00      	cmp	r5, #0
 8001304:	d1a9      	bne.n	800125a <__aeabi_fsub+0x1c6>
 8001306:	4663      	mov	r3, ip
 8001308:	2b00      	cmp	r3, #0
 800130a:	d056      	beq.n	80013ba <__aeabi_fsub+0x326>
 800130c:	2200      	movs	r2, #0
 800130e:	2800      	cmp	r0, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_fsub+0x280>
 8001312:	e70a      	b.n	800112a <__aeabi_fsub+0x96>
 8001314:	0003      	movs	r3, r0
 8001316:	4463      	add	r3, ip
 8001318:	015a      	lsls	r2, r3, #5
 800131a:	d594      	bpl.n	8001246 <__aeabi_fsub+0x1b2>
 800131c:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <__aeabi_fsub+0x338>)
 800131e:	3501      	adds	r5, #1
 8001320:	4013      	ands	r3, r2
 8001322:	e790      	b.n	8001246 <__aeabi_fsub+0x1b2>
 8001324:	4663      	mov	r3, ip
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0af      	beq.n	800128a <__aeabi_fsub+0x1f6>
 800132a:	1e53      	subs	r3, r2, #1
 800132c:	2a01      	cmp	r2, #1
 800132e:	d015      	beq.n	800135c <__aeabi_fsub+0x2c8>
 8001330:	2aff      	cmp	r2, #255	; 0xff
 8001332:	d02a      	beq.n	800138a <__aeabi_fsub+0x2f6>
 8001334:	001a      	movs	r2, r3
 8001336:	e752      	b.n	80011de <__aeabi_fsub+0x14a>
 8001338:	4662      	mov	r2, ip
 800133a:	2a00      	cmp	r2, #0
 800133c:	d191      	bne.n	8001262 <__aeabi_fsub+0x1ce>
 800133e:	2800      	cmp	r0, #0
 8001340:	d198      	bne.n	8001274 <__aeabi_fsub+0x1e0>
 8001342:	2680      	movs	r6, #128	; 0x80
 8001344:	2400      	movs	r4, #0
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	03f6      	lsls	r6, r6, #15
 800134a:	e6ee      	b.n	800112a <__aeabi_fsub+0x96>
 800134c:	000c      	movs	r4, r1
 800134e:	4643      	mov	r3, r8
 8001350:	0015      	movs	r5, r2
 8001352:	e77c      	b.n	800124e <__aeabi_fsub+0x1ba>
 8001354:	4663      	mov	r3, ip
 8001356:	000c      	movs	r4, r1
 8001358:	1ac6      	subs	r6, r0, r3
 800135a:	e6c9      	b.n	80010f0 <__aeabi_fsub+0x5c>
 800135c:	0003      	movs	r3, r0
 800135e:	4463      	add	r3, ip
 8001360:	2501      	movs	r5, #1
 8001362:	015a      	lsls	r2, r3, #5
 8001364:	d400      	bmi.n	8001368 <__aeabi_fsub+0x2d4>
 8001366:	e76e      	b.n	8001246 <__aeabi_fsub+0x1b2>
 8001368:	2502      	movs	r5, #2
 800136a:	e6fa      	b.n	8001162 <__aeabi_fsub+0xce>
 800136c:	4663      	mov	r3, ip
 800136e:	2501      	movs	r5, #1
 8001370:	1a1b      	subs	r3, r3, r0
 8001372:	e6b8      	b.n	80010e6 <__aeabi_fsub+0x52>
 8001374:	4664      	mov	r4, ip
 8001376:	2320      	movs	r3, #32
 8001378:	40d4      	lsrs	r4, r2
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	4662      	mov	r2, ip
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	4193      	sbcs	r3, r2
 8001386:	4323      	orrs	r3, r4
 8001388:	e7a2      	b.n	80012d0 <__aeabi_fsub+0x23c>
 800138a:	4643      	mov	r3, r8
 800138c:	e774      	b.n	8001278 <__aeabi_fsub+0x1e4>
 800138e:	4661      	mov	r1, ip
 8001390:	2320      	movs	r3, #32
 8001392:	40d1      	lsrs	r1, r2
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	4662      	mov	r2, ip
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	4193      	sbcs	r3, r2
 80013a0:	430b      	orrs	r3, r1
 80013a2:	e720      	b.n	80011e6 <__aeabi_fsub+0x152>
 80013a4:	4663      	mov	r3, ip
 80013a6:	000c      	movs	r4, r1
 80013a8:	2501      	movs	r5, #1
 80013aa:	1ac3      	subs	r3, r0, r3
 80013ac:	e69b      	b.n	80010e6 <__aeabi_fsub+0x52>
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d099      	beq.n	80012e6 <__aeabi_fsub+0x252>
 80013b2:	000c      	movs	r4, r1
 80013b4:	4646      	mov	r6, r8
 80013b6:	2200      	movs	r2, #0
 80013b8:	e6b7      	b.n	800112a <__aeabi_fsub+0x96>
 80013ba:	4646      	mov	r6, r8
 80013bc:	2200      	movs	r2, #0
 80013be:	e6b4      	b.n	800112a <__aeabi_fsub+0x96>
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d000      	beq.n	80013c6 <__aeabi_fsub+0x332>
 80013c4:	e73f      	b.n	8001246 <__aeabi_fsub+0x1b2>
 80013c6:	2400      	movs	r4, #0
 80013c8:	2600      	movs	r6, #0
 80013ca:	e6ae      	b.n	800112a <__aeabi_fsub+0x96>
 80013cc:	fbffffff 	.word	0xfbffffff
 80013d0:	7dffffff 	.word	0x7dffffff

080013d4 <__aeabi_f2iz>:
 80013d4:	0241      	lsls	r1, r0, #9
 80013d6:	0042      	lsls	r2, r0, #1
 80013d8:	0fc3      	lsrs	r3, r0, #31
 80013da:	0a49      	lsrs	r1, r1, #9
 80013dc:	2000      	movs	r0, #0
 80013de:	0e12      	lsrs	r2, r2, #24
 80013e0:	2a7e      	cmp	r2, #126	; 0x7e
 80013e2:	dd03      	ble.n	80013ec <__aeabi_f2iz+0x18>
 80013e4:	2a9d      	cmp	r2, #157	; 0x9d
 80013e6:	dd02      	ble.n	80013ee <__aeabi_f2iz+0x1a>
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <__aeabi_f2iz+0x3c>)
 80013ea:	1898      	adds	r0, r3, r2
 80013ec:	4770      	bx	lr
 80013ee:	2080      	movs	r0, #128	; 0x80
 80013f0:	0400      	lsls	r0, r0, #16
 80013f2:	4301      	orrs	r1, r0
 80013f4:	2a95      	cmp	r2, #149	; 0x95
 80013f6:	dc07      	bgt.n	8001408 <__aeabi_f2iz+0x34>
 80013f8:	2096      	movs	r0, #150	; 0x96
 80013fa:	1a82      	subs	r2, r0, r2
 80013fc:	40d1      	lsrs	r1, r2
 80013fe:	4248      	negs	r0, r1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f3      	bne.n	80013ec <__aeabi_f2iz+0x18>
 8001404:	0008      	movs	r0, r1
 8001406:	e7f1      	b.n	80013ec <__aeabi_f2iz+0x18>
 8001408:	3a96      	subs	r2, #150	; 0x96
 800140a:	4091      	lsls	r1, r2
 800140c:	e7f7      	b.n	80013fe <__aeabi_f2iz+0x2a>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	7fffffff 	.word	0x7fffffff

08001414 <__aeabi_i2f>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	2800      	cmp	r0, #0
 8001418:	d013      	beq.n	8001442 <__aeabi_i2f+0x2e>
 800141a:	17c3      	asrs	r3, r0, #31
 800141c:	18c5      	adds	r5, r0, r3
 800141e:	405d      	eors	r5, r3
 8001420:	0fc4      	lsrs	r4, r0, #31
 8001422:	0028      	movs	r0, r5
 8001424:	f001 feba 	bl	800319c <__clzsi2>
 8001428:	239e      	movs	r3, #158	; 0x9e
 800142a:	0001      	movs	r1, r0
 800142c:	1a1b      	subs	r3, r3, r0
 800142e:	2b96      	cmp	r3, #150	; 0x96
 8001430:	dc0f      	bgt.n	8001452 <__aeabi_i2f+0x3e>
 8001432:	2808      	cmp	r0, #8
 8001434:	d031      	beq.n	800149a <__aeabi_i2f+0x86>
 8001436:	3908      	subs	r1, #8
 8001438:	408d      	lsls	r5, r1
 800143a:	026d      	lsls	r5, r5, #9
 800143c:	0a6d      	lsrs	r5, r5, #9
 800143e:	b2d8      	uxtb	r0, r3
 8001440:	e002      	b.n	8001448 <__aeabi_i2f+0x34>
 8001442:	2400      	movs	r4, #0
 8001444:	2000      	movs	r0, #0
 8001446:	2500      	movs	r5, #0
 8001448:	05c0      	lsls	r0, r0, #23
 800144a:	4328      	orrs	r0, r5
 800144c:	07e4      	lsls	r4, r4, #31
 800144e:	4320      	orrs	r0, r4
 8001450:	bd70      	pop	{r4, r5, r6, pc}
 8001452:	2b99      	cmp	r3, #153	; 0x99
 8001454:	dd0c      	ble.n	8001470 <__aeabi_i2f+0x5c>
 8001456:	2205      	movs	r2, #5
 8001458:	1a12      	subs	r2, r2, r0
 800145a:	0028      	movs	r0, r5
 800145c:	40d0      	lsrs	r0, r2
 800145e:	0002      	movs	r2, r0
 8001460:	0008      	movs	r0, r1
 8001462:	301b      	adds	r0, #27
 8001464:	4085      	lsls	r5, r0
 8001466:	0028      	movs	r0, r5
 8001468:	1e45      	subs	r5, r0, #1
 800146a:	41a8      	sbcs	r0, r5
 800146c:	4302      	orrs	r2, r0
 800146e:	0015      	movs	r5, r2
 8001470:	2905      	cmp	r1, #5
 8001472:	dc16      	bgt.n	80014a2 <__aeabi_i2f+0x8e>
 8001474:	002a      	movs	r2, r5
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <__aeabi_i2f+0xa0>)
 8001478:	4002      	ands	r2, r0
 800147a:	076e      	lsls	r6, r5, #29
 800147c:	d009      	beq.n	8001492 <__aeabi_i2f+0x7e>
 800147e:	260f      	movs	r6, #15
 8001480:	4035      	ands	r5, r6
 8001482:	2d04      	cmp	r5, #4
 8001484:	d005      	beq.n	8001492 <__aeabi_i2f+0x7e>
 8001486:	3204      	adds	r2, #4
 8001488:	0155      	lsls	r5, r2, #5
 800148a:	d502      	bpl.n	8001492 <__aeabi_i2f+0x7e>
 800148c:	239f      	movs	r3, #159	; 0x9f
 800148e:	4002      	ands	r2, r0
 8001490:	1a5b      	subs	r3, r3, r1
 8001492:	0192      	lsls	r2, r2, #6
 8001494:	0a55      	lsrs	r5, r2, #9
 8001496:	b2d8      	uxtb	r0, r3
 8001498:	e7d6      	b.n	8001448 <__aeabi_i2f+0x34>
 800149a:	026d      	lsls	r5, r5, #9
 800149c:	2096      	movs	r0, #150	; 0x96
 800149e:	0a6d      	lsrs	r5, r5, #9
 80014a0:	e7d2      	b.n	8001448 <__aeabi_i2f+0x34>
 80014a2:	1f4a      	subs	r2, r1, #5
 80014a4:	4095      	lsls	r5, r2
 80014a6:	002a      	movs	r2, r5
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <__aeabi_i2f+0xa0>)
 80014aa:	4002      	ands	r2, r0
 80014ac:	076e      	lsls	r6, r5, #29
 80014ae:	d0f0      	beq.n	8001492 <__aeabi_i2f+0x7e>
 80014b0:	e7e5      	b.n	800147e <__aeabi_i2f+0x6a>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	fbffffff 	.word	0xfbffffff

080014b8 <__aeabi_ui2f>:
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	1e04      	subs	r4, r0, #0
 80014bc:	d00e      	beq.n	80014dc <__aeabi_ui2f+0x24>
 80014be:	f001 fe6d 	bl	800319c <__clzsi2>
 80014c2:	239e      	movs	r3, #158	; 0x9e
 80014c4:	0001      	movs	r1, r0
 80014c6:	1a1b      	subs	r3, r3, r0
 80014c8:	2b96      	cmp	r3, #150	; 0x96
 80014ca:	dc0c      	bgt.n	80014e6 <__aeabi_ui2f+0x2e>
 80014cc:	2808      	cmp	r0, #8
 80014ce:	d02c      	beq.n	800152a <__aeabi_ui2f+0x72>
 80014d0:	3908      	subs	r1, #8
 80014d2:	408c      	lsls	r4, r1
 80014d4:	0264      	lsls	r4, r4, #9
 80014d6:	0a64      	lsrs	r4, r4, #9
 80014d8:	b2d8      	uxtb	r0, r3
 80014da:	e001      	b.n	80014e0 <__aeabi_ui2f+0x28>
 80014dc:	2000      	movs	r0, #0
 80014de:	2400      	movs	r4, #0
 80014e0:	05c0      	lsls	r0, r0, #23
 80014e2:	4320      	orrs	r0, r4
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
 80014e6:	2b99      	cmp	r3, #153	; 0x99
 80014e8:	dd0a      	ble.n	8001500 <__aeabi_ui2f+0x48>
 80014ea:	0002      	movs	r2, r0
 80014ec:	0020      	movs	r0, r4
 80014ee:	321b      	adds	r2, #27
 80014f0:	4090      	lsls	r0, r2
 80014f2:	0002      	movs	r2, r0
 80014f4:	1e50      	subs	r0, r2, #1
 80014f6:	4182      	sbcs	r2, r0
 80014f8:	2005      	movs	r0, #5
 80014fa:	1a40      	subs	r0, r0, r1
 80014fc:	40c4      	lsrs	r4, r0
 80014fe:	4314      	orrs	r4, r2
 8001500:	2905      	cmp	r1, #5
 8001502:	dc16      	bgt.n	8001532 <__aeabi_ui2f+0x7a>
 8001504:	0022      	movs	r2, r4
 8001506:	480f      	ldr	r0, [pc, #60]	; (8001544 <__aeabi_ui2f+0x8c>)
 8001508:	4002      	ands	r2, r0
 800150a:	0765      	lsls	r5, r4, #29
 800150c:	d009      	beq.n	8001522 <__aeabi_ui2f+0x6a>
 800150e:	250f      	movs	r5, #15
 8001510:	402c      	ands	r4, r5
 8001512:	2c04      	cmp	r4, #4
 8001514:	d005      	beq.n	8001522 <__aeabi_ui2f+0x6a>
 8001516:	3204      	adds	r2, #4
 8001518:	0154      	lsls	r4, r2, #5
 800151a:	d502      	bpl.n	8001522 <__aeabi_ui2f+0x6a>
 800151c:	239f      	movs	r3, #159	; 0x9f
 800151e:	4002      	ands	r2, r0
 8001520:	1a5b      	subs	r3, r3, r1
 8001522:	0192      	lsls	r2, r2, #6
 8001524:	0a54      	lsrs	r4, r2, #9
 8001526:	b2d8      	uxtb	r0, r3
 8001528:	e7da      	b.n	80014e0 <__aeabi_ui2f+0x28>
 800152a:	0264      	lsls	r4, r4, #9
 800152c:	2096      	movs	r0, #150	; 0x96
 800152e:	0a64      	lsrs	r4, r4, #9
 8001530:	e7d6      	b.n	80014e0 <__aeabi_ui2f+0x28>
 8001532:	1f4a      	subs	r2, r1, #5
 8001534:	4094      	lsls	r4, r2
 8001536:	0022      	movs	r2, r4
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <__aeabi_ui2f+0x8c>)
 800153a:	4002      	ands	r2, r0
 800153c:	0765      	lsls	r5, r4, #29
 800153e:	d0f0      	beq.n	8001522 <__aeabi_ui2f+0x6a>
 8001540:	e7e5      	b.n	800150e <__aeabi_ui2f+0x56>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	fbffffff 	.word	0xfbffffff

08001548 <__aeabi_dadd>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	464f      	mov	r7, r9
 800154c:	4646      	mov	r6, r8
 800154e:	46d6      	mov	lr, sl
 8001550:	0004      	movs	r4, r0
 8001552:	b5c0      	push	{r6, r7, lr}
 8001554:	001f      	movs	r7, r3
 8001556:	030b      	lsls	r3, r1, #12
 8001558:	0010      	movs	r0, r2
 800155a:	004e      	lsls	r6, r1, #1
 800155c:	0a5b      	lsrs	r3, r3, #9
 800155e:	0fcd      	lsrs	r5, r1, #31
 8001560:	0f61      	lsrs	r1, r4, #29
 8001562:	007a      	lsls	r2, r7, #1
 8001564:	4319      	orrs	r1, r3
 8001566:	00e3      	lsls	r3, r4, #3
 8001568:	033c      	lsls	r4, r7, #12
 800156a:	0fff      	lsrs	r7, r7, #31
 800156c:	46bc      	mov	ip, r7
 800156e:	0a64      	lsrs	r4, r4, #9
 8001570:	0f47      	lsrs	r7, r0, #29
 8001572:	4327      	orrs	r7, r4
 8001574:	0d76      	lsrs	r6, r6, #21
 8001576:	0d52      	lsrs	r2, r2, #21
 8001578:	00c0      	lsls	r0, r0, #3
 800157a:	46b9      	mov	r9, r7
 800157c:	4680      	mov	r8, r0
 800157e:	1ab7      	subs	r7, r6, r2
 8001580:	4565      	cmp	r5, ip
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x3e>
 8001584:	e09b      	b.n	80016be <__aeabi_dadd+0x176>
 8001586:	2f00      	cmp	r7, #0
 8001588:	dc00      	bgt.n	800158c <__aeabi_dadd+0x44>
 800158a:	e084      	b.n	8001696 <__aeabi_dadd+0x14e>
 800158c:	2a00      	cmp	r2, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x4a>
 8001590:	e0be      	b.n	8001710 <__aeabi_dadd+0x1c8>
 8001592:	4ac8      	ldr	r2, [pc, #800]	; (80018b4 <__aeabi_dadd+0x36c>)
 8001594:	4296      	cmp	r6, r2
 8001596:	d100      	bne.n	800159a <__aeabi_dadd+0x52>
 8001598:	e124      	b.n	80017e4 <__aeabi_dadd+0x29c>
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	464c      	mov	r4, r9
 800159e:	0412      	lsls	r2, r2, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	46a1      	mov	r9, r4
 80015a4:	2f38      	cmp	r7, #56	; 0x38
 80015a6:	dd00      	ble.n	80015aa <__aeabi_dadd+0x62>
 80015a8:	e167      	b.n	800187a <__aeabi_dadd+0x332>
 80015aa:	2f1f      	cmp	r7, #31
 80015ac:	dd00      	ble.n	80015b0 <__aeabi_dadd+0x68>
 80015ae:	e1d6      	b.n	800195e <__aeabi_dadd+0x416>
 80015b0:	2220      	movs	r2, #32
 80015b2:	464c      	mov	r4, r9
 80015b4:	1bd2      	subs	r2, r2, r7
 80015b6:	4094      	lsls	r4, r2
 80015b8:	46a2      	mov	sl, r4
 80015ba:	4644      	mov	r4, r8
 80015bc:	40fc      	lsrs	r4, r7
 80015be:	0020      	movs	r0, r4
 80015c0:	4654      	mov	r4, sl
 80015c2:	4304      	orrs	r4, r0
 80015c4:	4640      	mov	r0, r8
 80015c6:	4090      	lsls	r0, r2
 80015c8:	1e42      	subs	r2, r0, #1
 80015ca:	4190      	sbcs	r0, r2
 80015cc:	464a      	mov	r2, r9
 80015ce:	40fa      	lsrs	r2, r7
 80015d0:	4304      	orrs	r4, r0
 80015d2:	1a89      	subs	r1, r1, r2
 80015d4:	1b1c      	subs	r4, r3, r4
 80015d6:	42a3      	cmp	r3, r4
 80015d8:	4192      	sbcs	r2, r2
 80015da:	4252      	negs	r2, r2
 80015dc:	1a8b      	subs	r3, r1, r2
 80015de:	469a      	mov	sl, r3
 80015e0:	4653      	mov	r3, sl
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	d400      	bmi.n	80015e8 <__aeabi_dadd+0xa0>
 80015e6:	e0d4      	b.n	8001792 <__aeabi_dadd+0x24a>
 80015e8:	4653      	mov	r3, sl
 80015ea:	025a      	lsls	r2, r3, #9
 80015ec:	0a53      	lsrs	r3, r2, #9
 80015ee:	469a      	mov	sl, r3
 80015f0:	4653      	mov	r3, sl
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0xb0>
 80015f6:	e104      	b.n	8001802 <__aeabi_dadd+0x2ba>
 80015f8:	4650      	mov	r0, sl
 80015fa:	f001 fdcf 	bl	800319c <__clzsi2>
 80015fe:	0003      	movs	r3, r0
 8001600:	3b08      	subs	r3, #8
 8001602:	2220      	movs	r2, #32
 8001604:	0020      	movs	r0, r4
 8001606:	1ad2      	subs	r2, r2, r3
 8001608:	4651      	mov	r1, sl
 800160a:	40d0      	lsrs	r0, r2
 800160c:	4099      	lsls	r1, r3
 800160e:	0002      	movs	r2, r0
 8001610:	409c      	lsls	r4, r3
 8001612:	430a      	orrs	r2, r1
 8001614:	42b3      	cmp	r3, r6
 8001616:	da00      	bge.n	800161a <__aeabi_dadd+0xd2>
 8001618:	e102      	b.n	8001820 <__aeabi_dadd+0x2d8>
 800161a:	1b9b      	subs	r3, r3, r6
 800161c:	1c59      	adds	r1, r3, #1
 800161e:	291f      	cmp	r1, #31
 8001620:	dd00      	ble.n	8001624 <__aeabi_dadd+0xdc>
 8001622:	e0a7      	b.n	8001774 <__aeabi_dadd+0x22c>
 8001624:	2320      	movs	r3, #32
 8001626:	0010      	movs	r0, r2
 8001628:	0026      	movs	r6, r4
 800162a:	1a5b      	subs	r3, r3, r1
 800162c:	409c      	lsls	r4, r3
 800162e:	4098      	lsls	r0, r3
 8001630:	40ce      	lsrs	r6, r1
 8001632:	40ca      	lsrs	r2, r1
 8001634:	1e63      	subs	r3, r4, #1
 8001636:	419c      	sbcs	r4, r3
 8001638:	4330      	orrs	r0, r6
 800163a:	4692      	mov	sl, r2
 800163c:	2600      	movs	r6, #0
 800163e:	4304      	orrs	r4, r0
 8001640:	0763      	lsls	r3, r4, #29
 8001642:	d009      	beq.n	8001658 <__aeabi_dadd+0x110>
 8001644:	230f      	movs	r3, #15
 8001646:	4023      	ands	r3, r4
 8001648:	2b04      	cmp	r3, #4
 800164a:	d005      	beq.n	8001658 <__aeabi_dadd+0x110>
 800164c:	1d23      	adds	r3, r4, #4
 800164e:	42a3      	cmp	r3, r4
 8001650:	41a4      	sbcs	r4, r4
 8001652:	4264      	negs	r4, r4
 8001654:	44a2      	add	sl, r4
 8001656:	001c      	movs	r4, r3
 8001658:	4653      	mov	r3, sl
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	d400      	bmi.n	8001660 <__aeabi_dadd+0x118>
 800165e:	e09b      	b.n	8001798 <__aeabi_dadd+0x250>
 8001660:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <__aeabi_dadd+0x36c>)
 8001662:	3601      	adds	r6, #1
 8001664:	429e      	cmp	r6, r3
 8001666:	d100      	bne.n	800166a <__aeabi_dadd+0x122>
 8001668:	e0b8      	b.n	80017dc <__aeabi_dadd+0x294>
 800166a:	4653      	mov	r3, sl
 800166c:	4992      	ldr	r1, [pc, #584]	; (80018b8 <__aeabi_dadd+0x370>)
 800166e:	08e4      	lsrs	r4, r4, #3
 8001670:	400b      	ands	r3, r1
 8001672:	0019      	movs	r1, r3
 8001674:	075b      	lsls	r3, r3, #29
 8001676:	4323      	orrs	r3, r4
 8001678:	0572      	lsls	r2, r6, #21
 800167a:	024c      	lsls	r4, r1, #9
 800167c:	0b24      	lsrs	r4, r4, #12
 800167e:	0d52      	lsrs	r2, r2, #21
 8001680:	0512      	lsls	r2, r2, #20
 8001682:	07ed      	lsls	r5, r5, #31
 8001684:	4322      	orrs	r2, r4
 8001686:	432a      	orrs	r2, r5
 8001688:	0018      	movs	r0, r3
 800168a:	0011      	movs	r1, r2
 800168c:	bce0      	pop	{r5, r6, r7}
 800168e:	46ba      	mov	sl, r7
 8001690:	46b1      	mov	r9, r6
 8001692:	46a8      	mov	r8, r5
 8001694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001696:	2f00      	cmp	r7, #0
 8001698:	d048      	beq.n	800172c <__aeabi_dadd+0x1e4>
 800169a:	1b97      	subs	r7, r2, r6
 800169c:	2e00      	cmp	r6, #0
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x15a>
 80016a0:	e10e      	b.n	80018c0 <__aeabi_dadd+0x378>
 80016a2:	000c      	movs	r4, r1
 80016a4:	431c      	orrs	r4, r3
 80016a6:	d100      	bne.n	80016aa <__aeabi_dadd+0x162>
 80016a8:	e1b7      	b.n	8001a1a <__aeabi_dadd+0x4d2>
 80016aa:	1e7c      	subs	r4, r7, #1
 80016ac:	2f01      	cmp	r7, #1
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x16a>
 80016b0:	e226      	b.n	8001b00 <__aeabi_dadd+0x5b8>
 80016b2:	4d80      	ldr	r5, [pc, #512]	; (80018b4 <__aeabi_dadd+0x36c>)
 80016b4:	42af      	cmp	r7, r5
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x172>
 80016b8:	e1d5      	b.n	8001a66 <__aeabi_dadd+0x51e>
 80016ba:	0027      	movs	r7, r4
 80016bc:	e107      	b.n	80018ce <__aeabi_dadd+0x386>
 80016be:	2f00      	cmp	r7, #0
 80016c0:	dc00      	bgt.n	80016c4 <__aeabi_dadd+0x17c>
 80016c2:	e0b2      	b.n	800182a <__aeabi_dadd+0x2e2>
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d047      	beq.n	8001758 <__aeabi_dadd+0x210>
 80016c8:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <__aeabi_dadd+0x36c>)
 80016ca:	4296      	cmp	r6, r2
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dadd+0x188>
 80016ce:	e089      	b.n	80017e4 <__aeabi_dadd+0x29c>
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	464c      	mov	r4, r9
 80016d4:	0412      	lsls	r2, r2, #16
 80016d6:	4314      	orrs	r4, r2
 80016d8:	46a1      	mov	r9, r4
 80016da:	2f38      	cmp	r7, #56	; 0x38
 80016dc:	dc6b      	bgt.n	80017b6 <__aeabi_dadd+0x26e>
 80016de:	2f1f      	cmp	r7, #31
 80016e0:	dc00      	bgt.n	80016e4 <__aeabi_dadd+0x19c>
 80016e2:	e16e      	b.n	80019c2 <__aeabi_dadd+0x47a>
 80016e4:	003a      	movs	r2, r7
 80016e6:	4648      	mov	r0, r9
 80016e8:	3a20      	subs	r2, #32
 80016ea:	40d0      	lsrs	r0, r2
 80016ec:	4684      	mov	ip, r0
 80016ee:	2f20      	cmp	r7, #32
 80016f0:	d007      	beq.n	8001702 <__aeabi_dadd+0x1ba>
 80016f2:	2240      	movs	r2, #64	; 0x40
 80016f4:	4648      	mov	r0, r9
 80016f6:	1bd2      	subs	r2, r2, r7
 80016f8:	4090      	lsls	r0, r2
 80016fa:	0002      	movs	r2, r0
 80016fc:	4640      	mov	r0, r8
 80016fe:	4310      	orrs	r0, r2
 8001700:	4680      	mov	r8, r0
 8001702:	4640      	mov	r0, r8
 8001704:	1e42      	subs	r2, r0, #1
 8001706:	4190      	sbcs	r0, r2
 8001708:	4662      	mov	r2, ip
 800170a:	0004      	movs	r4, r0
 800170c:	4314      	orrs	r4, r2
 800170e:	e057      	b.n	80017c0 <__aeabi_dadd+0x278>
 8001710:	464a      	mov	r2, r9
 8001712:	4302      	orrs	r2, r0
 8001714:	d100      	bne.n	8001718 <__aeabi_dadd+0x1d0>
 8001716:	e103      	b.n	8001920 <__aeabi_dadd+0x3d8>
 8001718:	1e7a      	subs	r2, r7, #1
 800171a:	2f01      	cmp	r7, #1
 800171c:	d100      	bne.n	8001720 <__aeabi_dadd+0x1d8>
 800171e:	e193      	b.n	8001a48 <__aeabi_dadd+0x500>
 8001720:	4c64      	ldr	r4, [pc, #400]	; (80018b4 <__aeabi_dadd+0x36c>)
 8001722:	42a7      	cmp	r7, r4
 8001724:	d100      	bne.n	8001728 <__aeabi_dadd+0x1e0>
 8001726:	e18a      	b.n	8001a3e <__aeabi_dadd+0x4f6>
 8001728:	0017      	movs	r7, r2
 800172a:	e73b      	b.n	80015a4 <__aeabi_dadd+0x5c>
 800172c:	4c63      	ldr	r4, [pc, #396]	; (80018bc <__aeabi_dadd+0x374>)
 800172e:	1c72      	adds	r2, r6, #1
 8001730:	4222      	tst	r2, r4
 8001732:	d000      	beq.n	8001736 <__aeabi_dadd+0x1ee>
 8001734:	e0e0      	b.n	80018f8 <__aeabi_dadd+0x3b0>
 8001736:	000a      	movs	r2, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	2e00      	cmp	r6, #0
 800173c:	d000      	beq.n	8001740 <__aeabi_dadd+0x1f8>
 800173e:	e174      	b.n	8001a2a <__aeabi_dadd+0x4e2>
 8001740:	2a00      	cmp	r2, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x1fe>
 8001744:	e1d0      	b.n	8001ae8 <__aeabi_dadd+0x5a0>
 8001746:	464a      	mov	r2, r9
 8001748:	4302      	orrs	r2, r0
 800174a:	d000      	beq.n	800174e <__aeabi_dadd+0x206>
 800174c:	e1e3      	b.n	8001b16 <__aeabi_dadd+0x5ce>
 800174e:	074a      	lsls	r2, r1, #29
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	4313      	orrs	r3, r2
 8001754:	08c9      	lsrs	r1, r1, #3
 8001756:	e029      	b.n	80017ac <__aeabi_dadd+0x264>
 8001758:	464a      	mov	r2, r9
 800175a:	4302      	orrs	r2, r0
 800175c:	d100      	bne.n	8001760 <__aeabi_dadd+0x218>
 800175e:	e17d      	b.n	8001a5c <__aeabi_dadd+0x514>
 8001760:	1e7a      	subs	r2, r7, #1
 8001762:	2f01      	cmp	r7, #1
 8001764:	d100      	bne.n	8001768 <__aeabi_dadd+0x220>
 8001766:	e0e0      	b.n	800192a <__aeabi_dadd+0x3e2>
 8001768:	4c52      	ldr	r4, [pc, #328]	; (80018b4 <__aeabi_dadd+0x36c>)
 800176a:	42a7      	cmp	r7, r4
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x228>
 800176e:	e166      	b.n	8001a3e <__aeabi_dadd+0x4f6>
 8001770:	0017      	movs	r7, r2
 8001772:	e7b2      	b.n	80016da <__aeabi_dadd+0x192>
 8001774:	0010      	movs	r0, r2
 8001776:	3b1f      	subs	r3, #31
 8001778:	40d8      	lsrs	r0, r3
 800177a:	2920      	cmp	r1, #32
 800177c:	d003      	beq.n	8001786 <__aeabi_dadd+0x23e>
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	1a5b      	subs	r3, r3, r1
 8001782:	409a      	lsls	r2, r3
 8001784:	4314      	orrs	r4, r2
 8001786:	1e63      	subs	r3, r4, #1
 8001788:	419c      	sbcs	r4, r3
 800178a:	2300      	movs	r3, #0
 800178c:	2600      	movs	r6, #0
 800178e:	469a      	mov	sl, r3
 8001790:	4304      	orrs	r4, r0
 8001792:	0763      	lsls	r3, r4, #29
 8001794:	d000      	beq.n	8001798 <__aeabi_dadd+0x250>
 8001796:	e755      	b.n	8001644 <__aeabi_dadd+0xfc>
 8001798:	4652      	mov	r2, sl
 800179a:	08e3      	lsrs	r3, r4, #3
 800179c:	0752      	lsls	r2, r2, #29
 800179e:	4313      	orrs	r3, r2
 80017a0:	4652      	mov	r2, sl
 80017a2:	0037      	movs	r7, r6
 80017a4:	08d1      	lsrs	r1, r2, #3
 80017a6:	4a43      	ldr	r2, [pc, #268]	; (80018b4 <__aeabi_dadd+0x36c>)
 80017a8:	4297      	cmp	r7, r2
 80017aa:	d01f      	beq.n	80017ec <__aeabi_dadd+0x2a4>
 80017ac:	0309      	lsls	r1, r1, #12
 80017ae:	057a      	lsls	r2, r7, #21
 80017b0:	0b0c      	lsrs	r4, r1, #12
 80017b2:	0d52      	lsrs	r2, r2, #21
 80017b4:	e764      	b.n	8001680 <__aeabi_dadd+0x138>
 80017b6:	4642      	mov	r2, r8
 80017b8:	464c      	mov	r4, r9
 80017ba:	4314      	orrs	r4, r2
 80017bc:	1e62      	subs	r2, r4, #1
 80017be:	4194      	sbcs	r4, r2
 80017c0:	18e4      	adds	r4, r4, r3
 80017c2:	429c      	cmp	r4, r3
 80017c4:	4192      	sbcs	r2, r2
 80017c6:	4252      	negs	r2, r2
 80017c8:	4692      	mov	sl, r2
 80017ca:	448a      	add	sl, r1
 80017cc:	4653      	mov	r3, sl
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	d5df      	bpl.n	8001792 <__aeabi_dadd+0x24a>
 80017d2:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <__aeabi_dadd+0x36c>)
 80017d4:	3601      	adds	r6, #1
 80017d6:	429e      	cmp	r6, r3
 80017d8:	d000      	beq.n	80017dc <__aeabi_dadd+0x294>
 80017da:	e0b3      	b.n	8001944 <__aeabi_dadd+0x3fc>
 80017dc:	0032      	movs	r2, r6
 80017de:	2400      	movs	r4, #0
 80017e0:	2300      	movs	r3, #0
 80017e2:	e74d      	b.n	8001680 <__aeabi_dadd+0x138>
 80017e4:	074a      	lsls	r2, r1, #29
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	08c9      	lsrs	r1, r1, #3
 80017ec:	001a      	movs	r2, r3
 80017ee:	430a      	orrs	r2, r1
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dadd+0x2ac>
 80017f2:	e200      	b.n	8001bf6 <__aeabi_dadd+0x6ae>
 80017f4:	2480      	movs	r4, #128	; 0x80
 80017f6:	0324      	lsls	r4, r4, #12
 80017f8:	430c      	orrs	r4, r1
 80017fa:	0324      	lsls	r4, r4, #12
 80017fc:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <__aeabi_dadd+0x36c>)
 80017fe:	0b24      	lsrs	r4, r4, #12
 8001800:	e73e      	b.n	8001680 <__aeabi_dadd+0x138>
 8001802:	0020      	movs	r0, r4
 8001804:	f001 fcca 	bl	800319c <__clzsi2>
 8001808:	0003      	movs	r3, r0
 800180a:	3318      	adds	r3, #24
 800180c:	2b1f      	cmp	r3, #31
 800180e:	dc00      	bgt.n	8001812 <__aeabi_dadd+0x2ca>
 8001810:	e6f7      	b.n	8001602 <__aeabi_dadd+0xba>
 8001812:	0022      	movs	r2, r4
 8001814:	3808      	subs	r0, #8
 8001816:	4082      	lsls	r2, r0
 8001818:	2400      	movs	r4, #0
 800181a:	42b3      	cmp	r3, r6
 800181c:	db00      	blt.n	8001820 <__aeabi_dadd+0x2d8>
 800181e:	e6fc      	b.n	800161a <__aeabi_dadd+0xd2>
 8001820:	1af6      	subs	r6, r6, r3
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <__aeabi_dadd+0x370>)
 8001824:	401a      	ands	r2, r3
 8001826:	4692      	mov	sl, r2
 8001828:	e70a      	b.n	8001640 <__aeabi_dadd+0xf8>
 800182a:	2f00      	cmp	r7, #0
 800182c:	d02b      	beq.n	8001886 <__aeabi_dadd+0x33e>
 800182e:	1b97      	subs	r7, r2, r6
 8001830:	2e00      	cmp	r6, #0
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x2ee>
 8001834:	e0b8      	b.n	80019a8 <__aeabi_dadd+0x460>
 8001836:	4c1f      	ldr	r4, [pc, #124]	; (80018b4 <__aeabi_dadd+0x36c>)
 8001838:	42a2      	cmp	r2, r4
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x2f6>
 800183c:	e11c      	b.n	8001a78 <__aeabi_dadd+0x530>
 800183e:	2480      	movs	r4, #128	; 0x80
 8001840:	0424      	lsls	r4, r4, #16
 8001842:	4321      	orrs	r1, r4
 8001844:	2f38      	cmp	r7, #56	; 0x38
 8001846:	dd00      	ble.n	800184a <__aeabi_dadd+0x302>
 8001848:	e11e      	b.n	8001a88 <__aeabi_dadd+0x540>
 800184a:	2f1f      	cmp	r7, #31
 800184c:	dd00      	ble.n	8001850 <__aeabi_dadd+0x308>
 800184e:	e19e      	b.n	8001b8e <__aeabi_dadd+0x646>
 8001850:	2620      	movs	r6, #32
 8001852:	000c      	movs	r4, r1
 8001854:	1bf6      	subs	r6, r6, r7
 8001856:	0018      	movs	r0, r3
 8001858:	40b3      	lsls	r3, r6
 800185a:	40b4      	lsls	r4, r6
 800185c:	40f8      	lsrs	r0, r7
 800185e:	1e5e      	subs	r6, r3, #1
 8001860:	41b3      	sbcs	r3, r6
 8001862:	40f9      	lsrs	r1, r7
 8001864:	4304      	orrs	r4, r0
 8001866:	431c      	orrs	r4, r3
 8001868:	4489      	add	r9, r1
 800186a:	4444      	add	r4, r8
 800186c:	4544      	cmp	r4, r8
 800186e:	419b      	sbcs	r3, r3
 8001870:	425b      	negs	r3, r3
 8001872:	444b      	add	r3, r9
 8001874:	469a      	mov	sl, r3
 8001876:	0016      	movs	r6, r2
 8001878:	e7a8      	b.n	80017cc <__aeabi_dadd+0x284>
 800187a:	4642      	mov	r2, r8
 800187c:	464c      	mov	r4, r9
 800187e:	4314      	orrs	r4, r2
 8001880:	1e62      	subs	r2, r4, #1
 8001882:	4194      	sbcs	r4, r2
 8001884:	e6a6      	b.n	80015d4 <__aeabi_dadd+0x8c>
 8001886:	4c0d      	ldr	r4, [pc, #52]	; (80018bc <__aeabi_dadd+0x374>)
 8001888:	1c72      	adds	r2, r6, #1
 800188a:	4222      	tst	r2, r4
 800188c:	d000      	beq.n	8001890 <__aeabi_dadd+0x348>
 800188e:	e0a8      	b.n	80019e2 <__aeabi_dadd+0x49a>
 8001890:	000a      	movs	r2, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	2e00      	cmp	r6, #0
 8001896:	d000      	beq.n	800189a <__aeabi_dadd+0x352>
 8001898:	e10a      	b.n	8001ab0 <__aeabi_dadd+0x568>
 800189a:	2a00      	cmp	r2, #0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dadd+0x358>
 800189e:	e15e      	b.n	8001b5e <__aeabi_dadd+0x616>
 80018a0:	464a      	mov	r2, r9
 80018a2:	4302      	orrs	r2, r0
 80018a4:	d000      	beq.n	80018a8 <__aeabi_dadd+0x360>
 80018a6:	e161      	b.n	8001b6c <__aeabi_dadd+0x624>
 80018a8:	074a      	lsls	r2, r1, #29
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	08c9      	lsrs	r1, r1, #3
 80018b0:	e77c      	b.n	80017ac <__aeabi_dadd+0x264>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	000007ff 	.word	0x000007ff
 80018b8:	ff7fffff 	.word	0xff7fffff
 80018bc:	000007fe 	.word	0x000007fe
 80018c0:	4ccf      	ldr	r4, [pc, #828]	; (8001c00 <__aeabi_dadd+0x6b8>)
 80018c2:	42a2      	cmp	r2, r4
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dadd+0x380>
 80018c6:	e0ce      	b.n	8001a66 <__aeabi_dadd+0x51e>
 80018c8:	2480      	movs	r4, #128	; 0x80
 80018ca:	0424      	lsls	r4, r4, #16
 80018cc:	4321      	orrs	r1, r4
 80018ce:	2f38      	cmp	r7, #56	; 0x38
 80018d0:	dc5b      	bgt.n	800198a <__aeabi_dadd+0x442>
 80018d2:	2f1f      	cmp	r7, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dadd+0x390>
 80018d6:	e0dc      	b.n	8001a92 <__aeabi_dadd+0x54a>
 80018d8:	2520      	movs	r5, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1bed      	subs	r5, r5, r7
 80018de:	001e      	movs	r6, r3
 80018e0:	40ab      	lsls	r3, r5
 80018e2:	40ac      	lsls	r4, r5
 80018e4:	40fe      	lsrs	r6, r7
 80018e6:	1e5d      	subs	r5, r3, #1
 80018e8:	41ab      	sbcs	r3, r5
 80018ea:	4334      	orrs	r4, r6
 80018ec:	40f9      	lsrs	r1, r7
 80018ee:	431c      	orrs	r4, r3
 80018f0:	464b      	mov	r3, r9
 80018f2:	1a5b      	subs	r3, r3, r1
 80018f4:	4699      	mov	r9, r3
 80018f6:	e04c      	b.n	8001992 <__aeabi_dadd+0x44a>
 80018f8:	464a      	mov	r2, r9
 80018fa:	1a1c      	subs	r4, r3, r0
 80018fc:	1a88      	subs	r0, r1, r2
 80018fe:	42a3      	cmp	r3, r4
 8001900:	4192      	sbcs	r2, r2
 8001902:	4252      	negs	r2, r2
 8001904:	4692      	mov	sl, r2
 8001906:	0002      	movs	r2, r0
 8001908:	4650      	mov	r0, sl
 800190a:	1a12      	subs	r2, r2, r0
 800190c:	4692      	mov	sl, r2
 800190e:	0212      	lsls	r2, r2, #8
 8001910:	d478      	bmi.n	8001a04 <__aeabi_dadd+0x4bc>
 8001912:	4653      	mov	r3, sl
 8001914:	4323      	orrs	r3, r4
 8001916:	d000      	beq.n	800191a <__aeabi_dadd+0x3d2>
 8001918:	e66a      	b.n	80015f0 <__aeabi_dadd+0xa8>
 800191a:	2100      	movs	r1, #0
 800191c:	2500      	movs	r5, #0
 800191e:	e745      	b.n	80017ac <__aeabi_dadd+0x264>
 8001920:	074a      	lsls	r2, r1, #29
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	4313      	orrs	r3, r2
 8001926:	08c9      	lsrs	r1, r1, #3
 8001928:	e73d      	b.n	80017a6 <__aeabi_dadd+0x25e>
 800192a:	181c      	adds	r4, r3, r0
 800192c:	429c      	cmp	r4, r3
 800192e:	419b      	sbcs	r3, r3
 8001930:	4449      	add	r1, r9
 8001932:	468a      	mov	sl, r1
 8001934:	425b      	negs	r3, r3
 8001936:	449a      	add	sl, r3
 8001938:	4653      	mov	r3, sl
 800193a:	2601      	movs	r6, #1
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	d400      	bmi.n	8001942 <__aeabi_dadd+0x3fa>
 8001940:	e727      	b.n	8001792 <__aeabi_dadd+0x24a>
 8001942:	2602      	movs	r6, #2
 8001944:	4652      	mov	r2, sl
 8001946:	4baf      	ldr	r3, [pc, #700]	; (8001c04 <__aeabi_dadd+0x6bc>)
 8001948:	2101      	movs	r1, #1
 800194a:	401a      	ands	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	4021      	ands	r1, r4
 8001950:	0862      	lsrs	r2, r4, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	07dc      	lsls	r4, r3, #31
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	469a      	mov	sl, r3
 800195a:	4314      	orrs	r4, r2
 800195c:	e670      	b.n	8001640 <__aeabi_dadd+0xf8>
 800195e:	003a      	movs	r2, r7
 8001960:	464c      	mov	r4, r9
 8001962:	3a20      	subs	r2, #32
 8001964:	40d4      	lsrs	r4, r2
 8001966:	46a4      	mov	ip, r4
 8001968:	2f20      	cmp	r7, #32
 800196a:	d007      	beq.n	800197c <__aeabi_dadd+0x434>
 800196c:	2240      	movs	r2, #64	; 0x40
 800196e:	4648      	mov	r0, r9
 8001970:	1bd2      	subs	r2, r2, r7
 8001972:	4090      	lsls	r0, r2
 8001974:	0002      	movs	r2, r0
 8001976:	4640      	mov	r0, r8
 8001978:	4310      	orrs	r0, r2
 800197a:	4680      	mov	r8, r0
 800197c:	4640      	mov	r0, r8
 800197e:	1e42      	subs	r2, r0, #1
 8001980:	4190      	sbcs	r0, r2
 8001982:	4662      	mov	r2, ip
 8001984:	0004      	movs	r4, r0
 8001986:	4314      	orrs	r4, r2
 8001988:	e624      	b.n	80015d4 <__aeabi_dadd+0x8c>
 800198a:	4319      	orrs	r1, r3
 800198c:	000c      	movs	r4, r1
 800198e:	1e63      	subs	r3, r4, #1
 8001990:	419c      	sbcs	r4, r3
 8001992:	4643      	mov	r3, r8
 8001994:	1b1c      	subs	r4, r3, r4
 8001996:	45a0      	cmp	r8, r4
 8001998:	419b      	sbcs	r3, r3
 800199a:	4649      	mov	r1, r9
 800199c:	425b      	negs	r3, r3
 800199e:	1acb      	subs	r3, r1, r3
 80019a0:	469a      	mov	sl, r3
 80019a2:	4665      	mov	r5, ip
 80019a4:	0016      	movs	r6, r2
 80019a6:	e61b      	b.n	80015e0 <__aeabi_dadd+0x98>
 80019a8:	000c      	movs	r4, r1
 80019aa:	431c      	orrs	r4, r3
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dadd+0x468>
 80019ae:	e0c7      	b.n	8001b40 <__aeabi_dadd+0x5f8>
 80019b0:	1e7c      	subs	r4, r7, #1
 80019b2:	2f01      	cmp	r7, #1
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dadd+0x470>
 80019b6:	e0f9      	b.n	8001bac <__aeabi_dadd+0x664>
 80019b8:	4e91      	ldr	r6, [pc, #580]	; (8001c00 <__aeabi_dadd+0x6b8>)
 80019ba:	42b7      	cmp	r7, r6
 80019bc:	d05c      	beq.n	8001a78 <__aeabi_dadd+0x530>
 80019be:	0027      	movs	r7, r4
 80019c0:	e740      	b.n	8001844 <__aeabi_dadd+0x2fc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	464c      	mov	r4, r9
 80019c6:	4640      	mov	r0, r8
 80019c8:	1bd2      	subs	r2, r2, r7
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40f8      	lsrs	r0, r7
 80019ce:	4304      	orrs	r4, r0
 80019d0:	4640      	mov	r0, r8
 80019d2:	4090      	lsls	r0, r2
 80019d4:	1e42      	subs	r2, r0, #1
 80019d6:	4190      	sbcs	r0, r2
 80019d8:	464a      	mov	r2, r9
 80019da:	40fa      	lsrs	r2, r7
 80019dc:	4304      	orrs	r4, r0
 80019de:	1889      	adds	r1, r1, r2
 80019e0:	e6ee      	b.n	80017c0 <__aeabi_dadd+0x278>
 80019e2:	4c87      	ldr	r4, [pc, #540]	; (8001c00 <__aeabi_dadd+0x6b8>)
 80019e4:	42a2      	cmp	r2, r4
 80019e6:	d100      	bne.n	80019ea <__aeabi_dadd+0x4a2>
 80019e8:	e6f9      	b.n	80017de <__aeabi_dadd+0x296>
 80019ea:	1818      	adds	r0, r3, r0
 80019ec:	4298      	cmp	r0, r3
 80019ee:	419b      	sbcs	r3, r3
 80019f0:	4449      	add	r1, r9
 80019f2:	425b      	negs	r3, r3
 80019f4:	18cb      	adds	r3, r1, r3
 80019f6:	07dc      	lsls	r4, r3, #31
 80019f8:	0840      	lsrs	r0, r0, #1
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	469a      	mov	sl, r3
 80019fe:	0016      	movs	r6, r2
 8001a00:	4304      	orrs	r4, r0
 8001a02:	e6c6      	b.n	8001792 <__aeabi_dadd+0x24a>
 8001a04:	4642      	mov	r2, r8
 8001a06:	1ad4      	subs	r4, r2, r3
 8001a08:	45a0      	cmp	r8, r4
 8001a0a:	4180      	sbcs	r0, r0
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	4240      	negs	r0, r0
 8001a10:	1a59      	subs	r1, r3, r1
 8001a12:	1a0b      	subs	r3, r1, r0
 8001a14:	469a      	mov	sl, r3
 8001a16:	4665      	mov	r5, ip
 8001a18:	e5ea      	b.n	80015f0 <__aeabi_dadd+0xa8>
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	464a      	mov	r2, r9
 8001a1e:	08c0      	lsrs	r0, r0, #3
 8001a20:	075b      	lsls	r3, r3, #29
 8001a22:	4665      	mov	r5, ip
 8001a24:	4303      	orrs	r3, r0
 8001a26:	08d1      	lsrs	r1, r2, #3
 8001a28:	e6bd      	b.n	80017a6 <__aeabi_dadd+0x25e>
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dadd+0x4e8>
 8001a2e:	e08e      	b.n	8001b4e <__aeabi_dadd+0x606>
 8001a30:	464b      	mov	r3, r9
 8001a32:	4303      	orrs	r3, r0
 8001a34:	d117      	bne.n	8001a66 <__aeabi_dadd+0x51e>
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	2500      	movs	r5, #0
 8001a3a:	0309      	lsls	r1, r1, #12
 8001a3c:	e6da      	b.n	80017f4 <__aeabi_dadd+0x2ac>
 8001a3e:	074a      	lsls	r2, r1, #29
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	08c9      	lsrs	r1, r1, #3
 8001a46:	e6d1      	b.n	80017ec <__aeabi_dadd+0x2a4>
 8001a48:	1a1c      	subs	r4, r3, r0
 8001a4a:	464a      	mov	r2, r9
 8001a4c:	42a3      	cmp	r3, r4
 8001a4e:	419b      	sbcs	r3, r3
 8001a50:	1a89      	subs	r1, r1, r2
 8001a52:	425b      	negs	r3, r3
 8001a54:	1acb      	subs	r3, r1, r3
 8001a56:	469a      	mov	sl, r3
 8001a58:	2601      	movs	r6, #1
 8001a5a:	e5c1      	b.n	80015e0 <__aeabi_dadd+0x98>
 8001a5c:	074a      	lsls	r2, r1, #29
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	08c9      	lsrs	r1, r1, #3
 8001a64:	e69f      	b.n	80017a6 <__aeabi_dadd+0x25e>
 8001a66:	4643      	mov	r3, r8
 8001a68:	08d8      	lsrs	r0, r3, #3
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	464a      	mov	r2, r9
 8001a6e:	075b      	lsls	r3, r3, #29
 8001a70:	4665      	mov	r5, ip
 8001a72:	4303      	orrs	r3, r0
 8001a74:	08d1      	lsrs	r1, r2, #3
 8001a76:	e6b9      	b.n	80017ec <__aeabi_dadd+0x2a4>
 8001a78:	4643      	mov	r3, r8
 8001a7a:	08d8      	lsrs	r0, r3, #3
 8001a7c:	464b      	mov	r3, r9
 8001a7e:	464a      	mov	r2, r9
 8001a80:	075b      	lsls	r3, r3, #29
 8001a82:	4303      	orrs	r3, r0
 8001a84:	08d1      	lsrs	r1, r2, #3
 8001a86:	e6b1      	b.n	80017ec <__aeabi_dadd+0x2a4>
 8001a88:	4319      	orrs	r1, r3
 8001a8a:	000c      	movs	r4, r1
 8001a8c:	1e63      	subs	r3, r4, #1
 8001a8e:	419c      	sbcs	r4, r3
 8001a90:	e6eb      	b.n	800186a <__aeabi_dadd+0x322>
 8001a92:	003c      	movs	r4, r7
 8001a94:	000d      	movs	r5, r1
 8001a96:	3c20      	subs	r4, #32
 8001a98:	40e5      	lsrs	r5, r4
 8001a9a:	2f20      	cmp	r7, #32
 8001a9c:	d003      	beq.n	8001aa6 <__aeabi_dadd+0x55e>
 8001a9e:	2440      	movs	r4, #64	; 0x40
 8001aa0:	1be4      	subs	r4, r4, r7
 8001aa2:	40a1      	lsls	r1, r4
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	001c      	movs	r4, r3
 8001aa8:	1e63      	subs	r3, r4, #1
 8001aaa:	419c      	sbcs	r4, r3
 8001aac:	432c      	orrs	r4, r5
 8001aae:	e770      	b.n	8001992 <__aeabi_dadd+0x44a>
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d0e1      	beq.n	8001a78 <__aeabi_dadd+0x530>
 8001ab4:	464a      	mov	r2, r9
 8001ab6:	4302      	orrs	r2, r0
 8001ab8:	d0c1      	beq.n	8001a3e <__aeabi_dadd+0x4f6>
 8001aba:	074a      	lsls	r2, r1, #29
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	08c9      	lsrs	r1, r1, #3
 8001ac4:	0312      	lsls	r2, r2, #12
 8001ac6:	4211      	tst	r1, r2
 8001ac8:	d008      	beq.n	8001adc <__aeabi_dadd+0x594>
 8001aca:	4648      	mov	r0, r9
 8001acc:	08c4      	lsrs	r4, r0, #3
 8001ace:	4214      	tst	r4, r2
 8001ad0:	d104      	bne.n	8001adc <__aeabi_dadd+0x594>
 8001ad2:	4643      	mov	r3, r8
 8001ad4:	0021      	movs	r1, r4
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	0742      	lsls	r2, r0, #29
 8001ada:	4313      	orrs	r3, r2
 8001adc:	0f5a      	lsrs	r2, r3, #29
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	0752      	lsls	r2, r2, #29
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	e681      	b.n	80017ec <__aeabi_dadd+0x2a4>
 8001ae8:	464b      	mov	r3, r9
 8001aea:	4303      	orrs	r3, r0
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dadd+0x5a8>
 8001aee:	e714      	b.n	800191a <__aeabi_dadd+0x3d2>
 8001af0:	464b      	mov	r3, r9
 8001af2:	464a      	mov	r2, r9
 8001af4:	08c0      	lsrs	r0, r0, #3
 8001af6:	075b      	lsls	r3, r3, #29
 8001af8:	4665      	mov	r5, ip
 8001afa:	4303      	orrs	r3, r0
 8001afc:	08d1      	lsrs	r1, r2, #3
 8001afe:	e655      	b.n	80017ac <__aeabi_dadd+0x264>
 8001b00:	1ac4      	subs	r4, r0, r3
 8001b02:	45a0      	cmp	r8, r4
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	464b      	mov	r3, r9
 8001b08:	4240      	negs	r0, r0
 8001b0a:	1a59      	subs	r1, r3, r1
 8001b0c:	1a0b      	subs	r3, r1, r0
 8001b0e:	469a      	mov	sl, r3
 8001b10:	4665      	mov	r5, ip
 8001b12:	2601      	movs	r6, #1
 8001b14:	e564      	b.n	80015e0 <__aeabi_dadd+0x98>
 8001b16:	1a1c      	subs	r4, r3, r0
 8001b18:	464a      	mov	r2, r9
 8001b1a:	42a3      	cmp	r3, r4
 8001b1c:	4180      	sbcs	r0, r0
 8001b1e:	1a8a      	subs	r2, r1, r2
 8001b20:	4240      	negs	r0, r0
 8001b22:	1a12      	subs	r2, r2, r0
 8001b24:	4692      	mov	sl, r2
 8001b26:	0212      	lsls	r2, r2, #8
 8001b28:	d549      	bpl.n	8001bbe <__aeabi_dadd+0x676>
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	1ad4      	subs	r4, r2, r3
 8001b2e:	45a0      	cmp	r8, r4
 8001b30:	4180      	sbcs	r0, r0
 8001b32:	464b      	mov	r3, r9
 8001b34:	4240      	negs	r0, r0
 8001b36:	1a59      	subs	r1, r3, r1
 8001b38:	1a0b      	subs	r3, r1, r0
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	4665      	mov	r5, ip
 8001b3e:	e57f      	b.n	8001640 <__aeabi_dadd+0xf8>
 8001b40:	464b      	mov	r3, r9
 8001b42:	464a      	mov	r2, r9
 8001b44:	08c0      	lsrs	r0, r0, #3
 8001b46:	075b      	lsls	r3, r3, #29
 8001b48:	4303      	orrs	r3, r0
 8001b4a:	08d1      	lsrs	r1, r2, #3
 8001b4c:	e62b      	b.n	80017a6 <__aeabi_dadd+0x25e>
 8001b4e:	464a      	mov	r2, r9
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	4302      	orrs	r2, r0
 8001b54:	d138      	bne.n	8001bc8 <__aeabi_dadd+0x680>
 8001b56:	074a      	lsls	r2, r1, #29
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	08c9      	lsrs	r1, r1, #3
 8001b5c:	e646      	b.n	80017ec <__aeabi_dadd+0x2a4>
 8001b5e:	464b      	mov	r3, r9
 8001b60:	464a      	mov	r2, r9
 8001b62:	08c0      	lsrs	r0, r0, #3
 8001b64:	075b      	lsls	r3, r3, #29
 8001b66:	4303      	orrs	r3, r0
 8001b68:	08d1      	lsrs	r1, r2, #3
 8001b6a:	e61f      	b.n	80017ac <__aeabi_dadd+0x264>
 8001b6c:	181c      	adds	r4, r3, r0
 8001b6e:	429c      	cmp	r4, r3
 8001b70:	419b      	sbcs	r3, r3
 8001b72:	4449      	add	r1, r9
 8001b74:	468a      	mov	sl, r1
 8001b76:	425b      	negs	r3, r3
 8001b78:	449a      	add	sl, r3
 8001b7a:	4653      	mov	r3, sl
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d400      	bmi.n	8001b82 <__aeabi_dadd+0x63a>
 8001b80:	e607      	b.n	8001792 <__aeabi_dadd+0x24a>
 8001b82:	4652      	mov	r2, sl
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <__aeabi_dadd+0x6bc>)
 8001b86:	2601      	movs	r6, #1
 8001b88:	401a      	ands	r2, r3
 8001b8a:	4692      	mov	sl, r2
 8001b8c:	e601      	b.n	8001792 <__aeabi_dadd+0x24a>
 8001b8e:	003c      	movs	r4, r7
 8001b90:	000e      	movs	r6, r1
 8001b92:	3c20      	subs	r4, #32
 8001b94:	40e6      	lsrs	r6, r4
 8001b96:	2f20      	cmp	r7, #32
 8001b98:	d003      	beq.n	8001ba2 <__aeabi_dadd+0x65a>
 8001b9a:	2440      	movs	r4, #64	; 0x40
 8001b9c:	1be4      	subs	r4, r4, r7
 8001b9e:	40a1      	lsls	r1, r4
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	001c      	movs	r4, r3
 8001ba4:	1e63      	subs	r3, r4, #1
 8001ba6:	419c      	sbcs	r4, r3
 8001ba8:	4334      	orrs	r4, r6
 8001baa:	e65e      	b.n	800186a <__aeabi_dadd+0x322>
 8001bac:	4443      	add	r3, r8
 8001bae:	4283      	cmp	r3, r0
 8001bb0:	4180      	sbcs	r0, r0
 8001bb2:	4449      	add	r1, r9
 8001bb4:	468a      	mov	sl, r1
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	001c      	movs	r4, r3
 8001bba:	4482      	add	sl, r0
 8001bbc:	e6bc      	b.n	8001938 <__aeabi_dadd+0x3f0>
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	4323      	orrs	r3, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dadd+0x67e>
 8001bc4:	e6a9      	b.n	800191a <__aeabi_dadd+0x3d2>
 8001bc6:	e5e4      	b.n	8001792 <__aeabi_dadd+0x24a>
 8001bc8:	074a      	lsls	r2, r1, #29
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	08c9      	lsrs	r1, r1, #3
 8001bd0:	0312      	lsls	r2, r2, #12
 8001bd2:	4211      	tst	r1, r2
 8001bd4:	d009      	beq.n	8001bea <__aeabi_dadd+0x6a2>
 8001bd6:	4648      	mov	r0, r9
 8001bd8:	08c4      	lsrs	r4, r0, #3
 8001bda:	4214      	tst	r4, r2
 8001bdc:	d105      	bne.n	8001bea <__aeabi_dadd+0x6a2>
 8001bde:	4643      	mov	r3, r8
 8001be0:	4665      	mov	r5, ip
 8001be2:	0021      	movs	r1, r4
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	0742      	lsls	r2, r0, #29
 8001be8:	4313      	orrs	r3, r2
 8001bea:	0f5a      	lsrs	r2, r3, #29
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	08db      	lsrs	r3, r3, #3
 8001bf0:	0752      	lsls	r2, r2, #29
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	e5fa      	b.n	80017ec <__aeabi_dadd+0x2a4>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4a01      	ldr	r2, [pc, #4]	; (8001c00 <__aeabi_dadd+0x6b8>)
 8001bfa:	001c      	movs	r4, r3
 8001bfc:	e540      	b.n	8001680 <__aeabi_dadd+0x138>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	000007ff 	.word	0x000007ff
 8001c04:	ff7fffff 	.word	0xff7fffff

08001c08 <__aeabi_ddiv>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	464e      	mov	r6, r9
 8001c0e:	4645      	mov	r5, r8
 8001c10:	46de      	mov	lr, fp
 8001c12:	b5e0      	push	{r5, r6, r7, lr}
 8001c14:	030c      	lsls	r4, r1, #12
 8001c16:	001f      	movs	r7, r3
 8001c18:	004b      	lsls	r3, r1, #1
 8001c1a:	4681      	mov	r9, r0
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	0005      	movs	r5, r0
 8001c20:	b085      	sub	sp, #20
 8001c22:	0b24      	lsrs	r4, r4, #12
 8001c24:	0d5b      	lsrs	r3, r3, #21
 8001c26:	0fce      	lsrs	r6, r1, #31
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_ddiv+0x26>
 8001c2c:	e152      	b.n	8001ed4 <__aeabi_ddiv+0x2cc>
 8001c2e:	4ad2      	ldr	r2, [pc, #840]	; (8001f78 <__aeabi_ddiv+0x370>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d100      	bne.n	8001c36 <__aeabi_ddiv+0x2e>
 8001c34:	e16e      	b.n	8001f14 <__aeabi_ddiv+0x30c>
 8001c36:	0f42      	lsrs	r2, r0, #29
 8001c38:	00e4      	lsls	r4, r4, #3
 8001c3a:	4314      	orrs	r4, r2
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	0412      	lsls	r2, r2, #16
 8001c40:	4322      	orrs	r2, r4
 8001c42:	4690      	mov	r8, r2
 8001c44:	4acd      	ldr	r2, [pc, #820]	; (8001f7c <__aeabi_ddiv+0x374>)
 8001c46:	00c5      	lsls	r5, r0, #3
 8001c48:	4693      	mov	fp, r2
 8001c4a:	449b      	add	fp, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4699      	mov	r9, r3
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	033c      	lsls	r4, r7, #12
 8001c54:	007b      	lsls	r3, r7, #1
 8001c56:	4650      	mov	r0, sl
 8001c58:	0b24      	lsrs	r4, r4, #12
 8001c5a:	0d5b      	lsrs	r3, r3, #21
 8001c5c:	0fff      	lsrs	r7, r7, #31
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d100      	bne.n	8001c64 <__aeabi_ddiv+0x5c>
 8001c62:	e11a      	b.n	8001e9a <__aeabi_ddiv+0x292>
 8001c64:	4ac4      	ldr	r2, [pc, #784]	; (8001f78 <__aeabi_ddiv+0x370>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x64>
 8001c6a:	e15e      	b.n	8001f2a <__aeabi_ddiv+0x322>
 8001c6c:	0f42      	lsrs	r2, r0, #29
 8001c6e:	00e4      	lsls	r4, r4, #3
 8001c70:	4322      	orrs	r2, r4
 8001c72:	2480      	movs	r4, #128	; 0x80
 8001c74:	0424      	lsls	r4, r4, #16
 8001c76:	4314      	orrs	r4, r2
 8001c78:	4ac0      	ldr	r2, [pc, #768]	; (8001f7c <__aeabi_ddiv+0x374>)
 8001c7a:	00c1      	lsls	r1, r0, #3
 8001c7c:	4694      	mov	ip, r2
 8001c7e:	465a      	mov	r2, fp
 8001c80:	4463      	add	r3, ip
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	469b      	mov	fp, r3
 8001c86:	2000      	movs	r0, #0
 8001c88:	0033      	movs	r3, r6
 8001c8a:	407b      	eors	r3, r7
 8001c8c:	469a      	mov	sl, r3
 8001c8e:	464b      	mov	r3, r9
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d827      	bhi.n	8001ce4 <__aeabi_ddiv+0xdc>
 8001c94:	4aba      	ldr	r2, [pc, #744]	; (8001f80 <__aeabi_ddiv+0x378>)
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	58d3      	ldr	r3, [r2, r3]
 8001c9a:	469f      	mov	pc, r3
 8001c9c:	46b2      	mov	sl, r6
 8001c9e:	9b00      	ldr	r3, [sp, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d016      	beq.n	8001cd2 <__aeabi_ddiv+0xca>
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d100      	bne.n	8001caa <__aeabi_ddiv+0xa2>
 8001ca8:	e287      	b.n	80021ba <__aeabi_ddiv+0x5b2>
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_ddiv+0xa8>
 8001cae:	e0d5      	b.n	8001e5c <__aeabi_ddiv+0x254>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	051b      	lsls	r3, r3, #20
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	4652      	mov	r2, sl
 8001cbc:	07d2      	lsls	r2, r2, #31
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	0028      	movs	r0, r5
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	b005      	add	sp, #20
 8001cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc8:	46bb      	mov	fp, r7
 8001cca:	46b2      	mov	sl, r6
 8001ccc:	46a9      	mov	r9, r5
 8001cce:	46a0      	mov	r8, r4
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2500      	movs	r5, #0
 8001cd6:	4ba8      	ldr	r3, [pc, #672]	; (8001f78 <__aeabi_ddiv+0x370>)
 8001cd8:	e7ed      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001cda:	46ba      	mov	sl, r7
 8001cdc:	46a0      	mov	r8, r4
 8001cde:	000d      	movs	r5, r1
 8001ce0:	9000      	str	r0, [sp, #0]
 8001ce2:	e7dc      	b.n	8001c9e <__aeabi_ddiv+0x96>
 8001ce4:	4544      	cmp	r4, r8
 8001ce6:	d200      	bcs.n	8001cea <__aeabi_ddiv+0xe2>
 8001ce8:	e1c4      	b.n	8002074 <__aeabi_ddiv+0x46c>
 8001cea:	d100      	bne.n	8001cee <__aeabi_ddiv+0xe6>
 8001cec:	e1bf      	b.n	800206e <__aeabi_ddiv+0x466>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	469c      	mov	ip, r3
 8001cf4:	002e      	movs	r6, r5
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	44e3      	add	fp, ip
 8001cfc:	0223      	lsls	r3, r4, #8
 8001cfe:	0e0c      	lsrs	r4, r1, #24
 8001d00:	431c      	orrs	r4, r3
 8001d02:	0c1b      	lsrs	r3, r3, #16
 8001d04:	4699      	mov	r9, r3
 8001d06:	0423      	lsls	r3, r4, #16
 8001d08:	020a      	lsls	r2, r1, #8
 8001d0a:	0c1f      	lsrs	r7, r3, #16
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	9701      	str	r7, [sp, #4]
 8001d12:	f7fe fa7d 	bl	8000210 <__aeabi_uidivmod>
 8001d16:	0002      	movs	r2, r0
 8001d18:	437a      	muls	r2, r7
 8001d1a:	040b      	lsls	r3, r1, #16
 8001d1c:	0c31      	lsrs	r1, r6, #16
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4319      	orrs	r1, r3
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d907      	bls.n	8001d36 <__aeabi_ddiv+0x12e>
 8001d26:	2301      	movs	r3, #1
 8001d28:	425b      	negs	r3, r3
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	1909      	adds	r1, r1, r4
 8001d2e:	44e0      	add	r8, ip
 8001d30:	428c      	cmp	r4, r1
 8001d32:	d800      	bhi.n	8001d36 <__aeabi_ddiv+0x12e>
 8001d34:	e201      	b.n	800213a <__aeabi_ddiv+0x532>
 8001d36:	1a88      	subs	r0, r1, r2
 8001d38:	4649      	mov	r1, r9
 8001d3a:	f7fe fa69 	bl	8000210 <__aeabi_uidivmod>
 8001d3e:	9a01      	ldr	r2, [sp, #4]
 8001d40:	0436      	lsls	r6, r6, #16
 8001d42:	4342      	muls	r2, r0
 8001d44:	0409      	lsls	r1, r1, #16
 8001d46:	0c36      	lsrs	r6, r6, #16
 8001d48:	0003      	movs	r3, r0
 8001d4a:	430e      	orrs	r6, r1
 8001d4c:	42b2      	cmp	r2, r6
 8001d4e:	d904      	bls.n	8001d5a <__aeabi_ddiv+0x152>
 8001d50:	1936      	adds	r6, r6, r4
 8001d52:	3b01      	subs	r3, #1
 8001d54:	42b4      	cmp	r4, r6
 8001d56:	d800      	bhi.n	8001d5a <__aeabi_ddiv+0x152>
 8001d58:	e1e9      	b.n	800212e <__aeabi_ddiv+0x526>
 8001d5a:	1ab0      	subs	r0, r6, r2
 8001d5c:	4642      	mov	r2, r8
 8001d5e:	9e00      	ldr	r6, [sp, #0]
 8001d60:	0412      	lsls	r2, r2, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0c33      	lsrs	r3, r6, #16
 8001d66:	001f      	movs	r7, r3
 8001d68:	0c11      	lsrs	r1, r2, #16
 8001d6a:	4690      	mov	r8, r2
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	0413      	lsls	r3, r2, #16
 8001d70:	0432      	lsls	r2, r6, #16
 8001d72:	0c16      	lsrs	r6, r2, #16
 8001d74:	0032      	movs	r2, r6
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	435a      	muls	r2, r3
 8001d7a:	9603      	str	r6, [sp, #12]
 8001d7c:	437b      	muls	r3, r7
 8001d7e:	434e      	muls	r6, r1
 8001d80:	4379      	muls	r1, r7
 8001d82:	0c17      	lsrs	r7, r2, #16
 8001d84:	46bc      	mov	ip, r7
 8001d86:	199b      	adds	r3, r3, r6
 8001d88:	4463      	add	r3, ip
 8001d8a:	429e      	cmp	r6, r3
 8001d8c:	d903      	bls.n	8001d96 <__aeabi_ddiv+0x18e>
 8001d8e:	2680      	movs	r6, #128	; 0x80
 8001d90:	0276      	lsls	r6, r6, #9
 8001d92:	46b4      	mov	ip, r6
 8001d94:	4461      	add	r1, ip
 8001d96:	0c1e      	lsrs	r6, r3, #16
 8001d98:	1871      	adds	r1, r6, r1
 8001d9a:	0416      	lsls	r6, r2, #16
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	0c36      	lsrs	r6, r6, #16
 8001da0:	199e      	adds	r6, r3, r6
 8001da2:	4288      	cmp	r0, r1
 8001da4:	d302      	bcc.n	8001dac <__aeabi_ddiv+0x1a4>
 8001da6:	d112      	bne.n	8001dce <__aeabi_ddiv+0x1c6>
 8001da8:	42b5      	cmp	r5, r6
 8001daa:	d210      	bcs.n	8001dce <__aeabi_ddiv+0x1c6>
 8001dac:	4643      	mov	r3, r8
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	9b00      	ldr	r3, [sp, #0]
 8001db2:	469c      	mov	ip, r3
 8001db4:	4465      	add	r5, ip
 8001db6:	001f      	movs	r7, r3
 8001db8:	429d      	cmp	r5, r3
 8001dba:	419b      	sbcs	r3, r3
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	191b      	adds	r3, r3, r4
 8001dc0:	18c0      	adds	r0, r0, r3
 8001dc2:	4284      	cmp	r4, r0
 8001dc4:	d200      	bcs.n	8001dc8 <__aeabi_ddiv+0x1c0>
 8001dc6:	e19e      	b.n	8002106 <__aeabi_ddiv+0x4fe>
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_ddiv+0x1c4>
 8001dca:	e199      	b.n	8002100 <__aeabi_ddiv+0x4f8>
 8001dcc:	4690      	mov	r8, r2
 8001dce:	1bae      	subs	r6, r5, r6
 8001dd0:	42b5      	cmp	r5, r6
 8001dd2:	41ad      	sbcs	r5, r5
 8001dd4:	1a40      	subs	r0, r0, r1
 8001dd6:	426d      	negs	r5, r5
 8001dd8:	1b40      	subs	r0, r0, r5
 8001dda:	4284      	cmp	r4, r0
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_ddiv+0x1d8>
 8001dde:	e1d2      	b.n	8002186 <__aeabi_ddiv+0x57e>
 8001de0:	4649      	mov	r1, r9
 8001de2:	f7fe fa15 	bl	8000210 <__aeabi_uidivmod>
 8001de6:	9a01      	ldr	r2, [sp, #4]
 8001de8:	040b      	lsls	r3, r1, #16
 8001dea:	4342      	muls	r2, r0
 8001dec:	0c31      	lsrs	r1, r6, #16
 8001dee:	0005      	movs	r5, r0
 8001df0:	4319      	orrs	r1, r3
 8001df2:	428a      	cmp	r2, r1
 8001df4:	d900      	bls.n	8001df8 <__aeabi_ddiv+0x1f0>
 8001df6:	e16c      	b.n	80020d2 <__aeabi_ddiv+0x4ca>
 8001df8:	1a88      	subs	r0, r1, r2
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	f7fe fa08 	bl	8000210 <__aeabi_uidivmod>
 8001e00:	9a01      	ldr	r2, [sp, #4]
 8001e02:	0436      	lsls	r6, r6, #16
 8001e04:	4342      	muls	r2, r0
 8001e06:	0409      	lsls	r1, r1, #16
 8001e08:	0c36      	lsrs	r6, r6, #16
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	430e      	orrs	r6, r1
 8001e0e:	42b2      	cmp	r2, r6
 8001e10:	d900      	bls.n	8001e14 <__aeabi_ddiv+0x20c>
 8001e12:	e153      	b.n	80020bc <__aeabi_ddiv+0x4b4>
 8001e14:	9803      	ldr	r0, [sp, #12]
 8001e16:	1ab6      	subs	r6, r6, r2
 8001e18:	0002      	movs	r2, r0
 8001e1a:	042d      	lsls	r5, r5, #16
 8001e1c:	431d      	orrs	r5, r3
 8001e1e:	9f02      	ldr	r7, [sp, #8]
 8001e20:	042b      	lsls	r3, r5, #16
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	435a      	muls	r2, r3
 8001e26:	437b      	muls	r3, r7
 8001e28:	469c      	mov	ip, r3
 8001e2a:	0c29      	lsrs	r1, r5, #16
 8001e2c:	4348      	muls	r0, r1
 8001e2e:	0c13      	lsrs	r3, r2, #16
 8001e30:	4484      	add	ip, r0
 8001e32:	4463      	add	r3, ip
 8001e34:	4379      	muls	r1, r7
 8001e36:	4298      	cmp	r0, r3
 8001e38:	d903      	bls.n	8001e42 <__aeabi_ddiv+0x23a>
 8001e3a:	2080      	movs	r0, #128	; 0x80
 8001e3c:	0240      	lsls	r0, r0, #9
 8001e3e:	4684      	mov	ip, r0
 8001e40:	4461      	add	r1, ip
 8001e42:	0c18      	lsrs	r0, r3, #16
 8001e44:	0412      	lsls	r2, r2, #16
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	0c12      	lsrs	r2, r2, #16
 8001e4a:	1840      	adds	r0, r0, r1
 8001e4c:	189b      	adds	r3, r3, r2
 8001e4e:	4286      	cmp	r6, r0
 8001e50:	d200      	bcs.n	8001e54 <__aeabi_ddiv+0x24c>
 8001e52:	e100      	b.n	8002056 <__aeabi_ddiv+0x44e>
 8001e54:	d100      	bne.n	8001e58 <__aeabi_ddiv+0x250>
 8001e56:	e0fb      	b.n	8002050 <__aeabi_ddiv+0x448>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	431d      	orrs	r5, r3
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <__aeabi_ddiv+0x37c>)
 8001e5e:	445b      	add	r3, fp
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	dc00      	bgt.n	8001e66 <__aeabi_ddiv+0x25e>
 8001e64:	e0aa      	b.n	8001fbc <__aeabi_ddiv+0x3b4>
 8001e66:	076a      	lsls	r2, r5, #29
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0x264>
 8001e6a:	e13d      	b.n	80020e8 <__aeabi_ddiv+0x4e0>
 8001e6c:	08e9      	lsrs	r1, r5, #3
 8001e6e:	4642      	mov	r2, r8
 8001e70:	01d2      	lsls	r2, r2, #7
 8001e72:	d506      	bpl.n	8001e82 <__aeabi_ddiv+0x27a>
 8001e74:	4642      	mov	r2, r8
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <__aeabi_ddiv+0x380>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	4690      	mov	r8, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	445b      	add	r3, fp
 8001e82:	4a42      	ldr	r2, [pc, #264]	; (8001f8c <__aeabi_ddiv+0x384>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	dd00      	ble.n	8001e8a <__aeabi_ddiv+0x282>
 8001e88:	e723      	b.n	8001cd2 <__aeabi_ddiv+0xca>
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	055b      	lsls	r3, r3, #21
 8001e8e:	0755      	lsls	r5, r2, #29
 8001e90:	0252      	lsls	r2, r2, #9
 8001e92:	430d      	orrs	r5, r1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	e70d      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001e9a:	4651      	mov	r1, sl
 8001e9c:	4321      	orrs	r1, r4
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_ddiv+0x29a>
 8001ea0:	e07c      	b.n	8001f9c <__aeabi_ddiv+0x394>
 8001ea2:	2c00      	cmp	r4, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_ddiv+0x2a0>
 8001ea6:	e0fb      	b.n	80020a0 <__aeabi_ddiv+0x498>
 8001ea8:	0020      	movs	r0, r4
 8001eaa:	f001 f977 	bl	800319c <__clzsi2>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	3a0b      	subs	r2, #11
 8001eb2:	231d      	movs	r3, #29
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	0001      	movs	r1, r0
 8001eba:	40da      	lsrs	r2, r3
 8001ebc:	4653      	mov	r3, sl
 8001ebe:	3908      	subs	r1, #8
 8001ec0:	408b      	lsls	r3, r1
 8001ec2:	408c      	lsls	r4, r1
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	4314      	orrs	r4, r2
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <__aeabi_ddiv+0x388>)
 8001eca:	4458      	add	r0, fp
 8001ecc:	469b      	mov	fp, r3
 8001ece:	4483      	add	fp, r0
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	e6d9      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	4698      	mov	r8, r3
 8001eda:	d044      	beq.n	8001f66 <__aeabi_ddiv+0x35e>
 8001edc:	2c00      	cmp	r4, #0
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_ddiv+0x2da>
 8001ee0:	e0cf      	b.n	8002082 <__aeabi_ddiv+0x47a>
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	f001 f95a 	bl	800319c <__clzsi2>
 8001ee8:	0001      	movs	r1, r0
 8001eea:	0002      	movs	r2, r0
 8001eec:	390b      	subs	r1, #11
 8001eee:	231d      	movs	r3, #29
 8001ef0:	1a5b      	subs	r3, r3, r1
 8001ef2:	4649      	mov	r1, r9
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	40d9      	lsrs	r1, r3
 8001ef8:	3808      	subs	r0, #8
 8001efa:	4084      	lsls	r4, r0
 8001efc:	000b      	movs	r3, r1
 8001efe:	464d      	mov	r5, r9
 8001f00:	4323      	orrs	r3, r4
 8001f02:	4698      	mov	r8, r3
 8001f04:	4085      	lsls	r5, r0
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <__aeabi_ddiv+0x38c>)
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	469b      	mov	fp, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4699      	mov	r9, r3
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	e69e      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f14:	0002      	movs	r2, r0
 8001f16:	4322      	orrs	r2, r4
 8001f18:	4690      	mov	r8, r2
 8001f1a:	d11d      	bne.n	8001f58 <__aeabi_ddiv+0x350>
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	469b      	mov	fp, r3
 8001f20:	2302      	movs	r3, #2
 8001f22:	2500      	movs	r5, #0
 8001f24:	4691      	mov	r9, r2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	e693      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f2a:	4651      	mov	r1, sl
 8001f2c:	4321      	orrs	r1, r4
 8001f2e:	d109      	bne.n	8001f44 <__aeabi_ddiv+0x33c>
 8001f30:	2302      	movs	r3, #2
 8001f32:	464a      	mov	r2, r9
 8001f34:	431a      	orrs	r2, r3
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <__aeabi_ddiv+0x390>)
 8001f38:	4691      	mov	r9, r2
 8001f3a:	469c      	mov	ip, r3
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	2002      	movs	r0, #2
 8001f40:	44e3      	add	fp, ip
 8001f42:	e6a1      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001f44:	2303      	movs	r3, #3
 8001f46:	464a      	mov	r2, r9
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <__aeabi_ddiv+0x390>)
 8001f4c:	4691      	mov	r9, r2
 8001f4e:	469c      	mov	ip, r3
 8001f50:	4651      	mov	r1, sl
 8001f52:	2003      	movs	r0, #3
 8001f54:	44e3      	add	fp, ip
 8001f56:	e697      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001f58:	220c      	movs	r2, #12
 8001f5a:	469b      	mov	fp, r3
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	46a0      	mov	r8, r4
 8001f60:	4691      	mov	r9, r2
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	e675      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f66:	2304      	movs	r3, #4
 8001f68:	4699      	mov	r9, r3
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	469b      	mov	fp, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	2500      	movs	r5, #0
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	e66d      	b.n	8001c52 <__aeabi_ddiv+0x4a>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	000007ff 	.word	0x000007ff
 8001f7c:	fffffc01 	.word	0xfffffc01
 8001f80:	0800b4a0 	.word	0x0800b4a0
 8001f84:	000003ff 	.word	0x000003ff
 8001f88:	feffffff 	.word	0xfeffffff
 8001f8c:	000007fe 	.word	0x000007fe
 8001f90:	000003f3 	.word	0x000003f3
 8001f94:	fffffc0d 	.word	0xfffffc0d
 8001f98:	fffff801 	.word	0xfffff801
 8001f9c:	464a      	mov	r2, r9
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	4691      	mov	r9, r2
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	e66e      	b.n	8001c88 <__aeabi_ddiv+0x80>
 8001faa:	2300      	movs	r3, #0
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	469a      	mov	sl, r3
 8001fb0:	2500      	movs	r5, #0
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <__aeabi_ddiv+0x5cc>)
 8001fb4:	0312      	lsls	r2, r2, #12
 8001fb6:	e67e      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8001fb8:	2501      	movs	r5, #1
 8001fba:	426d      	negs	r5, r5
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	2a38      	cmp	r2, #56	; 0x38
 8001fc2:	dd00      	ble.n	8001fc6 <__aeabi_ddiv+0x3be>
 8001fc4:	e674      	b.n	8001cb0 <__aeabi_ddiv+0xa8>
 8001fc6:	2a1f      	cmp	r2, #31
 8001fc8:	dc00      	bgt.n	8001fcc <__aeabi_ddiv+0x3c4>
 8001fca:	e0bd      	b.n	8002148 <__aeabi_ddiv+0x540>
 8001fcc:	211f      	movs	r1, #31
 8001fce:	4249      	negs	r1, r1
 8001fd0:	1acb      	subs	r3, r1, r3
 8001fd2:	4641      	mov	r1, r8
 8001fd4:	40d9      	lsrs	r1, r3
 8001fd6:	000b      	movs	r3, r1
 8001fd8:	2a20      	cmp	r2, #32
 8001fda:	d004      	beq.n	8001fe6 <__aeabi_ddiv+0x3de>
 8001fdc:	4641      	mov	r1, r8
 8001fde:	4a7e      	ldr	r2, [pc, #504]	; (80021d8 <__aeabi_ddiv+0x5d0>)
 8001fe0:	445a      	add	r2, fp
 8001fe2:	4091      	lsls	r1, r2
 8001fe4:	430d      	orrs	r5, r1
 8001fe6:	0029      	movs	r1, r5
 8001fe8:	1e4a      	subs	r2, r1, #1
 8001fea:	4191      	sbcs	r1, r2
 8001fec:	4319      	orrs	r1, r3
 8001fee:	2307      	movs	r3, #7
 8001ff0:	001d      	movs	r5, r3
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	400d      	ands	r5, r1
 8001ff6:	420b      	tst	r3, r1
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_ddiv+0x3f4>
 8001ffa:	e0d0      	b.n	800219e <__aeabi_ddiv+0x596>
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	2300      	movs	r3, #0
 8002000:	400a      	ands	r2, r1
 8002002:	2a04      	cmp	r2, #4
 8002004:	d100      	bne.n	8002008 <__aeabi_ddiv+0x400>
 8002006:	e0c7      	b.n	8002198 <__aeabi_ddiv+0x590>
 8002008:	1d0a      	adds	r2, r1, #4
 800200a:	428a      	cmp	r2, r1
 800200c:	4189      	sbcs	r1, r1
 800200e:	4249      	negs	r1, r1
 8002010:	185b      	adds	r3, r3, r1
 8002012:	0011      	movs	r1, r2
 8002014:	021a      	lsls	r2, r3, #8
 8002016:	d400      	bmi.n	800201a <__aeabi_ddiv+0x412>
 8002018:	e0be      	b.n	8002198 <__aeabi_ddiv+0x590>
 800201a:	2301      	movs	r3, #1
 800201c:	2200      	movs	r2, #0
 800201e:	2500      	movs	r5, #0
 8002020:	e649      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	4643      	mov	r3, r8
 8002026:	0312      	lsls	r2, r2, #12
 8002028:	4213      	tst	r3, r2
 800202a:	d008      	beq.n	800203e <__aeabi_ddiv+0x436>
 800202c:	4214      	tst	r4, r2
 800202e:	d106      	bne.n	800203e <__aeabi_ddiv+0x436>
 8002030:	4322      	orrs	r2, r4
 8002032:	0312      	lsls	r2, r2, #12
 8002034:	46ba      	mov	sl, r7
 8002036:	000d      	movs	r5, r1
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <__aeabi_ddiv+0x5cc>)
 800203a:	0b12      	lsrs	r2, r2, #12
 800203c:	e63b      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	4643      	mov	r3, r8
 8002042:	0312      	lsls	r2, r2, #12
 8002044:	431a      	orrs	r2, r3
 8002046:	0312      	lsls	r2, r2, #12
 8002048:	46b2      	mov	sl, r6
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <__aeabi_ddiv+0x5cc>)
 800204c:	0b12      	lsrs	r2, r2, #12
 800204e:	e632      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d100      	bne.n	8002056 <__aeabi_ddiv+0x44e>
 8002054:	e702      	b.n	8001e5c <__aeabi_ddiv+0x254>
 8002056:	19a6      	adds	r6, r4, r6
 8002058:	1e6a      	subs	r2, r5, #1
 800205a:	42a6      	cmp	r6, r4
 800205c:	d200      	bcs.n	8002060 <__aeabi_ddiv+0x458>
 800205e:	e089      	b.n	8002174 <__aeabi_ddiv+0x56c>
 8002060:	4286      	cmp	r6, r0
 8002062:	d200      	bcs.n	8002066 <__aeabi_ddiv+0x45e>
 8002064:	e09f      	b.n	80021a6 <__aeabi_ddiv+0x59e>
 8002066:	d100      	bne.n	800206a <__aeabi_ddiv+0x462>
 8002068:	e0af      	b.n	80021ca <__aeabi_ddiv+0x5c2>
 800206a:	0015      	movs	r5, r2
 800206c:	e6f4      	b.n	8001e58 <__aeabi_ddiv+0x250>
 800206e:	42a9      	cmp	r1, r5
 8002070:	d900      	bls.n	8002074 <__aeabi_ddiv+0x46c>
 8002072:	e63c      	b.n	8001cee <__aeabi_ddiv+0xe6>
 8002074:	4643      	mov	r3, r8
 8002076:	07de      	lsls	r6, r3, #31
 8002078:	0858      	lsrs	r0, r3, #1
 800207a:	086b      	lsrs	r3, r5, #1
 800207c:	431e      	orrs	r6, r3
 800207e:	07ed      	lsls	r5, r5, #31
 8002080:	e63c      	b.n	8001cfc <__aeabi_ddiv+0xf4>
 8002082:	f001 f88b 	bl	800319c <__clzsi2>
 8002086:	0001      	movs	r1, r0
 8002088:	0002      	movs	r2, r0
 800208a:	3115      	adds	r1, #21
 800208c:	3220      	adds	r2, #32
 800208e:	291c      	cmp	r1, #28
 8002090:	dc00      	bgt.n	8002094 <__aeabi_ddiv+0x48c>
 8002092:	e72c      	b.n	8001eee <__aeabi_ddiv+0x2e6>
 8002094:	464b      	mov	r3, r9
 8002096:	3808      	subs	r0, #8
 8002098:	4083      	lsls	r3, r0
 800209a:	2500      	movs	r5, #0
 800209c:	4698      	mov	r8, r3
 800209e:	e732      	b.n	8001f06 <__aeabi_ddiv+0x2fe>
 80020a0:	f001 f87c 	bl	800319c <__clzsi2>
 80020a4:	0003      	movs	r3, r0
 80020a6:	001a      	movs	r2, r3
 80020a8:	3215      	adds	r2, #21
 80020aa:	3020      	adds	r0, #32
 80020ac:	2a1c      	cmp	r2, #28
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_ddiv+0x4aa>
 80020b0:	e6ff      	b.n	8001eb2 <__aeabi_ddiv+0x2aa>
 80020b2:	4654      	mov	r4, sl
 80020b4:	3b08      	subs	r3, #8
 80020b6:	2100      	movs	r1, #0
 80020b8:	409c      	lsls	r4, r3
 80020ba:	e705      	b.n	8001ec8 <__aeabi_ddiv+0x2c0>
 80020bc:	1936      	adds	r6, r6, r4
 80020be:	3b01      	subs	r3, #1
 80020c0:	42b4      	cmp	r4, r6
 80020c2:	d900      	bls.n	80020c6 <__aeabi_ddiv+0x4be>
 80020c4:	e6a6      	b.n	8001e14 <__aeabi_ddiv+0x20c>
 80020c6:	42b2      	cmp	r2, r6
 80020c8:	d800      	bhi.n	80020cc <__aeabi_ddiv+0x4c4>
 80020ca:	e6a3      	b.n	8001e14 <__aeabi_ddiv+0x20c>
 80020cc:	1e83      	subs	r3, r0, #2
 80020ce:	1936      	adds	r6, r6, r4
 80020d0:	e6a0      	b.n	8001e14 <__aeabi_ddiv+0x20c>
 80020d2:	1909      	adds	r1, r1, r4
 80020d4:	3d01      	subs	r5, #1
 80020d6:	428c      	cmp	r4, r1
 80020d8:	d900      	bls.n	80020dc <__aeabi_ddiv+0x4d4>
 80020da:	e68d      	b.n	8001df8 <__aeabi_ddiv+0x1f0>
 80020dc:	428a      	cmp	r2, r1
 80020de:	d800      	bhi.n	80020e2 <__aeabi_ddiv+0x4da>
 80020e0:	e68a      	b.n	8001df8 <__aeabi_ddiv+0x1f0>
 80020e2:	1e85      	subs	r5, r0, #2
 80020e4:	1909      	adds	r1, r1, r4
 80020e6:	e687      	b.n	8001df8 <__aeabi_ddiv+0x1f0>
 80020e8:	220f      	movs	r2, #15
 80020ea:	402a      	ands	r2, r5
 80020ec:	2a04      	cmp	r2, #4
 80020ee:	d100      	bne.n	80020f2 <__aeabi_ddiv+0x4ea>
 80020f0:	e6bc      	b.n	8001e6c <__aeabi_ddiv+0x264>
 80020f2:	1d29      	adds	r1, r5, #4
 80020f4:	42a9      	cmp	r1, r5
 80020f6:	41ad      	sbcs	r5, r5
 80020f8:	426d      	negs	r5, r5
 80020fa:	08c9      	lsrs	r1, r1, #3
 80020fc:	44a8      	add	r8, r5
 80020fe:	e6b6      	b.n	8001e6e <__aeabi_ddiv+0x266>
 8002100:	42af      	cmp	r7, r5
 8002102:	d900      	bls.n	8002106 <__aeabi_ddiv+0x4fe>
 8002104:	e662      	b.n	8001dcc <__aeabi_ddiv+0x1c4>
 8002106:	4281      	cmp	r1, r0
 8002108:	d804      	bhi.n	8002114 <__aeabi_ddiv+0x50c>
 800210a:	d000      	beq.n	800210e <__aeabi_ddiv+0x506>
 800210c:	e65e      	b.n	8001dcc <__aeabi_ddiv+0x1c4>
 800210e:	42ae      	cmp	r6, r5
 8002110:	d800      	bhi.n	8002114 <__aeabi_ddiv+0x50c>
 8002112:	e65b      	b.n	8001dcc <__aeabi_ddiv+0x1c4>
 8002114:	2302      	movs	r3, #2
 8002116:	425b      	negs	r3, r3
 8002118:	469c      	mov	ip, r3
 800211a:	9b00      	ldr	r3, [sp, #0]
 800211c:	44e0      	add	r8, ip
 800211e:	469c      	mov	ip, r3
 8002120:	4465      	add	r5, ip
 8002122:	429d      	cmp	r5, r3
 8002124:	419b      	sbcs	r3, r3
 8002126:	425b      	negs	r3, r3
 8002128:	191b      	adds	r3, r3, r4
 800212a:	18c0      	adds	r0, r0, r3
 800212c:	e64f      	b.n	8001dce <__aeabi_ddiv+0x1c6>
 800212e:	42b2      	cmp	r2, r6
 8002130:	d800      	bhi.n	8002134 <__aeabi_ddiv+0x52c>
 8002132:	e612      	b.n	8001d5a <__aeabi_ddiv+0x152>
 8002134:	1e83      	subs	r3, r0, #2
 8002136:	1936      	adds	r6, r6, r4
 8002138:	e60f      	b.n	8001d5a <__aeabi_ddiv+0x152>
 800213a:	428a      	cmp	r2, r1
 800213c:	d800      	bhi.n	8002140 <__aeabi_ddiv+0x538>
 800213e:	e5fa      	b.n	8001d36 <__aeabi_ddiv+0x12e>
 8002140:	1e83      	subs	r3, r0, #2
 8002142:	4698      	mov	r8, r3
 8002144:	1909      	adds	r1, r1, r4
 8002146:	e5f6      	b.n	8001d36 <__aeabi_ddiv+0x12e>
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <__aeabi_ddiv+0x5d4>)
 800214a:	0028      	movs	r0, r5
 800214c:	445b      	add	r3, fp
 800214e:	4641      	mov	r1, r8
 8002150:	409d      	lsls	r5, r3
 8002152:	4099      	lsls	r1, r3
 8002154:	40d0      	lsrs	r0, r2
 8002156:	1e6b      	subs	r3, r5, #1
 8002158:	419d      	sbcs	r5, r3
 800215a:	4643      	mov	r3, r8
 800215c:	4301      	orrs	r1, r0
 800215e:	4329      	orrs	r1, r5
 8002160:	40d3      	lsrs	r3, r2
 8002162:	074a      	lsls	r2, r1, #29
 8002164:	d100      	bne.n	8002168 <__aeabi_ddiv+0x560>
 8002166:	e755      	b.n	8002014 <__aeabi_ddiv+0x40c>
 8002168:	220f      	movs	r2, #15
 800216a:	400a      	ands	r2, r1
 800216c:	2a04      	cmp	r2, #4
 800216e:	d000      	beq.n	8002172 <__aeabi_ddiv+0x56a>
 8002170:	e74a      	b.n	8002008 <__aeabi_ddiv+0x400>
 8002172:	e74f      	b.n	8002014 <__aeabi_ddiv+0x40c>
 8002174:	0015      	movs	r5, r2
 8002176:	4286      	cmp	r6, r0
 8002178:	d000      	beq.n	800217c <__aeabi_ddiv+0x574>
 800217a:	e66d      	b.n	8001e58 <__aeabi_ddiv+0x250>
 800217c:	9a00      	ldr	r2, [sp, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d000      	beq.n	8002184 <__aeabi_ddiv+0x57c>
 8002182:	e669      	b.n	8001e58 <__aeabi_ddiv+0x250>
 8002184:	e66a      	b.n	8001e5c <__aeabi_ddiv+0x254>
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <__aeabi_ddiv+0x5d8>)
 8002188:	445b      	add	r3, fp
 800218a:	2b00      	cmp	r3, #0
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x588>
 800218e:	e713      	b.n	8001fb8 <__aeabi_ddiv+0x3b0>
 8002190:	2501      	movs	r5, #1
 8002192:	2100      	movs	r1, #0
 8002194:	44a8      	add	r8, r5
 8002196:	e66a      	b.n	8001e6e <__aeabi_ddiv+0x266>
 8002198:	075d      	lsls	r5, r3, #29
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	0b1a      	lsrs	r2, r3, #12
 800219e:	08c9      	lsrs	r1, r1, #3
 80021a0:	2300      	movs	r3, #0
 80021a2:	430d      	orrs	r5, r1
 80021a4:	e587      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 80021a6:	9900      	ldr	r1, [sp, #0]
 80021a8:	3d02      	subs	r5, #2
 80021aa:	004a      	lsls	r2, r1, #1
 80021ac:	428a      	cmp	r2, r1
 80021ae:	41bf      	sbcs	r7, r7
 80021b0:	427f      	negs	r7, r7
 80021b2:	193f      	adds	r7, r7, r4
 80021b4:	19f6      	adds	r6, r6, r7
 80021b6:	9200      	str	r2, [sp, #0]
 80021b8:	e7dd      	b.n	8002176 <__aeabi_ddiv+0x56e>
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	4643      	mov	r3, r8
 80021be:	0312      	lsls	r2, r2, #12
 80021c0:	431a      	orrs	r2, r3
 80021c2:	0312      	lsls	r2, r2, #12
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <__aeabi_ddiv+0x5cc>)
 80021c6:	0b12      	lsrs	r2, r2, #12
 80021c8:	e575      	b.n	8001cb6 <__aeabi_ddiv+0xae>
 80021ca:	9900      	ldr	r1, [sp, #0]
 80021cc:	4299      	cmp	r1, r3
 80021ce:	d3ea      	bcc.n	80021a6 <__aeabi_ddiv+0x59e>
 80021d0:	0015      	movs	r5, r2
 80021d2:	e7d3      	b.n	800217c <__aeabi_ddiv+0x574>
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	0000043e 	.word	0x0000043e
 80021dc:	0000041e 	.word	0x0000041e
 80021e0:	000003ff 	.word	0x000003ff

080021e4 <__eqdf2>:
 80021e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e6:	464e      	mov	r6, r9
 80021e8:	4645      	mov	r5, r8
 80021ea:	46de      	mov	lr, fp
 80021ec:	4657      	mov	r7, sl
 80021ee:	4690      	mov	r8, r2
 80021f0:	b5e0      	push	{r5, r6, r7, lr}
 80021f2:	0017      	movs	r7, r2
 80021f4:	031a      	lsls	r2, r3, #12
 80021f6:	0b12      	lsrs	r2, r2, #12
 80021f8:	0005      	movs	r5, r0
 80021fa:	4684      	mov	ip, r0
 80021fc:	4819      	ldr	r0, [pc, #100]	; (8002264 <__eqdf2+0x80>)
 80021fe:	030e      	lsls	r6, r1, #12
 8002200:	004c      	lsls	r4, r1, #1
 8002202:	4691      	mov	r9, r2
 8002204:	005a      	lsls	r2, r3, #1
 8002206:	0fdb      	lsrs	r3, r3, #31
 8002208:	469b      	mov	fp, r3
 800220a:	0b36      	lsrs	r6, r6, #12
 800220c:	0d64      	lsrs	r4, r4, #21
 800220e:	0fc9      	lsrs	r1, r1, #31
 8002210:	0d52      	lsrs	r2, r2, #21
 8002212:	4284      	cmp	r4, r0
 8002214:	d019      	beq.n	800224a <__eqdf2+0x66>
 8002216:	4282      	cmp	r2, r0
 8002218:	d010      	beq.n	800223c <__eqdf2+0x58>
 800221a:	2001      	movs	r0, #1
 800221c:	4294      	cmp	r4, r2
 800221e:	d10e      	bne.n	800223e <__eqdf2+0x5a>
 8002220:	454e      	cmp	r6, r9
 8002222:	d10c      	bne.n	800223e <__eqdf2+0x5a>
 8002224:	2001      	movs	r0, #1
 8002226:	45c4      	cmp	ip, r8
 8002228:	d109      	bne.n	800223e <__eqdf2+0x5a>
 800222a:	4559      	cmp	r1, fp
 800222c:	d017      	beq.n	800225e <__eqdf2+0x7a>
 800222e:	2c00      	cmp	r4, #0
 8002230:	d105      	bne.n	800223e <__eqdf2+0x5a>
 8002232:	0030      	movs	r0, r6
 8002234:	4328      	orrs	r0, r5
 8002236:	1e43      	subs	r3, r0, #1
 8002238:	4198      	sbcs	r0, r3
 800223a:	e000      	b.n	800223e <__eqdf2+0x5a>
 800223c:	2001      	movs	r0, #1
 800223e:	bcf0      	pop	{r4, r5, r6, r7}
 8002240:	46bb      	mov	fp, r7
 8002242:	46b2      	mov	sl, r6
 8002244:	46a9      	mov	r9, r5
 8002246:	46a0      	mov	r8, r4
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224a:	0033      	movs	r3, r6
 800224c:	2001      	movs	r0, #1
 800224e:	432b      	orrs	r3, r5
 8002250:	d1f5      	bne.n	800223e <__eqdf2+0x5a>
 8002252:	42a2      	cmp	r2, r4
 8002254:	d1f3      	bne.n	800223e <__eqdf2+0x5a>
 8002256:	464b      	mov	r3, r9
 8002258:	433b      	orrs	r3, r7
 800225a:	d1f0      	bne.n	800223e <__eqdf2+0x5a>
 800225c:	e7e2      	b.n	8002224 <__eqdf2+0x40>
 800225e:	2000      	movs	r0, #0
 8002260:	e7ed      	b.n	800223e <__eqdf2+0x5a>
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	000007ff 	.word	0x000007ff

08002268 <__gedf2>:
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	4647      	mov	r7, r8
 800226c:	46ce      	mov	lr, r9
 800226e:	0004      	movs	r4, r0
 8002270:	0018      	movs	r0, r3
 8002272:	0016      	movs	r6, r2
 8002274:	031b      	lsls	r3, r3, #12
 8002276:	0b1b      	lsrs	r3, r3, #12
 8002278:	4d2d      	ldr	r5, [pc, #180]	; (8002330 <__gedf2+0xc8>)
 800227a:	004a      	lsls	r2, r1, #1
 800227c:	4699      	mov	r9, r3
 800227e:	b580      	push	{r7, lr}
 8002280:	0043      	lsls	r3, r0, #1
 8002282:	030f      	lsls	r7, r1, #12
 8002284:	46a4      	mov	ip, r4
 8002286:	46b0      	mov	r8, r6
 8002288:	0b3f      	lsrs	r7, r7, #12
 800228a:	0d52      	lsrs	r2, r2, #21
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	0d5b      	lsrs	r3, r3, #21
 8002290:	0fc0      	lsrs	r0, r0, #31
 8002292:	42aa      	cmp	r2, r5
 8002294:	d021      	beq.n	80022da <__gedf2+0x72>
 8002296:	42ab      	cmp	r3, r5
 8002298:	d013      	beq.n	80022c2 <__gedf2+0x5a>
 800229a:	2a00      	cmp	r2, #0
 800229c:	d122      	bne.n	80022e4 <__gedf2+0x7c>
 800229e:	433c      	orrs	r4, r7
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <__gedf2+0x42>
 80022a4:	464d      	mov	r5, r9
 80022a6:	432e      	orrs	r6, r5
 80022a8:	d022      	beq.n	80022f0 <__gedf2+0x88>
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	d010      	beq.n	80022d0 <__gedf2+0x68>
 80022ae:	4281      	cmp	r1, r0
 80022b0:	d022      	beq.n	80022f8 <__gedf2+0x90>
 80022b2:	2002      	movs	r0, #2
 80022b4:	3901      	subs	r1, #1
 80022b6:	4008      	ands	r0, r1
 80022b8:	3801      	subs	r0, #1
 80022ba:	bcc0      	pop	{r6, r7}
 80022bc:	46b9      	mov	r9, r7
 80022be:	46b0      	mov	r8, r6
 80022c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c2:	464d      	mov	r5, r9
 80022c4:	432e      	orrs	r6, r5
 80022c6:	d129      	bne.n	800231c <__gedf2+0xb4>
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d1f0      	bne.n	80022ae <__gedf2+0x46>
 80022cc:	433c      	orrs	r4, r7
 80022ce:	d1ee      	bne.n	80022ae <__gedf2+0x46>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d1f2      	bne.n	80022ba <__gedf2+0x52>
 80022d4:	2001      	movs	r0, #1
 80022d6:	4240      	negs	r0, r0
 80022d8:	e7ef      	b.n	80022ba <__gedf2+0x52>
 80022da:	003d      	movs	r5, r7
 80022dc:	4325      	orrs	r5, r4
 80022de:	d11d      	bne.n	800231c <__gedf2+0xb4>
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d0ee      	beq.n	80022c2 <__gedf2+0x5a>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e2      	bne.n	80022ae <__gedf2+0x46>
 80022e8:	464c      	mov	r4, r9
 80022ea:	4326      	orrs	r6, r4
 80022ec:	d1df      	bne.n	80022ae <__gedf2+0x46>
 80022ee:	e7e0      	b.n	80022b2 <__gedf2+0x4a>
 80022f0:	2000      	movs	r0, #0
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d0e1      	beq.n	80022ba <__gedf2+0x52>
 80022f6:	e7dc      	b.n	80022b2 <__gedf2+0x4a>
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dc0a      	bgt.n	8002312 <__gedf2+0xaa>
 80022fc:	dbe8      	blt.n	80022d0 <__gedf2+0x68>
 80022fe:	454f      	cmp	r7, r9
 8002300:	d8d7      	bhi.n	80022b2 <__gedf2+0x4a>
 8002302:	d00e      	beq.n	8002322 <__gedf2+0xba>
 8002304:	2000      	movs	r0, #0
 8002306:	454f      	cmp	r7, r9
 8002308:	d2d7      	bcs.n	80022ba <__gedf2+0x52>
 800230a:	2900      	cmp	r1, #0
 800230c:	d0e2      	beq.n	80022d4 <__gedf2+0x6c>
 800230e:	0008      	movs	r0, r1
 8002310:	e7d3      	b.n	80022ba <__gedf2+0x52>
 8002312:	4243      	negs	r3, r0
 8002314:	4158      	adcs	r0, r3
 8002316:	0040      	lsls	r0, r0, #1
 8002318:	3801      	subs	r0, #1
 800231a:	e7ce      	b.n	80022ba <__gedf2+0x52>
 800231c:	2002      	movs	r0, #2
 800231e:	4240      	negs	r0, r0
 8002320:	e7cb      	b.n	80022ba <__gedf2+0x52>
 8002322:	45c4      	cmp	ip, r8
 8002324:	d8c5      	bhi.n	80022b2 <__gedf2+0x4a>
 8002326:	2000      	movs	r0, #0
 8002328:	45c4      	cmp	ip, r8
 800232a:	d2c6      	bcs.n	80022ba <__gedf2+0x52>
 800232c:	e7ed      	b.n	800230a <__gedf2+0xa2>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__ledf2>:
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	4647      	mov	r7, r8
 8002338:	46ce      	mov	lr, r9
 800233a:	0004      	movs	r4, r0
 800233c:	0018      	movs	r0, r3
 800233e:	0016      	movs	r6, r2
 8002340:	031b      	lsls	r3, r3, #12
 8002342:	0b1b      	lsrs	r3, r3, #12
 8002344:	4d2c      	ldr	r5, [pc, #176]	; (80023f8 <__ledf2+0xc4>)
 8002346:	004a      	lsls	r2, r1, #1
 8002348:	4699      	mov	r9, r3
 800234a:	b580      	push	{r7, lr}
 800234c:	0043      	lsls	r3, r0, #1
 800234e:	030f      	lsls	r7, r1, #12
 8002350:	46a4      	mov	ip, r4
 8002352:	46b0      	mov	r8, r6
 8002354:	0b3f      	lsrs	r7, r7, #12
 8002356:	0d52      	lsrs	r2, r2, #21
 8002358:	0fc9      	lsrs	r1, r1, #31
 800235a:	0d5b      	lsrs	r3, r3, #21
 800235c:	0fc0      	lsrs	r0, r0, #31
 800235e:	42aa      	cmp	r2, r5
 8002360:	d00d      	beq.n	800237e <__ledf2+0x4a>
 8002362:	42ab      	cmp	r3, r5
 8002364:	d010      	beq.n	8002388 <__ledf2+0x54>
 8002366:	2a00      	cmp	r2, #0
 8002368:	d127      	bne.n	80023ba <__ledf2+0x86>
 800236a:	433c      	orrs	r4, r7
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <__ledf2+0x60>
 8002370:	464d      	mov	r5, r9
 8002372:	432e      	orrs	r6, r5
 8002374:	d10e      	bne.n	8002394 <__ledf2+0x60>
 8002376:	2000      	movs	r0, #0
 8002378:	2c00      	cmp	r4, #0
 800237a:	d015      	beq.n	80023a8 <__ledf2+0x74>
 800237c:	e00e      	b.n	800239c <__ledf2+0x68>
 800237e:	003d      	movs	r5, r7
 8002380:	4325      	orrs	r5, r4
 8002382:	d110      	bne.n	80023a6 <__ledf2+0x72>
 8002384:	4293      	cmp	r3, r2
 8002386:	d118      	bne.n	80023ba <__ledf2+0x86>
 8002388:	464d      	mov	r5, r9
 800238a:	432e      	orrs	r6, r5
 800238c:	d10b      	bne.n	80023a6 <__ledf2+0x72>
 800238e:	2a00      	cmp	r2, #0
 8002390:	d102      	bne.n	8002398 <__ledf2+0x64>
 8002392:	433c      	orrs	r4, r7
 8002394:	2c00      	cmp	r4, #0
 8002396:	d00b      	beq.n	80023b0 <__ledf2+0x7c>
 8002398:	4281      	cmp	r1, r0
 800239a:	d014      	beq.n	80023c6 <__ledf2+0x92>
 800239c:	2002      	movs	r0, #2
 800239e:	3901      	subs	r1, #1
 80023a0:	4008      	ands	r0, r1
 80023a2:	3801      	subs	r0, #1
 80023a4:	e000      	b.n	80023a8 <__ledf2+0x74>
 80023a6:	2002      	movs	r0, #2
 80023a8:	bcc0      	pop	{r6, r7}
 80023aa:	46b9      	mov	r9, r7
 80023ac:	46b0      	mov	r8, r6
 80023ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d1f9      	bne.n	80023a8 <__ledf2+0x74>
 80023b4:	2001      	movs	r0, #1
 80023b6:	4240      	negs	r0, r0
 80023b8:	e7f6      	b.n	80023a8 <__ledf2+0x74>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ec      	bne.n	8002398 <__ledf2+0x64>
 80023be:	464c      	mov	r4, r9
 80023c0:	4326      	orrs	r6, r4
 80023c2:	d1e9      	bne.n	8002398 <__ledf2+0x64>
 80023c4:	e7ea      	b.n	800239c <__ledf2+0x68>
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dd04      	ble.n	80023d4 <__ledf2+0xa0>
 80023ca:	4243      	negs	r3, r0
 80023cc:	4158      	adcs	r0, r3
 80023ce:	0040      	lsls	r0, r0, #1
 80023d0:	3801      	subs	r0, #1
 80023d2:	e7e9      	b.n	80023a8 <__ledf2+0x74>
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbeb      	blt.n	80023b0 <__ledf2+0x7c>
 80023d8:	454f      	cmp	r7, r9
 80023da:	d8df      	bhi.n	800239c <__ledf2+0x68>
 80023dc:	d006      	beq.n	80023ec <__ledf2+0xb8>
 80023de:	2000      	movs	r0, #0
 80023e0:	454f      	cmp	r7, r9
 80023e2:	d2e1      	bcs.n	80023a8 <__ledf2+0x74>
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d0e5      	beq.n	80023b4 <__ledf2+0x80>
 80023e8:	0008      	movs	r0, r1
 80023ea:	e7dd      	b.n	80023a8 <__ledf2+0x74>
 80023ec:	45c4      	cmp	ip, r8
 80023ee:	d8d5      	bhi.n	800239c <__ledf2+0x68>
 80023f0:	2000      	movs	r0, #0
 80023f2:	45c4      	cmp	ip, r8
 80023f4:	d2d8      	bcs.n	80023a8 <__ledf2+0x74>
 80023f6:	e7f5      	b.n	80023e4 <__ledf2+0xb0>
 80023f8:	000007ff 	.word	0x000007ff

080023fc <__aeabi_dmul>:
 80023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fe:	4645      	mov	r5, r8
 8002400:	46de      	mov	lr, fp
 8002402:	4657      	mov	r7, sl
 8002404:	464e      	mov	r6, r9
 8002406:	b5e0      	push	{r5, r6, r7, lr}
 8002408:	001f      	movs	r7, r3
 800240a:	030b      	lsls	r3, r1, #12
 800240c:	0b1b      	lsrs	r3, r3, #12
 800240e:	469b      	mov	fp, r3
 8002410:	004d      	lsls	r5, r1, #1
 8002412:	0fcb      	lsrs	r3, r1, #31
 8002414:	0004      	movs	r4, r0
 8002416:	4691      	mov	r9, r2
 8002418:	4698      	mov	r8, r3
 800241a:	b087      	sub	sp, #28
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	d100      	bne.n	8002422 <__aeabi_dmul+0x26>
 8002420:	e1cd      	b.n	80027be <__aeabi_dmul+0x3c2>
 8002422:	4bce      	ldr	r3, [pc, #824]	; (800275c <__aeabi_dmul+0x360>)
 8002424:	429d      	cmp	r5, r3
 8002426:	d100      	bne.n	800242a <__aeabi_dmul+0x2e>
 8002428:	e1e9      	b.n	80027fe <__aeabi_dmul+0x402>
 800242a:	465a      	mov	r2, fp
 800242c:	0f43      	lsrs	r3, r0, #29
 800242e:	00d2      	lsls	r2, r2, #3
 8002430:	4313      	orrs	r3, r2
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	0412      	lsls	r2, r2, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	00c3      	lsls	r3, r0, #3
 800243a:	469a      	mov	sl, r3
 800243c:	4bc8      	ldr	r3, [pc, #800]	; (8002760 <__aeabi_dmul+0x364>)
 800243e:	4693      	mov	fp, r2
 8002440:	469c      	mov	ip, r3
 8002442:	2300      	movs	r3, #0
 8002444:	2600      	movs	r6, #0
 8002446:	4465      	add	r5, ip
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	033c      	lsls	r4, r7, #12
 800244c:	007b      	lsls	r3, r7, #1
 800244e:	4648      	mov	r0, r9
 8002450:	0b24      	lsrs	r4, r4, #12
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fff      	lsrs	r7, r7, #31
 8002456:	2b00      	cmp	r3, #0
 8002458:	d100      	bne.n	800245c <__aeabi_dmul+0x60>
 800245a:	e189      	b.n	8002770 <__aeabi_dmul+0x374>
 800245c:	4abf      	ldr	r2, [pc, #764]	; (800275c <__aeabi_dmul+0x360>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <__aeabi_dmul+0x9a>
 8002462:	0f42      	lsrs	r2, r0, #29
 8002464:	00e4      	lsls	r4, r4, #3
 8002466:	4322      	orrs	r2, r4
 8002468:	2480      	movs	r4, #128	; 0x80
 800246a:	0424      	lsls	r4, r4, #16
 800246c:	4314      	orrs	r4, r2
 800246e:	4abc      	ldr	r2, [pc, #752]	; (8002760 <__aeabi_dmul+0x364>)
 8002470:	2100      	movs	r1, #0
 8002472:	4694      	mov	ip, r2
 8002474:	4642      	mov	r2, r8
 8002476:	4463      	add	r3, ip
 8002478:	195b      	adds	r3, r3, r5
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	9b01      	ldr	r3, [sp, #4]
 800247e:	407a      	eors	r2, r7
 8002480:	3301      	adds	r3, #1
 8002482:	00c0      	lsls	r0, r0, #3
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	9302      	str	r3, [sp, #8]
 8002488:	2e0a      	cmp	r6, #10
 800248a:	dd1c      	ble.n	80024c6 <__aeabi_dmul+0xca>
 800248c:	003a      	movs	r2, r7
 800248e:	2e0b      	cmp	r6, #11
 8002490:	d05e      	beq.n	8002550 <__aeabi_dmul+0x154>
 8002492:	4647      	mov	r7, r8
 8002494:	e056      	b.n	8002544 <__aeabi_dmul+0x148>
 8002496:	4649      	mov	r1, r9
 8002498:	4bb0      	ldr	r3, [pc, #704]	; (800275c <__aeabi_dmul+0x360>)
 800249a:	4321      	orrs	r1, r4
 800249c:	18eb      	adds	r3, r5, r3
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2900      	cmp	r1, #0
 80024a2:	d12a      	bne.n	80024fa <__aeabi_dmul+0xfe>
 80024a4:	2080      	movs	r0, #128	; 0x80
 80024a6:	2202      	movs	r2, #2
 80024a8:	0100      	lsls	r0, r0, #4
 80024aa:	002b      	movs	r3, r5
 80024ac:	4684      	mov	ip, r0
 80024ae:	4316      	orrs	r6, r2
 80024b0:	4642      	mov	r2, r8
 80024b2:	4463      	add	r3, ip
 80024b4:	407a      	eors	r2, r7
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	2e0a      	cmp	r6, #10
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_dmul+0xc4>
 80024be:	e231      	b.n	8002924 <__aeabi_dmul+0x528>
 80024c0:	2000      	movs	r0, #0
 80024c2:	2400      	movs	r4, #0
 80024c4:	2102      	movs	r1, #2
 80024c6:	2e02      	cmp	r6, #2
 80024c8:	dc26      	bgt.n	8002518 <__aeabi_dmul+0x11c>
 80024ca:	3e01      	subs	r6, #1
 80024cc:	2e01      	cmp	r6, #1
 80024ce:	d852      	bhi.n	8002576 <__aeabi_dmul+0x17a>
 80024d0:	2902      	cmp	r1, #2
 80024d2:	d04c      	beq.n	800256e <__aeabi_dmul+0x172>
 80024d4:	2901      	cmp	r1, #1
 80024d6:	d000      	beq.n	80024da <__aeabi_dmul+0xde>
 80024d8:	e118      	b.n	800270c <__aeabi_dmul+0x310>
 80024da:	2300      	movs	r3, #0
 80024dc:	2400      	movs	r4, #0
 80024de:	2500      	movs	r5, #0
 80024e0:	051b      	lsls	r3, r3, #20
 80024e2:	4323      	orrs	r3, r4
 80024e4:	07d2      	lsls	r2, r2, #31
 80024e6:	4313      	orrs	r3, r2
 80024e8:	0028      	movs	r0, r5
 80024ea:	0019      	movs	r1, r3
 80024ec:	b007      	add	sp, #28
 80024ee:	bcf0      	pop	{r4, r5, r6, r7}
 80024f0:	46bb      	mov	fp, r7
 80024f2:	46b2      	mov	sl, r6
 80024f4:	46a9      	mov	r9, r5
 80024f6:	46a0      	mov	r8, r4
 80024f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	2203      	movs	r2, #3
 80024fe:	0109      	lsls	r1, r1, #4
 8002500:	002b      	movs	r3, r5
 8002502:	468c      	mov	ip, r1
 8002504:	4316      	orrs	r6, r2
 8002506:	4642      	mov	r2, r8
 8002508:	4463      	add	r3, ip
 800250a:	407a      	eors	r2, r7
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	9302      	str	r3, [sp, #8]
 8002510:	2e0a      	cmp	r6, #10
 8002512:	dd00      	ble.n	8002516 <__aeabi_dmul+0x11a>
 8002514:	e228      	b.n	8002968 <__aeabi_dmul+0x56c>
 8002516:	2103      	movs	r1, #3
 8002518:	2501      	movs	r5, #1
 800251a:	40b5      	lsls	r5, r6
 800251c:	46ac      	mov	ip, r5
 800251e:	26a6      	movs	r6, #166	; 0xa6
 8002520:	4663      	mov	r3, ip
 8002522:	00f6      	lsls	r6, r6, #3
 8002524:	4035      	ands	r5, r6
 8002526:	4233      	tst	r3, r6
 8002528:	d10b      	bne.n	8002542 <__aeabi_dmul+0x146>
 800252a:	2690      	movs	r6, #144	; 0x90
 800252c:	00b6      	lsls	r6, r6, #2
 800252e:	4233      	tst	r3, r6
 8002530:	d118      	bne.n	8002564 <__aeabi_dmul+0x168>
 8002532:	3eb9      	subs	r6, #185	; 0xb9
 8002534:	3eff      	subs	r6, #255	; 0xff
 8002536:	421e      	tst	r6, r3
 8002538:	d01d      	beq.n	8002576 <__aeabi_dmul+0x17a>
 800253a:	46a3      	mov	fp, r4
 800253c:	4682      	mov	sl, r0
 800253e:	9100      	str	r1, [sp, #0]
 8002540:	e000      	b.n	8002544 <__aeabi_dmul+0x148>
 8002542:	0017      	movs	r7, r2
 8002544:	9900      	ldr	r1, [sp, #0]
 8002546:	003a      	movs	r2, r7
 8002548:	2902      	cmp	r1, #2
 800254a:	d010      	beq.n	800256e <__aeabi_dmul+0x172>
 800254c:	465c      	mov	r4, fp
 800254e:	4650      	mov	r0, sl
 8002550:	2903      	cmp	r1, #3
 8002552:	d1bf      	bne.n	80024d4 <__aeabi_dmul+0xd8>
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	031b      	lsls	r3, r3, #12
 8002558:	431c      	orrs	r4, r3
 800255a:	0324      	lsls	r4, r4, #12
 800255c:	0005      	movs	r5, r0
 800255e:	4b7f      	ldr	r3, [pc, #508]	; (800275c <__aeabi_dmul+0x360>)
 8002560:	0b24      	lsrs	r4, r4, #12
 8002562:	e7bd      	b.n	80024e0 <__aeabi_dmul+0xe4>
 8002564:	2480      	movs	r4, #128	; 0x80
 8002566:	2200      	movs	r2, #0
 8002568:	4b7c      	ldr	r3, [pc, #496]	; (800275c <__aeabi_dmul+0x360>)
 800256a:	0324      	lsls	r4, r4, #12
 800256c:	e7b8      	b.n	80024e0 <__aeabi_dmul+0xe4>
 800256e:	2400      	movs	r4, #0
 8002570:	2500      	movs	r5, #0
 8002572:	4b7a      	ldr	r3, [pc, #488]	; (800275c <__aeabi_dmul+0x360>)
 8002574:	e7b4      	b.n	80024e0 <__aeabi_dmul+0xe4>
 8002576:	4653      	mov	r3, sl
 8002578:	041e      	lsls	r6, r3, #16
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	0c1f      	lsrs	r7, r3, #16
 800257e:	0033      	movs	r3, r6
 8002580:	0c01      	lsrs	r1, r0, #16
 8002582:	0400      	lsls	r0, r0, #16
 8002584:	0c00      	lsrs	r0, r0, #16
 8002586:	4343      	muls	r3, r0
 8002588:	4698      	mov	r8, r3
 800258a:	0003      	movs	r3, r0
 800258c:	437b      	muls	r3, r7
 800258e:	4699      	mov	r9, r3
 8002590:	0033      	movs	r3, r6
 8002592:	434b      	muls	r3, r1
 8002594:	469c      	mov	ip, r3
 8002596:	4643      	mov	r3, r8
 8002598:	000d      	movs	r5, r1
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	469a      	mov	sl, r3
 800259e:	437d      	muls	r5, r7
 80025a0:	44cc      	add	ip, r9
 80025a2:	44d4      	add	ip, sl
 80025a4:	9500      	str	r5, [sp, #0]
 80025a6:	45e1      	cmp	r9, ip
 80025a8:	d904      	bls.n	80025b4 <__aeabi_dmul+0x1b8>
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	025b      	lsls	r3, r3, #9
 80025ae:	4699      	mov	r9, r3
 80025b0:	444d      	add	r5, r9
 80025b2:	9500      	str	r5, [sp, #0]
 80025b4:	4663      	mov	r3, ip
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	001d      	movs	r5, r3
 80025ba:	4663      	mov	r3, ip
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	469c      	mov	ip, r3
 80025c0:	4643      	mov	r3, r8
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	4698      	mov	r8, r3
 80025c8:	4663      	mov	r3, ip
 80025ca:	4443      	add	r3, r8
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	0c23      	lsrs	r3, r4, #16
 80025d0:	4698      	mov	r8, r3
 80025d2:	0033      	movs	r3, r6
 80025d4:	0424      	lsls	r4, r4, #16
 80025d6:	0c24      	lsrs	r4, r4, #16
 80025d8:	4363      	muls	r3, r4
 80025da:	469c      	mov	ip, r3
 80025dc:	0023      	movs	r3, r4
 80025de:	437b      	muls	r3, r7
 80025e0:	4699      	mov	r9, r3
 80025e2:	4643      	mov	r3, r8
 80025e4:	435e      	muls	r6, r3
 80025e6:	435f      	muls	r7, r3
 80025e8:	444e      	add	r6, r9
 80025ea:	4663      	mov	r3, ip
 80025ec:	46b2      	mov	sl, r6
 80025ee:	0c1e      	lsrs	r6, r3, #16
 80025f0:	4456      	add	r6, sl
 80025f2:	45b1      	cmp	r9, r6
 80025f4:	d903      	bls.n	80025fe <__aeabi_dmul+0x202>
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	025b      	lsls	r3, r3, #9
 80025fa:	4699      	mov	r9, r3
 80025fc:	444f      	add	r7, r9
 80025fe:	0c33      	lsrs	r3, r6, #16
 8002600:	4699      	mov	r9, r3
 8002602:	003b      	movs	r3, r7
 8002604:	444b      	add	r3, r9
 8002606:	9305      	str	r3, [sp, #20]
 8002608:	4663      	mov	r3, ip
 800260a:	46ac      	mov	ip, r5
 800260c:	041f      	lsls	r7, r3, #16
 800260e:	0c3f      	lsrs	r7, r7, #16
 8002610:	0436      	lsls	r6, r6, #16
 8002612:	19f6      	adds	r6, r6, r7
 8002614:	44b4      	add	ip, r6
 8002616:	4663      	mov	r3, ip
 8002618:	9304      	str	r3, [sp, #16]
 800261a:	465b      	mov	r3, fp
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	469c      	mov	ip, r3
 8002620:	465b      	mov	r3, fp
 8002622:	041f      	lsls	r7, r3, #16
 8002624:	0c3f      	lsrs	r7, r7, #16
 8002626:	003b      	movs	r3, r7
 8002628:	4343      	muls	r3, r0
 800262a:	4699      	mov	r9, r3
 800262c:	4663      	mov	r3, ip
 800262e:	4343      	muls	r3, r0
 8002630:	469a      	mov	sl, r3
 8002632:	464b      	mov	r3, r9
 8002634:	4660      	mov	r0, ip
 8002636:	0c1b      	lsrs	r3, r3, #16
 8002638:	469b      	mov	fp, r3
 800263a:	4348      	muls	r0, r1
 800263c:	4379      	muls	r1, r7
 800263e:	4451      	add	r1, sl
 8002640:	4459      	add	r1, fp
 8002642:	458a      	cmp	sl, r1
 8002644:	d903      	bls.n	800264e <__aeabi_dmul+0x252>
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	025b      	lsls	r3, r3, #9
 800264a:	469a      	mov	sl, r3
 800264c:	4450      	add	r0, sl
 800264e:	0c0b      	lsrs	r3, r1, #16
 8002650:	469a      	mov	sl, r3
 8002652:	464b      	mov	r3, r9
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	4699      	mov	r9, r3
 800265a:	003b      	movs	r3, r7
 800265c:	4363      	muls	r3, r4
 800265e:	0409      	lsls	r1, r1, #16
 8002660:	4645      	mov	r5, r8
 8002662:	4449      	add	r1, r9
 8002664:	4699      	mov	r9, r3
 8002666:	4663      	mov	r3, ip
 8002668:	435c      	muls	r4, r3
 800266a:	436b      	muls	r3, r5
 800266c:	469c      	mov	ip, r3
 800266e:	464b      	mov	r3, r9
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	4698      	mov	r8, r3
 8002674:	436f      	muls	r7, r5
 8002676:	193f      	adds	r7, r7, r4
 8002678:	4447      	add	r7, r8
 800267a:	4450      	add	r0, sl
 800267c:	42bc      	cmp	r4, r7
 800267e:	d903      	bls.n	8002688 <__aeabi_dmul+0x28c>
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	025b      	lsls	r3, r3, #9
 8002684:	4698      	mov	r8, r3
 8002686:	44c4      	add	ip, r8
 8002688:	9b04      	ldr	r3, [sp, #16]
 800268a:	9d00      	ldr	r5, [sp, #0]
 800268c:	4698      	mov	r8, r3
 800268e:	4445      	add	r5, r8
 8002690:	42b5      	cmp	r5, r6
 8002692:	41b6      	sbcs	r6, r6
 8002694:	4273      	negs	r3, r6
 8002696:	4698      	mov	r8, r3
 8002698:	464b      	mov	r3, r9
 800269a:	041e      	lsls	r6, r3, #16
 800269c:	9b05      	ldr	r3, [sp, #20]
 800269e:	043c      	lsls	r4, r7, #16
 80026a0:	4699      	mov	r9, r3
 80026a2:	0c36      	lsrs	r6, r6, #16
 80026a4:	19a4      	adds	r4, r4, r6
 80026a6:	444c      	add	r4, r9
 80026a8:	46a1      	mov	r9, r4
 80026aa:	4683      	mov	fp, r0
 80026ac:	186e      	adds	r6, r5, r1
 80026ae:	44c1      	add	r9, r8
 80026b0:	428e      	cmp	r6, r1
 80026b2:	4189      	sbcs	r1, r1
 80026b4:	44cb      	add	fp, r9
 80026b6:	465d      	mov	r5, fp
 80026b8:	4249      	negs	r1, r1
 80026ba:	186d      	adds	r5, r5, r1
 80026bc:	429c      	cmp	r4, r3
 80026be:	41a4      	sbcs	r4, r4
 80026c0:	45c1      	cmp	r9, r8
 80026c2:	419b      	sbcs	r3, r3
 80026c4:	4583      	cmp	fp, r0
 80026c6:	4180      	sbcs	r0, r0
 80026c8:	428d      	cmp	r5, r1
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	425b      	negs	r3, r3
 80026ce:	4264      	negs	r4, r4
 80026d0:	431c      	orrs	r4, r3
 80026d2:	4240      	negs	r0, r0
 80026d4:	9b03      	ldr	r3, [sp, #12]
 80026d6:	4249      	negs	r1, r1
 80026d8:	4301      	orrs	r1, r0
 80026da:	0270      	lsls	r0, r6, #9
 80026dc:	0c3f      	lsrs	r7, r7, #16
 80026de:	4318      	orrs	r0, r3
 80026e0:	19e4      	adds	r4, r4, r7
 80026e2:	1e47      	subs	r7, r0, #1
 80026e4:	41b8      	sbcs	r0, r7
 80026e6:	1864      	adds	r4, r4, r1
 80026e8:	4464      	add	r4, ip
 80026ea:	0df6      	lsrs	r6, r6, #23
 80026ec:	0261      	lsls	r1, r4, #9
 80026ee:	4330      	orrs	r0, r6
 80026f0:	0dec      	lsrs	r4, r5, #23
 80026f2:	026e      	lsls	r6, r5, #9
 80026f4:	430c      	orrs	r4, r1
 80026f6:	4330      	orrs	r0, r6
 80026f8:	01c9      	lsls	r1, r1, #7
 80026fa:	d400      	bmi.n	80026fe <__aeabi_dmul+0x302>
 80026fc:	e0f1      	b.n	80028e2 <__aeabi_dmul+0x4e6>
 80026fe:	2101      	movs	r1, #1
 8002700:	0843      	lsrs	r3, r0, #1
 8002702:	4001      	ands	r1, r0
 8002704:	430b      	orrs	r3, r1
 8002706:	07e0      	lsls	r0, r4, #31
 8002708:	4318      	orrs	r0, r3
 800270a:	0864      	lsrs	r4, r4, #1
 800270c:	4915      	ldr	r1, [pc, #84]	; (8002764 <__aeabi_dmul+0x368>)
 800270e:	9b02      	ldr	r3, [sp, #8]
 8002710:	468c      	mov	ip, r1
 8002712:	4463      	add	r3, ip
 8002714:	2b00      	cmp	r3, #0
 8002716:	dc00      	bgt.n	800271a <__aeabi_dmul+0x31e>
 8002718:	e097      	b.n	800284a <__aeabi_dmul+0x44e>
 800271a:	0741      	lsls	r1, r0, #29
 800271c:	d009      	beq.n	8002732 <__aeabi_dmul+0x336>
 800271e:	210f      	movs	r1, #15
 8002720:	4001      	ands	r1, r0
 8002722:	2904      	cmp	r1, #4
 8002724:	d005      	beq.n	8002732 <__aeabi_dmul+0x336>
 8002726:	1d01      	adds	r1, r0, #4
 8002728:	4281      	cmp	r1, r0
 800272a:	4180      	sbcs	r0, r0
 800272c:	4240      	negs	r0, r0
 800272e:	1824      	adds	r4, r4, r0
 8002730:	0008      	movs	r0, r1
 8002732:	01e1      	lsls	r1, r4, #7
 8002734:	d506      	bpl.n	8002744 <__aeabi_dmul+0x348>
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	00c9      	lsls	r1, r1, #3
 800273a:	468c      	mov	ip, r1
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <__aeabi_dmul+0x36c>)
 800273e:	401c      	ands	r4, r3
 8002740:	9b02      	ldr	r3, [sp, #8]
 8002742:	4463      	add	r3, ip
 8002744:	4909      	ldr	r1, [pc, #36]	; (800276c <__aeabi_dmul+0x370>)
 8002746:	428b      	cmp	r3, r1
 8002748:	dd00      	ble.n	800274c <__aeabi_dmul+0x350>
 800274a:	e710      	b.n	800256e <__aeabi_dmul+0x172>
 800274c:	0761      	lsls	r1, r4, #29
 800274e:	08c5      	lsrs	r5, r0, #3
 8002750:	0264      	lsls	r4, r4, #9
 8002752:	055b      	lsls	r3, r3, #21
 8002754:	430d      	orrs	r5, r1
 8002756:	0b24      	lsrs	r4, r4, #12
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	e6c1      	b.n	80024e0 <__aeabi_dmul+0xe4>
 800275c:	000007ff 	.word	0x000007ff
 8002760:	fffffc01 	.word	0xfffffc01
 8002764:	000003ff 	.word	0x000003ff
 8002768:	feffffff 	.word	0xfeffffff
 800276c:	000007fe 	.word	0x000007fe
 8002770:	464b      	mov	r3, r9
 8002772:	4323      	orrs	r3, r4
 8002774:	d059      	beq.n	800282a <__aeabi_dmul+0x42e>
 8002776:	2c00      	cmp	r4, #0
 8002778:	d100      	bne.n	800277c <__aeabi_dmul+0x380>
 800277a:	e0a3      	b.n	80028c4 <__aeabi_dmul+0x4c8>
 800277c:	0020      	movs	r0, r4
 800277e:	f000 fd0d 	bl	800319c <__clzsi2>
 8002782:	0001      	movs	r1, r0
 8002784:	0003      	movs	r3, r0
 8002786:	390b      	subs	r1, #11
 8002788:	221d      	movs	r2, #29
 800278a:	1a52      	subs	r2, r2, r1
 800278c:	4649      	mov	r1, r9
 800278e:	0018      	movs	r0, r3
 8002790:	40d1      	lsrs	r1, r2
 8002792:	464a      	mov	r2, r9
 8002794:	3808      	subs	r0, #8
 8002796:	4082      	lsls	r2, r0
 8002798:	4084      	lsls	r4, r0
 800279a:	0010      	movs	r0, r2
 800279c:	430c      	orrs	r4, r1
 800279e:	4a74      	ldr	r2, [pc, #464]	; (8002970 <__aeabi_dmul+0x574>)
 80027a0:	1aeb      	subs	r3, r5, r3
 80027a2:	4694      	mov	ip, r2
 80027a4:	4642      	mov	r2, r8
 80027a6:	4463      	add	r3, ip
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	9b01      	ldr	r3, [sp, #4]
 80027ac:	407a      	eors	r2, r7
 80027ae:	3301      	adds	r3, #1
 80027b0:	2100      	movs	r1, #0
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	2e0a      	cmp	r6, #10
 80027b8:	dd00      	ble.n	80027bc <__aeabi_dmul+0x3c0>
 80027ba:	e667      	b.n	800248c <__aeabi_dmul+0x90>
 80027bc:	e683      	b.n	80024c6 <__aeabi_dmul+0xca>
 80027be:	465b      	mov	r3, fp
 80027c0:	4303      	orrs	r3, r0
 80027c2:	469a      	mov	sl, r3
 80027c4:	d02a      	beq.n	800281c <__aeabi_dmul+0x420>
 80027c6:	465b      	mov	r3, fp
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06d      	beq.n	80028a8 <__aeabi_dmul+0x4ac>
 80027cc:	4658      	mov	r0, fp
 80027ce:	f000 fce5 	bl	800319c <__clzsi2>
 80027d2:	0001      	movs	r1, r0
 80027d4:	0003      	movs	r3, r0
 80027d6:	390b      	subs	r1, #11
 80027d8:	221d      	movs	r2, #29
 80027da:	1a52      	subs	r2, r2, r1
 80027dc:	0021      	movs	r1, r4
 80027de:	0018      	movs	r0, r3
 80027e0:	465d      	mov	r5, fp
 80027e2:	40d1      	lsrs	r1, r2
 80027e4:	3808      	subs	r0, #8
 80027e6:	4085      	lsls	r5, r0
 80027e8:	000a      	movs	r2, r1
 80027ea:	4084      	lsls	r4, r0
 80027ec:	432a      	orrs	r2, r5
 80027ee:	4693      	mov	fp, r2
 80027f0:	46a2      	mov	sl, r4
 80027f2:	4d5f      	ldr	r5, [pc, #380]	; (8002970 <__aeabi_dmul+0x574>)
 80027f4:	2600      	movs	r6, #0
 80027f6:	1aed      	subs	r5, r5, r3
 80027f8:	2300      	movs	r3, #0
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	e625      	b.n	800244a <__aeabi_dmul+0x4e>
 80027fe:	465b      	mov	r3, fp
 8002800:	4303      	orrs	r3, r0
 8002802:	469a      	mov	sl, r3
 8002804:	d105      	bne.n	8002812 <__aeabi_dmul+0x416>
 8002806:	2300      	movs	r3, #0
 8002808:	469b      	mov	fp, r3
 800280a:	3302      	adds	r3, #2
 800280c:	2608      	movs	r6, #8
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	e61b      	b.n	800244a <__aeabi_dmul+0x4e>
 8002812:	2303      	movs	r3, #3
 8002814:	4682      	mov	sl, r0
 8002816:	260c      	movs	r6, #12
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	e616      	b.n	800244a <__aeabi_dmul+0x4e>
 800281c:	2300      	movs	r3, #0
 800281e:	469b      	mov	fp, r3
 8002820:	3301      	adds	r3, #1
 8002822:	2604      	movs	r6, #4
 8002824:	2500      	movs	r5, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	e60f      	b.n	800244a <__aeabi_dmul+0x4e>
 800282a:	4642      	mov	r2, r8
 800282c:	3301      	adds	r3, #1
 800282e:	9501      	str	r5, [sp, #4]
 8002830:	431e      	orrs	r6, r3
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	407a      	eors	r2, r7
 8002836:	3301      	adds	r3, #1
 8002838:	2400      	movs	r4, #0
 800283a:	2000      	movs	r0, #0
 800283c:	2101      	movs	r1, #1
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2e0a      	cmp	r6, #10
 8002844:	dd00      	ble.n	8002848 <__aeabi_dmul+0x44c>
 8002846:	e621      	b.n	800248c <__aeabi_dmul+0x90>
 8002848:	e63d      	b.n	80024c6 <__aeabi_dmul+0xca>
 800284a:	2101      	movs	r1, #1
 800284c:	1ac9      	subs	r1, r1, r3
 800284e:	2938      	cmp	r1, #56	; 0x38
 8002850:	dd00      	ble.n	8002854 <__aeabi_dmul+0x458>
 8002852:	e642      	b.n	80024da <__aeabi_dmul+0xde>
 8002854:	291f      	cmp	r1, #31
 8002856:	dd47      	ble.n	80028e8 <__aeabi_dmul+0x4ec>
 8002858:	261f      	movs	r6, #31
 800285a:	0025      	movs	r5, r4
 800285c:	4276      	negs	r6, r6
 800285e:	1af3      	subs	r3, r6, r3
 8002860:	40dd      	lsrs	r5, r3
 8002862:	002b      	movs	r3, r5
 8002864:	2920      	cmp	r1, #32
 8002866:	d005      	beq.n	8002874 <__aeabi_dmul+0x478>
 8002868:	4942      	ldr	r1, [pc, #264]	; (8002974 <__aeabi_dmul+0x578>)
 800286a:	9d02      	ldr	r5, [sp, #8]
 800286c:	468c      	mov	ip, r1
 800286e:	4465      	add	r5, ip
 8002870:	40ac      	lsls	r4, r5
 8002872:	4320      	orrs	r0, r4
 8002874:	1e41      	subs	r1, r0, #1
 8002876:	4188      	sbcs	r0, r1
 8002878:	4318      	orrs	r0, r3
 800287a:	2307      	movs	r3, #7
 800287c:	001d      	movs	r5, r3
 800287e:	2400      	movs	r4, #0
 8002880:	4005      	ands	r5, r0
 8002882:	4203      	tst	r3, r0
 8002884:	d04a      	beq.n	800291c <__aeabi_dmul+0x520>
 8002886:	230f      	movs	r3, #15
 8002888:	2400      	movs	r4, #0
 800288a:	4003      	ands	r3, r0
 800288c:	2b04      	cmp	r3, #4
 800288e:	d042      	beq.n	8002916 <__aeabi_dmul+0x51a>
 8002890:	1d03      	adds	r3, r0, #4
 8002892:	4283      	cmp	r3, r0
 8002894:	4180      	sbcs	r0, r0
 8002896:	4240      	negs	r0, r0
 8002898:	1824      	adds	r4, r4, r0
 800289a:	0018      	movs	r0, r3
 800289c:	0223      	lsls	r3, r4, #8
 800289e:	d53a      	bpl.n	8002916 <__aeabi_dmul+0x51a>
 80028a0:	2301      	movs	r3, #1
 80028a2:	2400      	movs	r4, #0
 80028a4:	2500      	movs	r5, #0
 80028a6:	e61b      	b.n	80024e0 <__aeabi_dmul+0xe4>
 80028a8:	f000 fc78 	bl	800319c <__clzsi2>
 80028ac:	0001      	movs	r1, r0
 80028ae:	0003      	movs	r3, r0
 80028b0:	3115      	adds	r1, #21
 80028b2:	3320      	adds	r3, #32
 80028b4:	291c      	cmp	r1, #28
 80028b6:	dd8f      	ble.n	80027d8 <__aeabi_dmul+0x3dc>
 80028b8:	3808      	subs	r0, #8
 80028ba:	2200      	movs	r2, #0
 80028bc:	4084      	lsls	r4, r0
 80028be:	4692      	mov	sl, r2
 80028c0:	46a3      	mov	fp, r4
 80028c2:	e796      	b.n	80027f2 <__aeabi_dmul+0x3f6>
 80028c4:	f000 fc6a 	bl	800319c <__clzsi2>
 80028c8:	0001      	movs	r1, r0
 80028ca:	0003      	movs	r3, r0
 80028cc:	3115      	adds	r1, #21
 80028ce:	3320      	adds	r3, #32
 80028d0:	291c      	cmp	r1, #28
 80028d2:	dc00      	bgt.n	80028d6 <__aeabi_dmul+0x4da>
 80028d4:	e758      	b.n	8002788 <__aeabi_dmul+0x38c>
 80028d6:	0002      	movs	r2, r0
 80028d8:	464c      	mov	r4, r9
 80028da:	3a08      	subs	r2, #8
 80028dc:	2000      	movs	r0, #0
 80028de:	4094      	lsls	r4, r2
 80028e0:	e75d      	b.n	800279e <__aeabi_dmul+0x3a2>
 80028e2:	9b01      	ldr	r3, [sp, #4]
 80028e4:	9302      	str	r3, [sp, #8]
 80028e6:	e711      	b.n	800270c <__aeabi_dmul+0x310>
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <__aeabi_dmul+0x57c>)
 80028ea:	0026      	movs	r6, r4
 80028ec:	469c      	mov	ip, r3
 80028ee:	0003      	movs	r3, r0
 80028f0:	9d02      	ldr	r5, [sp, #8]
 80028f2:	40cb      	lsrs	r3, r1
 80028f4:	4465      	add	r5, ip
 80028f6:	40ae      	lsls	r6, r5
 80028f8:	431e      	orrs	r6, r3
 80028fa:	0003      	movs	r3, r0
 80028fc:	40ab      	lsls	r3, r5
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	4183      	sbcs	r3, r0
 8002902:	0030      	movs	r0, r6
 8002904:	4318      	orrs	r0, r3
 8002906:	40cc      	lsrs	r4, r1
 8002908:	0743      	lsls	r3, r0, #29
 800290a:	d0c7      	beq.n	800289c <__aeabi_dmul+0x4a0>
 800290c:	230f      	movs	r3, #15
 800290e:	4003      	ands	r3, r0
 8002910:	2b04      	cmp	r3, #4
 8002912:	d1bd      	bne.n	8002890 <__aeabi_dmul+0x494>
 8002914:	e7c2      	b.n	800289c <__aeabi_dmul+0x4a0>
 8002916:	0765      	lsls	r5, r4, #29
 8002918:	0264      	lsls	r4, r4, #9
 800291a:	0b24      	lsrs	r4, r4, #12
 800291c:	08c0      	lsrs	r0, r0, #3
 800291e:	2300      	movs	r3, #0
 8002920:	4305      	orrs	r5, r0
 8002922:	e5dd      	b.n	80024e0 <__aeabi_dmul+0xe4>
 8002924:	2500      	movs	r5, #0
 8002926:	2302      	movs	r3, #2
 8002928:	2e0f      	cmp	r6, #15
 800292a:	d10c      	bne.n	8002946 <__aeabi_dmul+0x54a>
 800292c:	2480      	movs	r4, #128	; 0x80
 800292e:	465b      	mov	r3, fp
 8002930:	0324      	lsls	r4, r4, #12
 8002932:	4223      	tst	r3, r4
 8002934:	d00e      	beq.n	8002954 <__aeabi_dmul+0x558>
 8002936:	4221      	tst	r1, r4
 8002938:	d10c      	bne.n	8002954 <__aeabi_dmul+0x558>
 800293a:	430c      	orrs	r4, r1
 800293c:	0324      	lsls	r4, r4, #12
 800293e:	003a      	movs	r2, r7
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <__aeabi_dmul+0x580>)
 8002942:	0b24      	lsrs	r4, r4, #12
 8002944:	e5cc      	b.n	80024e0 <__aeabi_dmul+0xe4>
 8002946:	2e0b      	cmp	r6, #11
 8002948:	d000      	beq.n	800294c <__aeabi_dmul+0x550>
 800294a:	e5a2      	b.n	8002492 <__aeabi_dmul+0x96>
 800294c:	468b      	mov	fp, r1
 800294e:	46aa      	mov	sl, r5
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	e5f7      	b.n	8002544 <__aeabi_dmul+0x148>
 8002954:	2480      	movs	r4, #128	; 0x80
 8002956:	465b      	mov	r3, fp
 8002958:	0324      	lsls	r4, r4, #12
 800295a:	431c      	orrs	r4, r3
 800295c:	0324      	lsls	r4, r4, #12
 800295e:	4642      	mov	r2, r8
 8002960:	4655      	mov	r5, sl
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <__aeabi_dmul+0x580>)
 8002964:	0b24      	lsrs	r4, r4, #12
 8002966:	e5bb      	b.n	80024e0 <__aeabi_dmul+0xe4>
 8002968:	464d      	mov	r5, r9
 800296a:	0021      	movs	r1, r4
 800296c:	2303      	movs	r3, #3
 800296e:	e7db      	b.n	8002928 <__aeabi_dmul+0x52c>
 8002970:	fffffc0d 	.word	0xfffffc0d
 8002974:	0000043e 	.word	0x0000043e
 8002978:	0000041e 	.word	0x0000041e
 800297c:	000007ff 	.word	0x000007ff

08002980 <__aeabi_dsub>:
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	4657      	mov	r7, sl
 8002984:	464e      	mov	r6, r9
 8002986:	4645      	mov	r5, r8
 8002988:	46de      	mov	lr, fp
 800298a:	b5e0      	push	{r5, r6, r7, lr}
 800298c:	000d      	movs	r5, r1
 800298e:	0004      	movs	r4, r0
 8002990:	0019      	movs	r1, r3
 8002992:	0010      	movs	r0, r2
 8002994:	032b      	lsls	r3, r5, #12
 8002996:	0a5b      	lsrs	r3, r3, #9
 8002998:	0f62      	lsrs	r2, r4, #29
 800299a:	431a      	orrs	r2, r3
 800299c:	00e3      	lsls	r3, r4, #3
 800299e:	030c      	lsls	r4, r1, #12
 80029a0:	0a64      	lsrs	r4, r4, #9
 80029a2:	0f47      	lsrs	r7, r0, #29
 80029a4:	4327      	orrs	r7, r4
 80029a6:	4cd0      	ldr	r4, [pc, #832]	; (8002ce8 <__aeabi_dsub+0x368>)
 80029a8:	006e      	lsls	r6, r5, #1
 80029aa:	4691      	mov	r9, r2
 80029ac:	b083      	sub	sp, #12
 80029ae:	004a      	lsls	r2, r1, #1
 80029b0:	00c0      	lsls	r0, r0, #3
 80029b2:	4698      	mov	r8, r3
 80029b4:	46a2      	mov	sl, r4
 80029b6:	0d76      	lsrs	r6, r6, #21
 80029b8:	0fed      	lsrs	r5, r5, #31
 80029ba:	0d52      	lsrs	r2, r2, #21
 80029bc:	0fc9      	lsrs	r1, r1, #31
 80029be:	9001      	str	r0, [sp, #4]
 80029c0:	42a2      	cmp	r2, r4
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x46>
 80029c4:	e0b9      	b.n	8002b3a <__aeabi_dsub+0x1ba>
 80029c6:	2401      	movs	r4, #1
 80029c8:	4061      	eors	r1, r4
 80029ca:	468b      	mov	fp, r1
 80029cc:	428d      	cmp	r5, r1
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x52>
 80029d0:	e08d      	b.n	8002aee <__aeabi_dsub+0x16e>
 80029d2:	1ab4      	subs	r4, r6, r2
 80029d4:	46a4      	mov	ip, r4
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	dc00      	bgt.n	80029dc <__aeabi_dsub+0x5c>
 80029da:	e0b7      	b.n	8002b4c <__aeabi_dsub+0x1cc>
 80029dc:	2a00      	cmp	r2, #0
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x62>
 80029e0:	e0cb      	b.n	8002b7a <__aeabi_dsub+0x1fa>
 80029e2:	4ac1      	ldr	r2, [pc, #772]	; (8002ce8 <__aeabi_dsub+0x368>)
 80029e4:	4296      	cmp	r6, r2
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x6a>
 80029e8:	e186      	b.n	8002cf8 <__aeabi_dsub+0x378>
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	0412      	lsls	r2, r2, #16
 80029ee:	4317      	orrs	r7, r2
 80029f0:	4662      	mov	r2, ip
 80029f2:	2a38      	cmp	r2, #56	; 0x38
 80029f4:	dd00      	ble.n	80029f8 <__aeabi_dsub+0x78>
 80029f6:	e1a4      	b.n	8002d42 <__aeabi_dsub+0x3c2>
 80029f8:	2a1f      	cmp	r2, #31
 80029fa:	dd00      	ble.n	80029fe <__aeabi_dsub+0x7e>
 80029fc:	e21d      	b.n	8002e3a <__aeabi_dsub+0x4ba>
 80029fe:	4661      	mov	r1, ip
 8002a00:	2220      	movs	r2, #32
 8002a02:	003c      	movs	r4, r7
 8002a04:	1a52      	subs	r2, r2, r1
 8002a06:	0001      	movs	r1, r0
 8002a08:	4090      	lsls	r0, r2
 8002a0a:	4094      	lsls	r4, r2
 8002a0c:	1e42      	subs	r2, r0, #1
 8002a0e:	4190      	sbcs	r0, r2
 8002a10:	4662      	mov	r2, ip
 8002a12:	46a0      	mov	r8, r4
 8002a14:	4664      	mov	r4, ip
 8002a16:	40d7      	lsrs	r7, r2
 8002a18:	464a      	mov	r2, r9
 8002a1a:	40e1      	lsrs	r1, r4
 8002a1c:	4644      	mov	r4, r8
 8002a1e:	1bd2      	subs	r2, r2, r7
 8002a20:	4691      	mov	r9, r2
 8002a22:	430c      	orrs	r4, r1
 8002a24:	4304      	orrs	r4, r0
 8002a26:	1b1c      	subs	r4, r3, r4
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	4192      	sbcs	r2, r2
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	4252      	negs	r2, r2
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	469a      	mov	sl, r3
 8002a34:	4653      	mov	r3, sl
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	d400      	bmi.n	8002a3c <__aeabi_dsub+0xbc>
 8002a3a:	e12b      	b.n	8002c94 <__aeabi_dsub+0x314>
 8002a3c:	4653      	mov	r3, sl
 8002a3e:	025a      	lsls	r2, r3, #9
 8002a40:	0a53      	lsrs	r3, r2, #9
 8002a42:	469a      	mov	sl, r3
 8002a44:	4653      	mov	r3, sl
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d100      	bne.n	8002a4c <__aeabi_dsub+0xcc>
 8002a4a:	e166      	b.n	8002d1a <__aeabi_dsub+0x39a>
 8002a4c:	4650      	mov	r0, sl
 8002a4e:	f000 fba5 	bl	800319c <__clzsi2>
 8002a52:	0003      	movs	r3, r0
 8002a54:	3b08      	subs	r3, #8
 8002a56:	2220      	movs	r2, #32
 8002a58:	0020      	movs	r0, r4
 8002a5a:	1ad2      	subs	r2, r2, r3
 8002a5c:	4651      	mov	r1, sl
 8002a5e:	40d0      	lsrs	r0, r2
 8002a60:	4099      	lsls	r1, r3
 8002a62:	0002      	movs	r2, r0
 8002a64:	409c      	lsls	r4, r3
 8002a66:	430a      	orrs	r2, r1
 8002a68:	429e      	cmp	r6, r3
 8002a6a:	dd00      	ble.n	8002a6e <__aeabi_dsub+0xee>
 8002a6c:	e164      	b.n	8002d38 <__aeabi_dsub+0x3b8>
 8002a6e:	1b9b      	subs	r3, r3, r6
 8002a70:	1c59      	adds	r1, r3, #1
 8002a72:	291f      	cmp	r1, #31
 8002a74:	dd00      	ble.n	8002a78 <__aeabi_dsub+0xf8>
 8002a76:	e0fe      	b.n	8002c76 <__aeabi_dsub+0x2f6>
 8002a78:	2320      	movs	r3, #32
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	0026      	movs	r6, r4
 8002a7e:	1a5b      	subs	r3, r3, r1
 8002a80:	409c      	lsls	r4, r3
 8002a82:	4098      	lsls	r0, r3
 8002a84:	40ce      	lsrs	r6, r1
 8002a86:	40ca      	lsrs	r2, r1
 8002a88:	1e63      	subs	r3, r4, #1
 8002a8a:	419c      	sbcs	r4, r3
 8002a8c:	4330      	orrs	r0, r6
 8002a8e:	4692      	mov	sl, r2
 8002a90:	2600      	movs	r6, #0
 8002a92:	4304      	orrs	r4, r0
 8002a94:	0763      	lsls	r3, r4, #29
 8002a96:	d009      	beq.n	8002aac <__aeabi_dsub+0x12c>
 8002a98:	230f      	movs	r3, #15
 8002a9a:	4023      	ands	r3, r4
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d005      	beq.n	8002aac <__aeabi_dsub+0x12c>
 8002aa0:	1d23      	adds	r3, r4, #4
 8002aa2:	42a3      	cmp	r3, r4
 8002aa4:	41a4      	sbcs	r4, r4
 8002aa6:	4264      	negs	r4, r4
 8002aa8:	44a2      	add	sl, r4
 8002aaa:	001c      	movs	r4, r3
 8002aac:	4653      	mov	r3, sl
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	d400      	bmi.n	8002ab4 <__aeabi_dsub+0x134>
 8002ab2:	e0f2      	b.n	8002c9a <__aeabi_dsub+0x31a>
 8002ab4:	4b8c      	ldr	r3, [pc, #560]	; (8002ce8 <__aeabi_dsub+0x368>)
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	429e      	cmp	r6, r3
 8002aba:	d100      	bne.n	8002abe <__aeabi_dsub+0x13e>
 8002abc:	e10f      	b.n	8002cde <__aeabi_dsub+0x35e>
 8002abe:	4653      	mov	r3, sl
 8002ac0:	498a      	ldr	r1, [pc, #552]	; (8002cec <__aeabi_dsub+0x36c>)
 8002ac2:	08e4      	lsrs	r4, r4, #3
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	075b      	lsls	r3, r3, #29
 8002aca:	4323      	orrs	r3, r4
 8002acc:	0572      	lsls	r2, r6, #21
 8002ace:	024c      	lsls	r4, r1, #9
 8002ad0:	0b24      	lsrs	r4, r4, #12
 8002ad2:	0d52      	lsrs	r2, r2, #21
 8002ad4:	0512      	lsls	r2, r2, #20
 8002ad6:	4322      	orrs	r2, r4
 8002ad8:	07ed      	lsls	r5, r5, #31
 8002ada:	432a      	orrs	r2, r5
 8002adc:	0018      	movs	r0, r3
 8002ade:	0011      	movs	r1, r2
 8002ae0:	b003      	add	sp, #12
 8002ae2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ae4:	46bb      	mov	fp, r7
 8002ae6:	46b2      	mov	sl, r6
 8002ae8:	46a9      	mov	r9, r5
 8002aea:	46a0      	mov	r8, r4
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aee:	1ab4      	subs	r4, r6, r2
 8002af0:	46a4      	mov	ip, r4
 8002af2:	2c00      	cmp	r4, #0
 8002af4:	dd59      	ble.n	8002baa <__aeabi_dsub+0x22a>
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0x17c>
 8002afa:	e0b0      	b.n	8002c5e <__aeabi_dsub+0x2de>
 8002afc:	4556      	cmp	r6, sl
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x182>
 8002b00:	e0fa      	b.n	8002cf8 <__aeabi_dsub+0x378>
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	0412      	lsls	r2, r2, #16
 8002b06:	4317      	orrs	r7, r2
 8002b08:	4662      	mov	r2, ip
 8002b0a:	2a38      	cmp	r2, #56	; 0x38
 8002b0c:	dd00      	ble.n	8002b10 <__aeabi_dsub+0x190>
 8002b0e:	e0d4      	b.n	8002cba <__aeabi_dsub+0x33a>
 8002b10:	2a1f      	cmp	r2, #31
 8002b12:	dc00      	bgt.n	8002b16 <__aeabi_dsub+0x196>
 8002b14:	e1c0      	b.n	8002e98 <__aeabi_dsub+0x518>
 8002b16:	0039      	movs	r1, r7
 8002b18:	3a20      	subs	r2, #32
 8002b1a:	40d1      	lsrs	r1, r2
 8002b1c:	4662      	mov	r2, ip
 8002b1e:	2a20      	cmp	r2, #32
 8002b20:	d006      	beq.n	8002b30 <__aeabi_dsub+0x1b0>
 8002b22:	4664      	mov	r4, ip
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	1b12      	subs	r2, r2, r4
 8002b28:	003c      	movs	r4, r7
 8002b2a:	4094      	lsls	r4, r2
 8002b2c:	4304      	orrs	r4, r0
 8002b2e:	9401      	str	r4, [sp, #4]
 8002b30:	9c01      	ldr	r4, [sp, #4]
 8002b32:	1e62      	subs	r2, r4, #1
 8002b34:	4194      	sbcs	r4, r2
 8002b36:	430c      	orrs	r4, r1
 8002b38:	e0c3      	b.n	8002cc2 <__aeabi_dsub+0x342>
 8002b3a:	003c      	movs	r4, r7
 8002b3c:	4304      	orrs	r4, r0
 8002b3e:	d02b      	beq.n	8002b98 <__aeabi_dsub+0x218>
 8002b40:	468b      	mov	fp, r1
 8002b42:	428d      	cmp	r5, r1
 8002b44:	d02e      	beq.n	8002ba4 <__aeabi_dsub+0x224>
 8002b46:	4c6a      	ldr	r4, [pc, #424]	; (8002cf0 <__aeabi_dsub+0x370>)
 8002b48:	46a4      	mov	ip, r4
 8002b4a:	44b4      	add	ip, r6
 8002b4c:	4664      	mov	r4, ip
 8002b4e:	2c00      	cmp	r4, #0
 8002b50:	d05f      	beq.n	8002c12 <__aeabi_dsub+0x292>
 8002b52:	1b94      	subs	r4, r2, r6
 8002b54:	46a4      	mov	ip, r4
 8002b56:	2e00      	cmp	r6, #0
 8002b58:	d000      	beq.n	8002b5c <__aeabi_dsub+0x1dc>
 8002b5a:	e120      	b.n	8002d9e <__aeabi_dsub+0x41e>
 8002b5c:	464c      	mov	r4, r9
 8002b5e:	431c      	orrs	r4, r3
 8002b60:	d100      	bne.n	8002b64 <__aeabi_dsub+0x1e4>
 8002b62:	e1c7      	b.n	8002ef4 <__aeabi_dsub+0x574>
 8002b64:	4661      	mov	r1, ip
 8002b66:	1e4c      	subs	r4, r1, #1
 8002b68:	2901      	cmp	r1, #1
 8002b6a:	d100      	bne.n	8002b6e <__aeabi_dsub+0x1ee>
 8002b6c:	e223      	b.n	8002fb6 <__aeabi_dsub+0x636>
 8002b6e:	4d5e      	ldr	r5, [pc, #376]	; (8002ce8 <__aeabi_dsub+0x368>)
 8002b70:	45ac      	cmp	ip, r5
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x1f6>
 8002b74:	e1d8      	b.n	8002f28 <__aeabi_dsub+0x5a8>
 8002b76:	46a4      	mov	ip, r4
 8002b78:	e11a      	b.n	8002db0 <__aeabi_dsub+0x430>
 8002b7a:	003a      	movs	r2, r7
 8002b7c:	4302      	orrs	r2, r0
 8002b7e:	d100      	bne.n	8002b82 <__aeabi_dsub+0x202>
 8002b80:	e0e4      	b.n	8002d4c <__aeabi_dsub+0x3cc>
 8002b82:	0022      	movs	r2, r4
 8002b84:	3a01      	subs	r2, #1
 8002b86:	2c01      	cmp	r4, #1
 8002b88:	d100      	bne.n	8002b8c <__aeabi_dsub+0x20c>
 8002b8a:	e1c3      	b.n	8002f14 <__aeabi_dsub+0x594>
 8002b8c:	4956      	ldr	r1, [pc, #344]	; (8002ce8 <__aeabi_dsub+0x368>)
 8002b8e:	428c      	cmp	r4, r1
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x214>
 8002b92:	e0b1      	b.n	8002cf8 <__aeabi_dsub+0x378>
 8002b94:	4694      	mov	ip, r2
 8002b96:	e72b      	b.n	80029f0 <__aeabi_dsub+0x70>
 8002b98:	2401      	movs	r4, #1
 8002b9a:	4061      	eors	r1, r4
 8002b9c:	468b      	mov	fp, r1
 8002b9e:	428d      	cmp	r5, r1
 8002ba0:	d000      	beq.n	8002ba4 <__aeabi_dsub+0x224>
 8002ba2:	e716      	b.n	80029d2 <__aeabi_dsub+0x52>
 8002ba4:	4952      	ldr	r1, [pc, #328]	; (8002cf0 <__aeabi_dsub+0x370>)
 8002ba6:	468c      	mov	ip, r1
 8002ba8:	44b4      	add	ip, r6
 8002baa:	4664      	mov	r4, ip
 8002bac:	2c00      	cmp	r4, #0
 8002bae:	d100      	bne.n	8002bb2 <__aeabi_dsub+0x232>
 8002bb0:	e0d3      	b.n	8002d5a <__aeabi_dsub+0x3da>
 8002bb2:	1b91      	subs	r1, r2, r6
 8002bb4:	468c      	mov	ip, r1
 8002bb6:	2e00      	cmp	r6, #0
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x23c>
 8002bba:	e15e      	b.n	8002e7a <__aeabi_dsub+0x4fa>
 8002bbc:	494a      	ldr	r1, [pc, #296]	; (8002ce8 <__aeabi_dsub+0x368>)
 8002bbe:	428a      	cmp	r2, r1
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x244>
 8002bc2:	e1be      	b.n	8002f42 <__aeabi_dsub+0x5c2>
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	464c      	mov	r4, r9
 8002bc8:	0409      	lsls	r1, r1, #16
 8002bca:	430c      	orrs	r4, r1
 8002bcc:	46a1      	mov	r9, r4
 8002bce:	4661      	mov	r1, ip
 8002bd0:	2938      	cmp	r1, #56	; 0x38
 8002bd2:	dd00      	ble.n	8002bd6 <__aeabi_dsub+0x256>
 8002bd4:	e1ba      	b.n	8002f4c <__aeabi_dsub+0x5cc>
 8002bd6:	291f      	cmp	r1, #31
 8002bd8:	dd00      	ble.n	8002bdc <__aeabi_dsub+0x25c>
 8002bda:	e227      	b.n	800302c <__aeabi_dsub+0x6ac>
 8002bdc:	2420      	movs	r4, #32
 8002bde:	1a64      	subs	r4, r4, r1
 8002be0:	4649      	mov	r1, r9
 8002be2:	40a1      	lsls	r1, r4
 8002be4:	001e      	movs	r6, r3
 8002be6:	4688      	mov	r8, r1
 8002be8:	4661      	mov	r1, ip
 8002bea:	40a3      	lsls	r3, r4
 8002bec:	40ce      	lsrs	r6, r1
 8002bee:	4641      	mov	r1, r8
 8002bf0:	1e5c      	subs	r4, r3, #1
 8002bf2:	41a3      	sbcs	r3, r4
 8002bf4:	4331      	orrs	r1, r6
 8002bf6:	4319      	orrs	r1, r3
 8002bf8:	000c      	movs	r4, r1
 8002bfa:	4663      	mov	r3, ip
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	40d9      	lsrs	r1, r3
 8002c00:	187f      	adds	r7, r7, r1
 8002c02:	1824      	adds	r4, r4, r0
 8002c04:	4284      	cmp	r4, r0
 8002c06:	419b      	sbcs	r3, r3
 8002c08:	425b      	negs	r3, r3
 8002c0a:	469a      	mov	sl, r3
 8002c0c:	0016      	movs	r6, r2
 8002c0e:	44ba      	add	sl, r7
 8002c10:	e05d      	b.n	8002cce <__aeabi_dsub+0x34e>
 8002c12:	4c38      	ldr	r4, [pc, #224]	; (8002cf4 <__aeabi_dsub+0x374>)
 8002c14:	1c72      	adds	r2, r6, #1
 8002c16:	4222      	tst	r2, r4
 8002c18:	d000      	beq.n	8002c1c <__aeabi_dsub+0x29c>
 8002c1a:	e0df      	b.n	8002ddc <__aeabi_dsub+0x45c>
 8002c1c:	464a      	mov	r2, r9
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	2e00      	cmp	r6, #0
 8002c22:	d000      	beq.n	8002c26 <__aeabi_dsub+0x2a6>
 8002c24:	e15c      	b.n	8002ee0 <__aeabi_dsub+0x560>
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d100      	bne.n	8002c2c <__aeabi_dsub+0x2ac>
 8002c2a:	e1cf      	b.n	8002fcc <__aeabi_dsub+0x64c>
 8002c2c:	003a      	movs	r2, r7
 8002c2e:	4302      	orrs	r2, r0
 8002c30:	d100      	bne.n	8002c34 <__aeabi_dsub+0x2b4>
 8002c32:	e17f      	b.n	8002f34 <__aeabi_dsub+0x5b4>
 8002c34:	1a1c      	subs	r4, r3, r0
 8002c36:	464a      	mov	r2, r9
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	4189      	sbcs	r1, r1
 8002c3c:	1bd2      	subs	r2, r2, r7
 8002c3e:	4249      	negs	r1, r1
 8002c40:	1a52      	subs	r2, r2, r1
 8002c42:	4692      	mov	sl, r2
 8002c44:	0212      	lsls	r2, r2, #8
 8002c46:	d400      	bmi.n	8002c4a <__aeabi_dsub+0x2ca>
 8002c48:	e20a      	b.n	8003060 <__aeabi_dsub+0x6e0>
 8002c4a:	1ac4      	subs	r4, r0, r3
 8002c4c:	42a0      	cmp	r0, r4
 8002c4e:	4180      	sbcs	r0, r0
 8002c50:	464b      	mov	r3, r9
 8002c52:	4240      	negs	r0, r0
 8002c54:	1aff      	subs	r7, r7, r3
 8002c56:	1a3b      	subs	r3, r7, r0
 8002c58:	469a      	mov	sl, r3
 8002c5a:	465d      	mov	r5, fp
 8002c5c:	e71a      	b.n	8002a94 <__aeabi_dsub+0x114>
 8002c5e:	003a      	movs	r2, r7
 8002c60:	4302      	orrs	r2, r0
 8002c62:	d073      	beq.n	8002d4c <__aeabi_dsub+0x3cc>
 8002c64:	0022      	movs	r2, r4
 8002c66:	3a01      	subs	r2, #1
 8002c68:	2c01      	cmp	r4, #1
 8002c6a:	d100      	bne.n	8002c6e <__aeabi_dsub+0x2ee>
 8002c6c:	e0cb      	b.n	8002e06 <__aeabi_dsub+0x486>
 8002c6e:	4554      	cmp	r4, sl
 8002c70:	d042      	beq.n	8002cf8 <__aeabi_dsub+0x378>
 8002c72:	4694      	mov	ip, r2
 8002c74:	e748      	b.n	8002b08 <__aeabi_dsub+0x188>
 8002c76:	0010      	movs	r0, r2
 8002c78:	3b1f      	subs	r3, #31
 8002c7a:	40d8      	lsrs	r0, r3
 8002c7c:	2920      	cmp	r1, #32
 8002c7e:	d003      	beq.n	8002c88 <__aeabi_dsub+0x308>
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	1a5b      	subs	r3, r3, r1
 8002c84:	409a      	lsls	r2, r3
 8002c86:	4314      	orrs	r4, r2
 8002c88:	1e63      	subs	r3, r4, #1
 8002c8a:	419c      	sbcs	r4, r3
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2600      	movs	r6, #0
 8002c90:	469a      	mov	sl, r3
 8002c92:	4304      	orrs	r4, r0
 8002c94:	0763      	lsls	r3, r4, #29
 8002c96:	d000      	beq.n	8002c9a <__aeabi_dsub+0x31a>
 8002c98:	e6fe      	b.n	8002a98 <__aeabi_dsub+0x118>
 8002c9a:	4652      	mov	r2, sl
 8002c9c:	08e3      	lsrs	r3, r4, #3
 8002c9e:	0752      	lsls	r2, r2, #29
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	4652      	mov	r2, sl
 8002ca4:	46b4      	mov	ip, r6
 8002ca6:	08d2      	lsrs	r2, r2, #3
 8002ca8:	490f      	ldr	r1, [pc, #60]	; (8002ce8 <__aeabi_dsub+0x368>)
 8002caa:	458c      	cmp	ip, r1
 8002cac:	d02a      	beq.n	8002d04 <__aeabi_dsub+0x384>
 8002cae:	0312      	lsls	r2, r2, #12
 8002cb0:	0b14      	lsrs	r4, r2, #12
 8002cb2:	4662      	mov	r2, ip
 8002cb4:	0552      	lsls	r2, r2, #21
 8002cb6:	0d52      	lsrs	r2, r2, #21
 8002cb8:	e70c      	b.n	8002ad4 <__aeabi_dsub+0x154>
 8002cba:	003c      	movs	r4, r7
 8002cbc:	4304      	orrs	r4, r0
 8002cbe:	1e62      	subs	r2, r4, #1
 8002cc0:	4194      	sbcs	r4, r2
 8002cc2:	18e4      	adds	r4, r4, r3
 8002cc4:	429c      	cmp	r4, r3
 8002cc6:	4192      	sbcs	r2, r2
 8002cc8:	4252      	negs	r2, r2
 8002cca:	444a      	add	r2, r9
 8002ccc:	4692      	mov	sl, r2
 8002cce:	4653      	mov	r3, sl
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	d5df      	bpl.n	8002c94 <__aeabi_dsub+0x314>
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <__aeabi_dsub+0x368>)
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	429e      	cmp	r6, r3
 8002cda:	d000      	beq.n	8002cde <__aeabi_dsub+0x35e>
 8002cdc:	e0a0      	b.n	8002e20 <__aeabi_dsub+0x4a0>
 8002cde:	0032      	movs	r2, r6
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e6f6      	b.n	8002ad4 <__aeabi_dsub+0x154>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	000007ff 	.word	0x000007ff
 8002cec:	ff7fffff 	.word	0xff7fffff
 8002cf0:	fffff801 	.word	0xfffff801
 8002cf4:	000007fe 	.word	0x000007fe
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	464a      	mov	r2, r9
 8002cfc:	0752      	lsls	r2, r2, #29
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	464a      	mov	r2, r9
 8002d02:	08d2      	lsrs	r2, r2, #3
 8002d04:	0019      	movs	r1, r3
 8002d06:	4311      	orrs	r1, r2
 8002d08:	d100      	bne.n	8002d0c <__aeabi_dsub+0x38c>
 8002d0a:	e1b5      	b.n	8003078 <__aeabi_dsub+0x6f8>
 8002d0c:	2480      	movs	r4, #128	; 0x80
 8002d0e:	0324      	lsls	r4, r4, #12
 8002d10:	4314      	orrs	r4, r2
 8002d12:	0324      	lsls	r4, r4, #12
 8002d14:	4ad5      	ldr	r2, [pc, #852]	; (800306c <__aeabi_dsub+0x6ec>)
 8002d16:	0b24      	lsrs	r4, r4, #12
 8002d18:	e6dc      	b.n	8002ad4 <__aeabi_dsub+0x154>
 8002d1a:	0020      	movs	r0, r4
 8002d1c:	f000 fa3e 	bl	800319c <__clzsi2>
 8002d20:	0003      	movs	r3, r0
 8002d22:	3318      	adds	r3, #24
 8002d24:	2b1f      	cmp	r3, #31
 8002d26:	dc00      	bgt.n	8002d2a <__aeabi_dsub+0x3aa>
 8002d28:	e695      	b.n	8002a56 <__aeabi_dsub+0xd6>
 8002d2a:	0022      	movs	r2, r4
 8002d2c:	3808      	subs	r0, #8
 8002d2e:	4082      	lsls	r2, r0
 8002d30:	2400      	movs	r4, #0
 8002d32:	429e      	cmp	r6, r3
 8002d34:	dc00      	bgt.n	8002d38 <__aeabi_dsub+0x3b8>
 8002d36:	e69a      	b.n	8002a6e <__aeabi_dsub+0xee>
 8002d38:	1af6      	subs	r6, r6, r3
 8002d3a:	4bcd      	ldr	r3, [pc, #820]	; (8003070 <__aeabi_dsub+0x6f0>)
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	4692      	mov	sl, r2
 8002d40:	e6a8      	b.n	8002a94 <__aeabi_dsub+0x114>
 8002d42:	003c      	movs	r4, r7
 8002d44:	4304      	orrs	r4, r0
 8002d46:	1e62      	subs	r2, r4, #1
 8002d48:	4194      	sbcs	r4, r2
 8002d4a:	e66c      	b.n	8002a26 <__aeabi_dsub+0xa6>
 8002d4c:	464a      	mov	r2, r9
 8002d4e:	08db      	lsrs	r3, r3, #3
 8002d50:	0752      	lsls	r2, r2, #29
 8002d52:	4313      	orrs	r3, r2
 8002d54:	464a      	mov	r2, r9
 8002d56:	08d2      	lsrs	r2, r2, #3
 8002d58:	e7a6      	b.n	8002ca8 <__aeabi_dsub+0x328>
 8002d5a:	4cc6      	ldr	r4, [pc, #792]	; (8003074 <__aeabi_dsub+0x6f4>)
 8002d5c:	1c72      	adds	r2, r6, #1
 8002d5e:	4222      	tst	r2, r4
 8002d60:	d000      	beq.n	8002d64 <__aeabi_dsub+0x3e4>
 8002d62:	e0ac      	b.n	8002ebe <__aeabi_dsub+0x53e>
 8002d64:	464a      	mov	r2, r9
 8002d66:	431a      	orrs	r2, r3
 8002d68:	2e00      	cmp	r6, #0
 8002d6a:	d000      	beq.n	8002d6e <__aeabi_dsub+0x3ee>
 8002d6c:	e105      	b.n	8002f7a <__aeabi_dsub+0x5fa>
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d100      	bne.n	8002d74 <__aeabi_dsub+0x3f4>
 8002d72:	e156      	b.n	8003022 <__aeabi_dsub+0x6a2>
 8002d74:	003a      	movs	r2, r7
 8002d76:	4302      	orrs	r2, r0
 8002d78:	d100      	bne.n	8002d7c <__aeabi_dsub+0x3fc>
 8002d7a:	e0db      	b.n	8002f34 <__aeabi_dsub+0x5b4>
 8002d7c:	181c      	adds	r4, r3, r0
 8002d7e:	429c      	cmp	r4, r3
 8002d80:	419b      	sbcs	r3, r3
 8002d82:	444f      	add	r7, r9
 8002d84:	46ba      	mov	sl, r7
 8002d86:	425b      	negs	r3, r3
 8002d88:	449a      	add	sl, r3
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	d400      	bmi.n	8002d92 <__aeabi_dsub+0x412>
 8002d90:	e780      	b.n	8002c94 <__aeabi_dsub+0x314>
 8002d92:	4652      	mov	r2, sl
 8002d94:	4bb6      	ldr	r3, [pc, #728]	; (8003070 <__aeabi_dsub+0x6f0>)
 8002d96:	2601      	movs	r6, #1
 8002d98:	401a      	ands	r2, r3
 8002d9a:	4692      	mov	sl, r2
 8002d9c:	e77a      	b.n	8002c94 <__aeabi_dsub+0x314>
 8002d9e:	4cb3      	ldr	r4, [pc, #716]	; (800306c <__aeabi_dsub+0x6ec>)
 8002da0:	42a2      	cmp	r2, r4
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x426>
 8002da4:	e0c0      	b.n	8002f28 <__aeabi_dsub+0x5a8>
 8002da6:	2480      	movs	r4, #128	; 0x80
 8002da8:	464d      	mov	r5, r9
 8002daa:	0424      	lsls	r4, r4, #16
 8002dac:	4325      	orrs	r5, r4
 8002dae:	46a9      	mov	r9, r5
 8002db0:	4664      	mov	r4, ip
 8002db2:	2c38      	cmp	r4, #56	; 0x38
 8002db4:	dc53      	bgt.n	8002e5e <__aeabi_dsub+0x4de>
 8002db6:	4661      	mov	r1, ip
 8002db8:	2c1f      	cmp	r4, #31
 8002dba:	dd00      	ble.n	8002dbe <__aeabi_dsub+0x43e>
 8002dbc:	e0cd      	b.n	8002f5a <__aeabi_dsub+0x5da>
 8002dbe:	2520      	movs	r5, #32
 8002dc0:	001e      	movs	r6, r3
 8002dc2:	1b2d      	subs	r5, r5, r4
 8002dc4:	464c      	mov	r4, r9
 8002dc6:	40ab      	lsls	r3, r5
 8002dc8:	40ac      	lsls	r4, r5
 8002dca:	40ce      	lsrs	r6, r1
 8002dcc:	1e5d      	subs	r5, r3, #1
 8002dce:	41ab      	sbcs	r3, r5
 8002dd0:	4334      	orrs	r4, r6
 8002dd2:	4323      	orrs	r3, r4
 8002dd4:	464c      	mov	r4, r9
 8002dd6:	40cc      	lsrs	r4, r1
 8002dd8:	1b3f      	subs	r7, r7, r4
 8002dda:	e045      	b.n	8002e68 <__aeabi_dsub+0x4e8>
 8002ddc:	464a      	mov	r2, r9
 8002dde:	1a1c      	subs	r4, r3, r0
 8002de0:	1bd1      	subs	r1, r2, r7
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	4192      	sbcs	r2, r2
 8002de6:	4252      	negs	r2, r2
 8002de8:	4692      	mov	sl, r2
 8002dea:	000a      	movs	r2, r1
 8002dec:	4651      	mov	r1, sl
 8002dee:	1a52      	subs	r2, r2, r1
 8002df0:	4692      	mov	sl, r2
 8002df2:	0212      	lsls	r2, r2, #8
 8002df4:	d500      	bpl.n	8002df8 <__aeabi_dsub+0x478>
 8002df6:	e083      	b.n	8002f00 <__aeabi_dsub+0x580>
 8002df8:	4653      	mov	r3, sl
 8002dfa:	4323      	orrs	r3, r4
 8002dfc:	d000      	beq.n	8002e00 <__aeabi_dsub+0x480>
 8002dfe:	e621      	b.n	8002a44 <__aeabi_dsub+0xc4>
 8002e00:	2200      	movs	r2, #0
 8002e02:	2500      	movs	r5, #0
 8002e04:	e753      	b.n	8002cae <__aeabi_dsub+0x32e>
 8002e06:	181c      	adds	r4, r3, r0
 8002e08:	429c      	cmp	r4, r3
 8002e0a:	419b      	sbcs	r3, r3
 8002e0c:	444f      	add	r7, r9
 8002e0e:	46ba      	mov	sl, r7
 8002e10:	425b      	negs	r3, r3
 8002e12:	449a      	add	sl, r3
 8002e14:	4653      	mov	r3, sl
 8002e16:	2601      	movs	r6, #1
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	d400      	bmi.n	8002e1e <__aeabi_dsub+0x49e>
 8002e1c:	e73a      	b.n	8002c94 <__aeabi_dsub+0x314>
 8002e1e:	2602      	movs	r6, #2
 8002e20:	4652      	mov	r2, sl
 8002e22:	4b93      	ldr	r3, [pc, #588]	; (8003070 <__aeabi_dsub+0x6f0>)
 8002e24:	2101      	movs	r1, #1
 8002e26:	401a      	ands	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	4021      	ands	r1, r4
 8002e2c:	0862      	lsrs	r2, r4, #1
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	07dc      	lsls	r4, r3, #31
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	469a      	mov	sl, r3
 8002e36:	4314      	orrs	r4, r2
 8002e38:	e62c      	b.n	8002a94 <__aeabi_dsub+0x114>
 8002e3a:	0039      	movs	r1, r7
 8002e3c:	3a20      	subs	r2, #32
 8002e3e:	40d1      	lsrs	r1, r2
 8002e40:	4662      	mov	r2, ip
 8002e42:	2a20      	cmp	r2, #32
 8002e44:	d006      	beq.n	8002e54 <__aeabi_dsub+0x4d4>
 8002e46:	4664      	mov	r4, ip
 8002e48:	2240      	movs	r2, #64	; 0x40
 8002e4a:	1b12      	subs	r2, r2, r4
 8002e4c:	003c      	movs	r4, r7
 8002e4e:	4094      	lsls	r4, r2
 8002e50:	4304      	orrs	r4, r0
 8002e52:	9401      	str	r4, [sp, #4]
 8002e54:	9c01      	ldr	r4, [sp, #4]
 8002e56:	1e62      	subs	r2, r4, #1
 8002e58:	4194      	sbcs	r4, r2
 8002e5a:	430c      	orrs	r4, r1
 8002e5c:	e5e3      	b.n	8002a26 <__aeabi_dsub+0xa6>
 8002e5e:	4649      	mov	r1, r9
 8002e60:	4319      	orrs	r1, r3
 8002e62:	000b      	movs	r3, r1
 8002e64:	1e5c      	subs	r4, r3, #1
 8002e66:	41a3      	sbcs	r3, r4
 8002e68:	1ac4      	subs	r4, r0, r3
 8002e6a:	42a0      	cmp	r0, r4
 8002e6c:	419b      	sbcs	r3, r3
 8002e6e:	425b      	negs	r3, r3
 8002e70:	1afb      	subs	r3, r7, r3
 8002e72:	469a      	mov	sl, r3
 8002e74:	465d      	mov	r5, fp
 8002e76:	0016      	movs	r6, r2
 8002e78:	e5dc      	b.n	8002a34 <__aeabi_dsub+0xb4>
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	4319      	orrs	r1, r3
 8002e7e:	d100      	bne.n	8002e82 <__aeabi_dsub+0x502>
 8002e80:	e0ae      	b.n	8002fe0 <__aeabi_dsub+0x660>
 8002e82:	4661      	mov	r1, ip
 8002e84:	4664      	mov	r4, ip
 8002e86:	3901      	subs	r1, #1
 8002e88:	2c01      	cmp	r4, #1
 8002e8a:	d100      	bne.n	8002e8e <__aeabi_dsub+0x50e>
 8002e8c:	e0e0      	b.n	8003050 <__aeabi_dsub+0x6d0>
 8002e8e:	4c77      	ldr	r4, [pc, #476]	; (800306c <__aeabi_dsub+0x6ec>)
 8002e90:	45a4      	cmp	ip, r4
 8002e92:	d056      	beq.n	8002f42 <__aeabi_dsub+0x5c2>
 8002e94:	468c      	mov	ip, r1
 8002e96:	e69a      	b.n	8002bce <__aeabi_dsub+0x24e>
 8002e98:	4661      	mov	r1, ip
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	003c      	movs	r4, r7
 8002e9e:	1a52      	subs	r2, r2, r1
 8002ea0:	4094      	lsls	r4, r2
 8002ea2:	0001      	movs	r1, r0
 8002ea4:	4090      	lsls	r0, r2
 8002ea6:	46a0      	mov	r8, r4
 8002ea8:	4664      	mov	r4, ip
 8002eaa:	1e42      	subs	r2, r0, #1
 8002eac:	4190      	sbcs	r0, r2
 8002eae:	4662      	mov	r2, ip
 8002eb0:	40e1      	lsrs	r1, r4
 8002eb2:	4644      	mov	r4, r8
 8002eb4:	40d7      	lsrs	r7, r2
 8002eb6:	430c      	orrs	r4, r1
 8002eb8:	4304      	orrs	r4, r0
 8002eba:	44b9      	add	r9, r7
 8002ebc:	e701      	b.n	8002cc2 <__aeabi_dsub+0x342>
 8002ebe:	496b      	ldr	r1, [pc, #428]	; (800306c <__aeabi_dsub+0x6ec>)
 8002ec0:	428a      	cmp	r2, r1
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x546>
 8002ec4:	e70c      	b.n	8002ce0 <__aeabi_dsub+0x360>
 8002ec6:	1818      	adds	r0, r3, r0
 8002ec8:	4298      	cmp	r0, r3
 8002eca:	419b      	sbcs	r3, r3
 8002ecc:	444f      	add	r7, r9
 8002ece:	425b      	negs	r3, r3
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	07dc      	lsls	r4, r3, #31
 8002ed4:	0840      	lsrs	r0, r0, #1
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	469a      	mov	sl, r3
 8002eda:	0016      	movs	r6, r2
 8002edc:	4304      	orrs	r4, r0
 8002ede:	e6d9      	b.n	8002c94 <__aeabi_dsub+0x314>
 8002ee0:	2a00      	cmp	r2, #0
 8002ee2:	d000      	beq.n	8002ee6 <__aeabi_dsub+0x566>
 8002ee4:	e081      	b.n	8002fea <__aeabi_dsub+0x66a>
 8002ee6:	003b      	movs	r3, r7
 8002ee8:	4303      	orrs	r3, r0
 8002eea:	d11d      	bne.n	8002f28 <__aeabi_dsub+0x5a8>
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	2500      	movs	r5, #0
 8002ef0:	0312      	lsls	r2, r2, #12
 8002ef2:	e70b      	b.n	8002d0c <__aeabi_dsub+0x38c>
 8002ef4:	08c0      	lsrs	r0, r0, #3
 8002ef6:	077b      	lsls	r3, r7, #29
 8002ef8:	465d      	mov	r5, fp
 8002efa:	4303      	orrs	r3, r0
 8002efc:	08fa      	lsrs	r2, r7, #3
 8002efe:	e6d3      	b.n	8002ca8 <__aeabi_dsub+0x328>
 8002f00:	1ac4      	subs	r4, r0, r3
 8002f02:	42a0      	cmp	r0, r4
 8002f04:	4180      	sbcs	r0, r0
 8002f06:	464b      	mov	r3, r9
 8002f08:	4240      	negs	r0, r0
 8002f0a:	1aff      	subs	r7, r7, r3
 8002f0c:	1a3b      	subs	r3, r7, r0
 8002f0e:	469a      	mov	sl, r3
 8002f10:	465d      	mov	r5, fp
 8002f12:	e597      	b.n	8002a44 <__aeabi_dsub+0xc4>
 8002f14:	1a1c      	subs	r4, r3, r0
 8002f16:	464a      	mov	r2, r9
 8002f18:	42a3      	cmp	r3, r4
 8002f1a:	419b      	sbcs	r3, r3
 8002f1c:	1bd7      	subs	r7, r2, r7
 8002f1e:	425b      	negs	r3, r3
 8002f20:	1afb      	subs	r3, r7, r3
 8002f22:	469a      	mov	sl, r3
 8002f24:	2601      	movs	r6, #1
 8002f26:	e585      	b.n	8002a34 <__aeabi_dsub+0xb4>
 8002f28:	08c0      	lsrs	r0, r0, #3
 8002f2a:	077b      	lsls	r3, r7, #29
 8002f2c:	465d      	mov	r5, fp
 8002f2e:	4303      	orrs	r3, r0
 8002f30:	08fa      	lsrs	r2, r7, #3
 8002f32:	e6e7      	b.n	8002d04 <__aeabi_dsub+0x384>
 8002f34:	464a      	mov	r2, r9
 8002f36:	08db      	lsrs	r3, r3, #3
 8002f38:	0752      	lsls	r2, r2, #29
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	464a      	mov	r2, r9
 8002f3e:	08d2      	lsrs	r2, r2, #3
 8002f40:	e6b5      	b.n	8002cae <__aeabi_dsub+0x32e>
 8002f42:	08c0      	lsrs	r0, r0, #3
 8002f44:	077b      	lsls	r3, r7, #29
 8002f46:	4303      	orrs	r3, r0
 8002f48:	08fa      	lsrs	r2, r7, #3
 8002f4a:	e6db      	b.n	8002d04 <__aeabi_dsub+0x384>
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	4319      	orrs	r1, r3
 8002f50:	000b      	movs	r3, r1
 8002f52:	1e59      	subs	r1, r3, #1
 8002f54:	418b      	sbcs	r3, r1
 8002f56:	001c      	movs	r4, r3
 8002f58:	e653      	b.n	8002c02 <__aeabi_dsub+0x282>
 8002f5a:	464d      	mov	r5, r9
 8002f5c:	3c20      	subs	r4, #32
 8002f5e:	40e5      	lsrs	r5, r4
 8002f60:	2920      	cmp	r1, #32
 8002f62:	d005      	beq.n	8002f70 <__aeabi_dsub+0x5f0>
 8002f64:	2440      	movs	r4, #64	; 0x40
 8002f66:	1a64      	subs	r4, r4, r1
 8002f68:	4649      	mov	r1, r9
 8002f6a:	40a1      	lsls	r1, r4
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	4698      	mov	r8, r3
 8002f70:	4643      	mov	r3, r8
 8002f72:	1e5c      	subs	r4, r3, #1
 8002f74:	41a3      	sbcs	r3, r4
 8002f76:	432b      	orrs	r3, r5
 8002f78:	e776      	b.n	8002e68 <__aeabi_dsub+0x4e8>
 8002f7a:	2a00      	cmp	r2, #0
 8002f7c:	d0e1      	beq.n	8002f42 <__aeabi_dsub+0x5c2>
 8002f7e:	003a      	movs	r2, r7
 8002f80:	08db      	lsrs	r3, r3, #3
 8002f82:	4302      	orrs	r2, r0
 8002f84:	d100      	bne.n	8002f88 <__aeabi_dsub+0x608>
 8002f86:	e6b8      	b.n	8002cfa <__aeabi_dsub+0x37a>
 8002f88:	464a      	mov	r2, r9
 8002f8a:	0752      	lsls	r2, r2, #29
 8002f8c:	2480      	movs	r4, #128	; 0x80
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	464a      	mov	r2, r9
 8002f92:	0324      	lsls	r4, r4, #12
 8002f94:	08d2      	lsrs	r2, r2, #3
 8002f96:	4222      	tst	r2, r4
 8002f98:	d007      	beq.n	8002faa <__aeabi_dsub+0x62a>
 8002f9a:	08fe      	lsrs	r6, r7, #3
 8002f9c:	4226      	tst	r6, r4
 8002f9e:	d104      	bne.n	8002faa <__aeabi_dsub+0x62a>
 8002fa0:	465d      	mov	r5, fp
 8002fa2:	0032      	movs	r2, r6
 8002fa4:	08c3      	lsrs	r3, r0, #3
 8002fa6:	077f      	lsls	r7, r7, #29
 8002fa8:	433b      	orrs	r3, r7
 8002faa:	0f59      	lsrs	r1, r3, #29
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	0749      	lsls	r1, r1, #29
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	e6a6      	b.n	8002d04 <__aeabi_dsub+0x384>
 8002fb6:	1ac4      	subs	r4, r0, r3
 8002fb8:	42a0      	cmp	r0, r4
 8002fba:	4180      	sbcs	r0, r0
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	4240      	negs	r0, r0
 8002fc0:	1aff      	subs	r7, r7, r3
 8002fc2:	1a3b      	subs	r3, r7, r0
 8002fc4:	469a      	mov	sl, r3
 8002fc6:	465d      	mov	r5, fp
 8002fc8:	2601      	movs	r6, #1
 8002fca:	e533      	b.n	8002a34 <__aeabi_dsub+0xb4>
 8002fcc:	003b      	movs	r3, r7
 8002fce:	4303      	orrs	r3, r0
 8002fd0:	d100      	bne.n	8002fd4 <__aeabi_dsub+0x654>
 8002fd2:	e715      	b.n	8002e00 <__aeabi_dsub+0x480>
 8002fd4:	08c0      	lsrs	r0, r0, #3
 8002fd6:	077b      	lsls	r3, r7, #29
 8002fd8:	465d      	mov	r5, fp
 8002fda:	4303      	orrs	r3, r0
 8002fdc:	08fa      	lsrs	r2, r7, #3
 8002fde:	e666      	b.n	8002cae <__aeabi_dsub+0x32e>
 8002fe0:	08c0      	lsrs	r0, r0, #3
 8002fe2:	077b      	lsls	r3, r7, #29
 8002fe4:	4303      	orrs	r3, r0
 8002fe6:	08fa      	lsrs	r2, r7, #3
 8002fe8:	e65e      	b.n	8002ca8 <__aeabi_dsub+0x328>
 8002fea:	003a      	movs	r2, r7
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	4302      	orrs	r2, r0
 8002ff0:	d100      	bne.n	8002ff4 <__aeabi_dsub+0x674>
 8002ff2:	e682      	b.n	8002cfa <__aeabi_dsub+0x37a>
 8002ff4:	464a      	mov	r2, r9
 8002ff6:	0752      	lsls	r2, r2, #29
 8002ff8:	2480      	movs	r4, #128	; 0x80
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	464a      	mov	r2, r9
 8002ffe:	0324      	lsls	r4, r4, #12
 8003000:	08d2      	lsrs	r2, r2, #3
 8003002:	4222      	tst	r2, r4
 8003004:	d007      	beq.n	8003016 <__aeabi_dsub+0x696>
 8003006:	08fe      	lsrs	r6, r7, #3
 8003008:	4226      	tst	r6, r4
 800300a:	d104      	bne.n	8003016 <__aeabi_dsub+0x696>
 800300c:	465d      	mov	r5, fp
 800300e:	0032      	movs	r2, r6
 8003010:	08c3      	lsrs	r3, r0, #3
 8003012:	077f      	lsls	r7, r7, #29
 8003014:	433b      	orrs	r3, r7
 8003016:	0f59      	lsrs	r1, r3, #29
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	08db      	lsrs	r3, r3, #3
 800301c:	0749      	lsls	r1, r1, #29
 800301e:	430b      	orrs	r3, r1
 8003020:	e670      	b.n	8002d04 <__aeabi_dsub+0x384>
 8003022:	08c0      	lsrs	r0, r0, #3
 8003024:	077b      	lsls	r3, r7, #29
 8003026:	4303      	orrs	r3, r0
 8003028:	08fa      	lsrs	r2, r7, #3
 800302a:	e640      	b.n	8002cae <__aeabi_dsub+0x32e>
 800302c:	464c      	mov	r4, r9
 800302e:	3920      	subs	r1, #32
 8003030:	40cc      	lsrs	r4, r1
 8003032:	4661      	mov	r1, ip
 8003034:	2920      	cmp	r1, #32
 8003036:	d006      	beq.n	8003046 <__aeabi_dsub+0x6c6>
 8003038:	4666      	mov	r6, ip
 800303a:	2140      	movs	r1, #64	; 0x40
 800303c:	1b89      	subs	r1, r1, r6
 800303e:	464e      	mov	r6, r9
 8003040:	408e      	lsls	r6, r1
 8003042:	4333      	orrs	r3, r6
 8003044:	4698      	mov	r8, r3
 8003046:	4643      	mov	r3, r8
 8003048:	1e59      	subs	r1, r3, #1
 800304a:	418b      	sbcs	r3, r1
 800304c:	431c      	orrs	r4, r3
 800304e:	e5d8      	b.n	8002c02 <__aeabi_dsub+0x282>
 8003050:	181c      	adds	r4, r3, r0
 8003052:	4284      	cmp	r4, r0
 8003054:	4180      	sbcs	r0, r0
 8003056:	444f      	add	r7, r9
 8003058:	46ba      	mov	sl, r7
 800305a:	4240      	negs	r0, r0
 800305c:	4482      	add	sl, r0
 800305e:	e6d9      	b.n	8002e14 <__aeabi_dsub+0x494>
 8003060:	4653      	mov	r3, sl
 8003062:	4323      	orrs	r3, r4
 8003064:	d100      	bne.n	8003068 <__aeabi_dsub+0x6e8>
 8003066:	e6cb      	b.n	8002e00 <__aeabi_dsub+0x480>
 8003068:	e614      	b.n	8002c94 <__aeabi_dsub+0x314>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	000007ff 	.word	0x000007ff
 8003070:	ff7fffff 	.word	0xff7fffff
 8003074:	000007fe 	.word	0x000007fe
 8003078:	2300      	movs	r3, #0
 800307a:	4a01      	ldr	r2, [pc, #4]	; (8003080 <__aeabi_dsub+0x700>)
 800307c:	001c      	movs	r4, r3
 800307e:	e529      	b.n	8002ad4 <__aeabi_dsub+0x154>
 8003080:	000007ff 	.word	0x000007ff

08003084 <__aeabi_d2iz>:
 8003084:	000a      	movs	r2, r1
 8003086:	b530      	push	{r4, r5, lr}
 8003088:	4c13      	ldr	r4, [pc, #76]	; (80030d8 <__aeabi_d2iz+0x54>)
 800308a:	0053      	lsls	r3, r2, #1
 800308c:	0309      	lsls	r1, r1, #12
 800308e:	0005      	movs	r5, r0
 8003090:	0b09      	lsrs	r1, r1, #12
 8003092:	2000      	movs	r0, #0
 8003094:	0d5b      	lsrs	r3, r3, #21
 8003096:	0fd2      	lsrs	r2, r2, #31
 8003098:	42a3      	cmp	r3, r4
 800309a:	dd04      	ble.n	80030a6 <__aeabi_d2iz+0x22>
 800309c:	480f      	ldr	r0, [pc, #60]	; (80030dc <__aeabi_d2iz+0x58>)
 800309e:	4283      	cmp	r3, r0
 80030a0:	dd02      	ble.n	80030a8 <__aeabi_d2iz+0x24>
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <__aeabi_d2iz+0x5c>)
 80030a4:	18d0      	adds	r0, r2, r3
 80030a6:	bd30      	pop	{r4, r5, pc}
 80030a8:	2080      	movs	r0, #128	; 0x80
 80030aa:	0340      	lsls	r0, r0, #13
 80030ac:	4301      	orrs	r1, r0
 80030ae:	480d      	ldr	r0, [pc, #52]	; (80030e4 <__aeabi_d2iz+0x60>)
 80030b0:	1ac0      	subs	r0, r0, r3
 80030b2:	281f      	cmp	r0, #31
 80030b4:	dd08      	ble.n	80030c8 <__aeabi_d2iz+0x44>
 80030b6:	480c      	ldr	r0, [pc, #48]	; (80030e8 <__aeabi_d2iz+0x64>)
 80030b8:	1ac3      	subs	r3, r0, r3
 80030ba:	40d9      	lsrs	r1, r3
 80030bc:	000b      	movs	r3, r1
 80030be:	4258      	negs	r0, r3
 80030c0:	2a00      	cmp	r2, #0
 80030c2:	d1f0      	bne.n	80030a6 <__aeabi_d2iz+0x22>
 80030c4:	0018      	movs	r0, r3
 80030c6:	e7ee      	b.n	80030a6 <__aeabi_d2iz+0x22>
 80030c8:	4c08      	ldr	r4, [pc, #32]	; (80030ec <__aeabi_d2iz+0x68>)
 80030ca:	40c5      	lsrs	r5, r0
 80030cc:	46a4      	mov	ip, r4
 80030ce:	4463      	add	r3, ip
 80030d0:	4099      	lsls	r1, r3
 80030d2:	000b      	movs	r3, r1
 80030d4:	432b      	orrs	r3, r5
 80030d6:	e7f2      	b.n	80030be <__aeabi_d2iz+0x3a>
 80030d8:	000003fe 	.word	0x000003fe
 80030dc:	0000041d 	.word	0x0000041d
 80030e0:	7fffffff 	.word	0x7fffffff
 80030e4:	00000433 	.word	0x00000433
 80030e8:	00000413 	.word	0x00000413
 80030ec:	fffffbed 	.word	0xfffffbed

080030f0 <__aeabi_i2d>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d016      	beq.n	8003124 <__aeabi_i2d+0x34>
 80030f6:	17c3      	asrs	r3, r0, #31
 80030f8:	18c5      	adds	r5, r0, r3
 80030fa:	405d      	eors	r5, r3
 80030fc:	0fc4      	lsrs	r4, r0, #31
 80030fe:	0028      	movs	r0, r5
 8003100:	f000 f84c 	bl	800319c <__clzsi2>
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <__aeabi_i2d+0x5c>)
 8003106:	1a1b      	subs	r3, r3, r0
 8003108:	280a      	cmp	r0, #10
 800310a:	dc16      	bgt.n	800313a <__aeabi_i2d+0x4a>
 800310c:	0002      	movs	r2, r0
 800310e:	002e      	movs	r6, r5
 8003110:	3215      	adds	r2, #21
 8003112:	4096      	lsls	r6, r2
 8003114:	220b      	movs	r2, #11
 8003116:	1a12      	subs	r2, r2, r0
 8003118:	40d5      	lsrs	r5, r2
 800311a:	055b      	lsls	r3, r3, #21
 800311c:	032d      	lsls	r5, r5, #12
 800311e:	0b2d      	lsrs	r5, r5, #12
 8003120:	0d5b      	lsrs	r3, r3, #21
 8003122:	e003      	b.n	800312c <__aeabi_i2d+0x3c>
 8003124:	2400      	movs	r4, #0
 8003126:	2300      	movs	r3, #0
 8003128:	2500      	movs	r5, #0
 800312a:	2600      	movs	r6, #0
 800312c:	051b      	lsls	r3, r3, #20
 800312e:	432b      	orrs	r3, r5
 8003130:	07e4      	lsls	r4, r4, #31
 8003132:	4323      	orrs	r3, r4
 8003134:	0030      	movs	r0, r6
 8003136:	0019      	movs	r1, r3
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	380b      	subs	r0, #11
 800313c:	4085      	lsls	r5, r0
 800313e:	055b      	lsls	r3, r3, #21
 8003140:	032d      	lsls	r5, r5, #12
 8003142:	2600      	movs	r6, #0
 8003144:	0b2d      	lsrs	r5, r5, #12
 8003146:	0d5b      	lsrs	r3, r3, #21
 8003148:	e7f0      	b.n	800312c <__aeabi_i2d+0x3c>
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	0000041e 	.word	0x0000041e

08003150 <__aeabi_ui2d>:
 8003150:	b510      	push	{r4, lr}
 8003152:	1e04      	subs	r4, r0, #0
 8003154:	d010      	beq.n	8003178 <__aeabi_ui2d+0x28>
 8003156:	f000 f821 	bl	800319c <__clzsi2>
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <__aeabi_ui2d+0x48>)
 800315c:	1a1b      	subs	r3, r3, r0
 800315e:	280a      	cmp	r0, #10
 8003160:	dc11      	bgt.n	8003186 <__aeabi_ui2d+0x36>
 8003162:	220b      	movs	r2, #11
 8003164:	0021      	movs	r1, r4
 8003166:	1a12      	subs	r2, r2, r0
 8003168:	40d1      	lsrs	r1, r2
 800316a:	3015      	adds	r0, #21
 800316c:	030a      	lsls	r2, r1, #12
 800316e:	055b      	lsls	r3, r3, #21
 8003170:	4084      	lsls	r4, r0
 8003172:	0b12      	lsrs	r2, r2, #12
 8003174:	0d5b      	lsrs	r3, r3, #21
 8003176:	e001      	b.n	800317c <__aeabi_ui2d+0x2c>
 8003178:	2300      	movs	r3, #0
 800317a:	2200      	movs	r2, #0
 800317c:	051b      	lsls	r3, r3, #20
 800317e:	4313      	orrs	r3, r2
 8003180:	0020      	movs	r0, r4
 8003182:	0019      	movs	r1, r3
 8003184:	bd10      	pop	{r4, pc}
 8003186:	0022      	movs	r2, r4
 8003188:	380b      	subs	r0, #11
 800318a:	4082      	lsls	r2, r0
 800318c:	055b      	lsls	r3, r3, #21
 800318e:	0312      	lsls	r2, r2, #12
 8003190:	2400      	movs	r4, #0
 8003192:	0b12      	lsrs	r2, r2, #12
 8003194:	0d5b      	lsrs	r3, r3, #21
 8003196:	e7f1      	b.n	800317c <__aeabi_ui2d+0x2c>
 8003198:	0000041e 	.word	0x0000041e

0800319c <__clzsi2>:
 800319c:	211c      	movs	r1, #28
 800319e:	2301      	movs	r3, #1
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	4298      	cmp	r0, r3
 80031a4:	d301      	bcc.n	80031aa <__clzsi2+0xe>
 80031a6:	0c00      	lsrs	r0, r0, #16
 80031a8:	3910      	subs	r1, #16
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	4298      	cmp	r0, r3
 80031ae:	d301      	bcc.n	80031b4 <__clzsi2+0x18>
 80031b0:	0a00      	lsrs	r0, r0, #8
 80031b2:	3908      	subs	r1, #8
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	4298      	cmp	r0, r3
 80031b8:	d301      	bcc.n	80031be <__clzsi2+0x22>
 80031ba:	0900      	lsrs	r0, r0, #4
 80031bc:	3904      	subs	r1, #4
 80031be:	a202      	add	r2, pc, #8	; (adr r2, 80031c8 <__clzsi2+0x2c>)
 80031c0:	5c10      	ldrb	r0, [r2, r0]
 80031c2:	1840      	adds	r0, r0, r1
 80031c4:	4770      	bx	lr
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	02020304 	.word	0x02020304
 80031cc:	01010101 	.word	0x01010101
	...

080031d8 <__clzdi2>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	2900      	cmp	r1, #0
 80031dc:	d103      	bne.n	80031e6 <__clzdi2+0xe>
 80031de:	f7ff ffdd 	bl	800319c <__clzsi2>
 80031e2:	3020      	adds	r0, #32
 80031e4:	e002      	b.n	80031ec <__clzdi2+0x14>
 80031e6:	0008      	movs	r0, r1
 80031e8:	f7ff ffd8 	bl	800319c <__clzsi2>
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)

080031f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <MX_DMA_Init+0x58>)
 80031f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <MX_DMA_Init+0x58>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_DMA_Init+0x58>)
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	2201      	movs	r2, #1
 8003208:	4013      	ands	r3, r2
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	2009      	movs	r0, #9
 8003214:	f003 ffc6 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003218:	2009      	movs	r0, #9
 800321a:	f003 ffd8 	bl	80071ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	200a      	movs	r0, #10
 8003224:	f003 ffbe 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003228:	200a      	movs	r0, #10
 800322a:	f003 ffd0 	bl	80071ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	200b      	movs	r0, #11
 8003234:	f003 ffb6 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8003238:	200b      	movs	r0, #11
 800323a:	f003 ffc8 	bl	80071ce <HAL_NVIC_EnableIRQ>

}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b002      	add	sp, #8
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	40021000 	.word	0x40021000

0800324c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b08b      	sub	sp, #44	; 0x2c
 8003250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003252:	2414      	movs	r4, #20
 8003254:	193b      	adds	r3, r7, r4
 8003256:	0018      	movs	r0, r3
 8003258:	2314      	movs	r3, #20
 800325a:	001a      	movs	r2, r3
 800325c:	2100      	movs	r1, #0
 800325e:	f008 f851 	bl	800b304 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003262:	4b56      	ldr	r3, [pc, #344]	; (80033bc <MX_GPIO_Init+0x170>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b55      	ldr	r3, [pc, #340]	; (80033bc <MX_GPIO_Init+0x170>)
 8003268:	2104      	movs	r1, #4
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
 800326e:	4b53      	ldr	r3, [pc, #332]	; (80033bc <MX_GPIO_Init+0x170>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	2204      	movs	r2, #4
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800327a:	4b50      	ldr	r3, [pc, #320]	; (80033bc <MX_GPIO_Init+0x170>)
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <MX_GPIO_Init+0x170>)
 8003280:	2120      	movs	r1, #32
 8003282:	430a      	orrs	r2, r1
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
 8003286:	4b4d      	ldr	r3, [pc, #308]	; (80033bc <MX_GPIO_Init+0x170>)
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2220      	movs	r2, #32
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <MX_GPIO_Init+0x170>)
 8003294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003296:	4b49      	ldr	r3, [pc, #292]	; (80033bc <MX_GPIO_Init+0x170>)
 8003298:	2101      	movs	r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	635a      	str	r2, [r3, #52]	; 0x34
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <MX_GPIO_Init+0x170>)
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	2201      	movs	r2, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	4b44      	ldr	r3, [pc, #272]	; (80033bc <MX_GPIO_Init+0x170>)
 80032ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <MX_GPIO_Init+0x170>)
 80032b0:	2102      	movs	r1, #2
 80032b2:	430a      	orrs	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <MX_GPIO_Init+0x170>)
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	2202      	movs	r2, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 80032c2:	2384      	movs	r3, #132	; 0x84
 80032c4:	00d9      	lsls	r1, r3, #3
 80032c6:	23a0      	movs	r3, #160	; 0xa0
 80032c8:	05db      	lsls	r3, r3, #23
 80032ca:	2200      	movs	r2, #0
 80032cc:	0018      	movs	r0, r3
 80032ce:	f004 fb61 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 80032d2:	2382      	movs	r3, #130	; 0x82
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	483a      	ldr	r0, [pc, #232]	; (80033c0 <MX_GPIO_Init+0x174>)
 80032d8:	2200      	movs	r2, #0
 80032da:	0019      	movs	r1, r3
 80032dc:	f004 fb5a 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80032e0:	193b      	adds	r3, r7, r4
 80032e2:	2220      	movs	r2, #32
 80032e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	2201      	movs	r2, #1
 80032ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	2202      	movs	r2, #2
 80032f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80032f8:	193a      	adds	r2, r7, r4
 80032fa:	23a0      	movs	r3, #160	; 0xa0
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	0011      	movs	r1, r2
 8003300:	0018      	movs	r0, r3
 8003302:	f004 f9e3 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPIRIT1_SPI_CSn_Pin;
 8003306:	0021      	movs	r1, r4
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2282      	movs	r2, #130	; 0x82
 800330c:	0152      	lsls	r2, r2, #5
 800330e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003310:	000c      	movs	r4, r1
 8003312:	193b      	adds	r3, r7, r4
 8003314:	2201      	movs	r2, #1
 8003316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	193b      	adds	r3, r7, r4
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2200      	movs	r2, #0
 8003322:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	193b      	adds	r3, r7, r4
 8003326:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <MX_GPIO_Init+0x174>)
 8003328:	0019      	movs	r1, r3
 800332a:	0010      	movs	r0, r2
 800332c:	f004 f9ce 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003330:	0021      	movs	r1, r4
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003338:	187b      	adds	r3, r7, r1
 800333a:	2288      	movs	r2, #136	; 0x88
 800333c:	0352      	lsls	r2, r2, #13
 800333e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003346:	000c      	movs	r4, r1
 8003348:	187b      	adds	r3, r7, r1
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <MX_GPIO_Init+0x178>)
 800334c:	0019      	movs	r1, r3
 800334e:	0010      	movs	r0, r2
 8003350:	f004 f9bc 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8003354:	0021      	movs	r1, r4
 8003356:	187b      	adds	r3, r7, r1
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	00d2      	lsls	r2, r2, #3
 800335c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	000c      	movs	r4, r1
 8003360:	193b      	adds	r3, r7, r4
 8003362:	2201      	movs	r2, #1
 8003364:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	193b      	adds	r3, r7, r4
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8003372:	193a      	adds	r2, r7, r4
 8003374:	23a0      	movs	r3, #160	; 0xa0
 8003376:	05db      	lsls	r3, r3, #23
 8003378:	0011      	movs	r1, r2
 800337a:	0018      	movs	r0, r3
 800337c:	f004 f9a6 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8003380:	0021      	movs	r1, r4
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2208      	movs	r2, #8
 8003386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2284      	movs	r2, #132	; 0x84
 800338c:	0392      	lsls	r2, r2, #14
 800338e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	187b      	adds	r3, r7, r1
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8003396:	187b      	adds	r3, r7, r1
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <MX_GPIO_Init+0x174>)
 800339a:	0019      	movs	r1, r3
 800339c:	0010      	movs	r0, r2
 800339e:	f004 f995 	bl	80076cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2006      	movs	r0, #6
 80033a8:	f003 fefc 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80033ac:	2006      	movs	r0, #6
 80033ae:	f003 ff0e 	bl	80071ce <HAL_NVIC_EnableIRQ>

}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b00b      	add	sp, #44	; 0x2c
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	40021000 	.word	0x40021000
 80033c0:	50000400 	.word	0x50000400
 80033c4:	50000800 	.word	0x50000800

080033c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <MX_I2C1_Init+0x74>)
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <MX_I2C1_Init+0x78>)
 80033d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <MX_I2C1_Init+0x74>)
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <MX_I2C1_Init+0x7c>)
 80033d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <MX_I2C1_Init+0x74>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <MX_I2C1_Init+0x74>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <MX_I2C1_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_I2C1_Init+0x74>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <MX_I2C1_Init+0x74>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <MX_I2C1_Init+0x74>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <MX_I2C1_Init+0x74>)
 80033fe:	2200      	movs	r2, #0
 8003400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <MX_I2C1_Init+0x74>)
 8003404:	0018      	movs	r0, r3
 8003406:	f004 fb31 	bl	8007a6c <HAL_I2C_Init>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800340e:	f000 fd15 	bl	8003e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <MX_I2C1_Init+0x74>)
 8003414:	2100      	movs	r1, #0
 8003416:	0018      	movs	r0, r3
 8003418:	f005 f85e 	bl	80084d8 <HAL_I2CEx_ConfigAnalogFilter>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d001      	beq.n	8003424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003420:	f000 fd0c 	bl	8003e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <MX_I2C1_Init+0x74>)
 8003426:	2100      	movs	r1, #0
 8003428:	0018      	movs	r0, r3
 800342a:	f005 f8a1 	bl	8008570 <HAL_I2CEx_ConfigDigitalFilter>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d001      	beq.n	8003436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003432:	f000 fd03 	bl	8003e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000030 	.word	0x20000030
 8003440:	40005400 	.word	0x40005400
 8003444:	10707dbc 	.word	0x10707dbc

08003448 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b099      	sub	sp, #100	; 0x64
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	234c      	movs	r3, #76	; 0x4c
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	0018      	movs	r0, r3
 8003456:	2314      	movs	r3, #20
 8003458:	001a      	movs	r2, r3
 800345a:	2100      	movs	r1, #0
 800345c:	f007 ff52 	bl	800b304 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003460:	2418      	movs	r4, #24
 8003462:	193b      	adds	r3, r7, r4
 8003464:	0018      	movs	r0, r3
 8003466:	2334      	movs	r3, #52	; 0x34
 8003468:	001a      	movs	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	f007 ff4a 	bl	800b304 <memset>
  if(i2cHandle->Instance==I2C1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a34      	ldr	r2, [pc, #208]	; (8003548 <HAL_I2C_MspInit+0x100>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d162      	bne.n	8003540 <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800347a:	193b      	adds	r3, r7, r4
 800347c:	2220      	movs	r2, #32
 800347e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003480:	193b      	adds	r3, r7, r4
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003486:	193b      	adds	r3, r7, r4
 8003488:	0018      	movs	r0, r3
 800348a:	f005 fdcd 	bl	8009028 <HAL_RCCEx_PeriphCLKConfig>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003492:	f000 fcd3 	bl	8003e3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_I2C_MspInit+0x104>)
 8003498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_I2C_MspInit+0x104>)
 800349c:	2101      	movs	r1, #1
 800349e:	430a      	orrs	r2, r1
 80034a0:	635a      	str	r2, [r3, #52]	; 0x34
 80034a2:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_I2C_MspInit+0x104>)
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	2201      	movs	r2, #1
 80034a8:	4013      	ands	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_I2C_MspInit+0x104>)
 80034b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_I2C_MspInit+0x104>)
 80034b4:	2102      	movs	r1, #2
 80034b6:	430a      	orrs	r2, r1
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_I2C_MspInit+0x104>)
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034c6:	214c      	movs	r1, #76	; 0x4c
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d0:	000c      	movs	r4, r1
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	2212      	movs	r2, #18
 80034d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	2200      	movs	r2, #0
 80034e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	2206      	movs	r2, #6
 80034e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	193a      	adds	r2, r7, r4
 80034ec:	23a0      	movs	r3, #160	; 0xa0
 80034ee:	05db      	lsls	r3, r3, #23
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f004 f8ea 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034f8:	0021      	movs	r1, r4
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2212      	movs	r2, #18
 8003504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	187b      	adds	r3, r7, r1
 800350e:	2200      	movs	r2, #0
 8003510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2206      	movs	r2, #6
 8003516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003518:	187b      	adds	r3, r7, r1
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_I2C_MspInit+0x108>)
 800351c:	0019      	movs	r1, r3
 800351e:	0010      	movs	r0, r2
 8003520:	f004 f8d4 	bl	80076cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_I2C_MspInit+0x104>)
 8003526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_I2C_MspInit+0x104>)
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	0389      	lsls	r1, r1, #14
 800352e:	430a      	orrs	r2, r1
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_I2C_MspInit+0x104>)
 8003534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	039b      	lsls	r3, r3, #14
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b019      	add	sp, #100	; 0x64
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	40005400 	.word	0x40005400
 800354c:	40021000 	.word	0x40021000
 8003550:	50000400 	.word	0x50000400

08003554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003556:	b0b3      	sub	sp, #204	; 0xcc
 8003558:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t payload[40];
	uint8_t buffer_TX[40] = {0x00};
 800355a:	236c      	movs	r3, #108	; 0x6c
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	3304      	adds	r3, #4
 8003564:	2224      	movs	r2, #36	; 0x24
 8003566:	2100      	movs	r1, #0
 8003568:	0018      	movs	r0, r3
 800356a:	f007 fecb 	bl	800b304 <memset>
	uint8_t buffer_RX[40];



	uint8_t temp = 0;
 800356e:	23bd      	movs	r3, #189	; 0xbd
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
	uint16_t count = 0;
 8003576:	23be      	movs	r3, #190	; 0xbe
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2200      	movs	r2, #0
 800357c:	801a      	strh	r2, [r3, #0]
	uint8_t spi_recv_buf = 0;
 800357e:	2343      	movs	r3, #67	; 0x43
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003586:	f003 fc7f 	bl	8006e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800358a:	f000 f9ff 	bl	800398c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358e:	f7ff fe5d 	bl	800324c <MX_GPIO_Init>
  MX_DMA_Init();
 8003592:	f7ff fe2d 	bl	80031f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003596:	f000 fe75 	bl	8004284 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800359a:	f7ff ff15 	bl	80033c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800359e:	f000 fc53 	bl	8003e48 <MX_SPI1_Init>
  MX_SPI2_Init();
 80035a2:	f000 fc8f 	bl	8003ec4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	//camera init
	HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	015b      	lsls	r3, r3, #5
 80035aa:	48e9      	ldr	r0, [pc, #932]	; (8003950 <main+0x3fc>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	0019      	movs	r1, r3
 80035b0:	f004 f9f0 	bl	8007994 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80035b4:	2064      	movs	r0, #100	; 0x64
 80035b6:	f003 fced 	bl	8006f94 <HAL_Delay>
	//Check if SPI  communication with camera module is working
	while (spi_recv_buf != 0x55) {
 80035ba:	e074      	b.n	80036a6 <main+0x152>
		spi_buf = 0x00 | 0x80;
 80035bc:	2542      	movs	r5, #66	; 0x42
 80035be:	197b      	adds	r3, r7, r5
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	015b      	lsls	r3, r3, #5
 80035c8:	48e1      	ldr	r0, [pc, #900]	; (8003950 <main+0x3fc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	0019      	movs	r1, r3
 80035ce:	f004 f9e1 	bl	8007994 <HAL_GPIO_WritePin>
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 80035d2:	23bd      	movs	r3, #189	; 0xbd
 80035d4:	18fc      	adds	r4, r7, r3
 80035d6:	2643      	movs	r6, #67	; 0x43
 80035d8:	19ba      	adds	r2, r7, r6
 80035da:	1979      	adds	r1, r7, r5
 80035dc:	48dd      	ldr	r0, [pc, #884]	; (8003954 <main+0x400>)
 80035de:	2364      	movs	r3, #100	; 0x64
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2301      	movs	r3, #1
 80035e4:	f006 fa34 	bl	8009a50 <HAL_SPI_TransmitReceive>
 80035e8:	0003      	movs	r3, r0
 80035ea:	7023      	strb	r3, [r4, #0]

		spi_buf = 0x55;
 80035ec:	197b      	adds	r3, r7, r5
 80035ee:	2255      	movs	r2, #85	; 0x55
 80035f0:	701a      	strb	r2, [r3, #0]
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 80035f2:	23bd      	movs	r3, #189	; 0xbd
 80035f4:	18fc      	adds	r4, r7, r3
 80035f6:	19ba      	adds	r2, r7, r6
 80035f8:	1979      	adds	r1, r7, r5
 80035fa:	48d6      	ldr	r0, [pc, #856]	; (8003954 <main+0x400>)
 80035fc:	2364      	movs	r3, #100	; 0x64
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2301      	movs	r3, #1
 8003602:	f006 fa25 	bl	8009a50 <HAL_SPI_TransmitReceive>
 8003606:	0003      	movs	r3, r0
 8003608:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	015b      	lsls	r3, r3, #5
 800360e:	48d0      	ldr	r0, [pc, #832]	; (8003950 <main+0x3fc>)
 8003610:	2201      	movs	r2, #1
 8003612:	0019      	movs	r1, r3
 8003614:	f004 f9be 	bl	8007994 <HAL_GPIO_WritePin>

		spi_buf = 0x00;
 8003618:	197b      	adds	r3, r7, r5
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	015b      	lsls	r3, r3, #5
 8003622:	48cb      	ldr	r0, [pc, #812]	; (8003950 <main+0x3fc>)
 8003624:	2200      	movs	r2, #0
 8003626:	0019      	movs	r1, r3
 8003628:	f004 f9b4 	bl	8007994 <HAL_GPIO_WritePin>
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 800362c:	23bd      	movs	r3, #189	; 0xbd
 800362e:	18fc      	adds	r4, r7, r3
 8003630:	19ba      	adds	r2, r7, r6
 8003632:	1979      	adds	r1, r7, r5
 8003634:	48c7      	ldr	r0, [pc, #796]	; (8003954 <main+0x400>)
 8003636:	2364      	movs	r3, #100	; 0x64
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2301      	movs	r3, #1
 800363c:	f006 fa08 	bl	8009a50 <HAL_SPI_TransmitReceive>
 8003640:	0003      	movs	r3, r0
 8003642:	7023      	strb	r3, [r4, #0]

		spi_buf = 0x55;
 8003644:	197b      	adds	r3, r7, r5
 8003646:	2255      	movs	r2, #85	; 0x55
 8003648:	701a      	strb	r2, [r3, #0]
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 800364a:	23bd      	movs	r3, #189	; 0xbd
 800364c:	18fc      	adds	r4, r7, r3
 800364e:	19ba      	adds	r2, r7, r6
 8003650:	1979      	adds	r1, r7, r5
 8003652:	48c0      	ldr	r0, [pc, #768]	; (8003954 <main+0x400>)
 8003654:	2364      	movs	r3, #100	; 0x64
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2301      	movs	r3, #1
 800365a:	f006 f9f9 	bl	8009a50 <HAL_SPI_TransmitReceive>
 800365e:	0003      	movs	r3, r0
 8003660:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	015b      	lsls	r3, r3, #5
 8003666:	48ba      	ldr	r0, [pc, #744]	; (8003950 <main+0x3fc>)
 8003668:	2201      	movs	r2, #1
 800366a:	0019      	movs	r1, r3
 800366c:	f004 f992 	bl	8007994 <HAL_GPIO_WritePin>

		if (spi_recv_buf != 0x55) {
 8003670:	19bb      	adds	r3, r7, r6
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b55      	cmp	r3, #85	; 0x55
 8003676:	d00b      	beq.n	8003690 <main+0x13c>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //Toogle diode to show if  Camera hasnt responded, or we dont recive correct data
 8003678:	23a0      	movs	r3, #160	; 0xa0
 800367a:	05db      	lsls	r3, r3, #23
 800367c:	2120      	movs	r1, #32
 800367e:	0018      	movs	r0, r3
 8003680:	f004 f9a5 	bl	80079ce <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8003684:	23fa      	movs	r3, #250	; 0xfa
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	0018      	movs	r0, r3
 800368a:	f003 fc83 	bl	8006f94 <HAL_Delay>
 800368e:	e00a      	b.n	80036a6 <main+0x152>
		} else {
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //Tooge diode when Camera  responds correctly
 8003690:	23a0      	movs	r3, #160	; 0xa0
 8003692:	05db      	lsls	r3, r3, #23
 8003694:	2120      	movs	r1, #32
 8003696:	0018      	movs	r0, r3
 8003698:	f004 f999 	bl	80079ce <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 800369c:	23fa      	movs	r3, #250	; 0xfa
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f003 fc77 	bl	8006f94 <HAL_Delay>
	while (spi_recv_buf != 0x55) {
 80036a6:	2343      	movs	r3, #67	; 0x43
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b55      	cmp	r3, #85	; 0x55
 80036ae:	d185      	bne.n	80035bc <main+0x68>

		}
	}
	//Check if the camera module type is OV5642
	wrSensorReg16_8(0xff, 0x01);
 80036b0:	2101      	movs	r1, #1
 80036b2:	20ff      	movs	r0, #255	; 0xff
 80036b4:	f000 fa9a 	bl	8003bec <wrSensorReg16_8>
	rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid);
 80036b8:	2441      	movs	r4, #65	; 0x41
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	4aa6      	ldr	r2, [pc, #664]	; (8003958 <main+0x404>)
 80036be:	0019      	movs	r1, r3
 80036c0:	0010      	movs	r0, r2
 80036c2:	f000 fa63 	bl	8003b8c <rdSensorReg16_8>
	rdSensorReg16_8(OV5642_CHIPID_LOW, &pid);
 80036c6:	2540      	movs	r5, #64	; 0x40
 80036c8:	197b      	adds	r3, r7, r5
 80036ca:	4aa4      	ldr	r2, [pc, #656]	; (800395c <main+0x408>)
 80036cc:	0019      	movs	r1, r3
 80036ce:	0010      	movs	r0, r2
 80036d0:	f000 fa5c 	bl	8003b8c <rdSensorReg16_8>
	//Check if camera module responds
	if ((vid != 0x56) || (pid != 0x42)) {
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b56      	cmp	r3, #86	; 0x56
 80036da:	d103      	bne.n	80036e4 <main+0x190>
 80036dc:	197b      	adds	r3, r7, r5
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b42      	cmp	r3, #66	; 0x42
 80036e2:	d000      	beq.n	80036e6 <main+0x192>
		//Serial.println("Can't find OV5642 module!");
		while (1);
 80036e4:	e7fe      	b.n	80036e4 <main+0x190>
	}

	// init cam
	initCam();
 80036e6:	f000 fb5b 	bl	8003da0 <initCam>

	// Write ARDUCHIP_TIM, VSYNC_LEVEL_MASK to spi
	write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);
 80036ea:	2102      	movs	r1, #2
 80036ec:	2003      	movs	r0, #3
 80036ee:	f000 faa7 	bl	8003c40 <write_reg>

	//Change picture size
	wrSensorRegs16_8(ov5642_2592x1944);
 80036f2:	4b9b      	ldr	r3, [pc, #620]	; (8003960 <main+0x40c>)
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 fa11 	bl	8003b1c <wrSensorRegs16_8>

	// Close auto exposure mode
	//uint8_t _x3503;
	//wrSensorReg16_8(0x5001,_x3503|0x01);
	//Manually set the exposure value
	wrSensorReg16_8(0x3500, 0x00);
 80036fa:	23d4      	movs	r3, #212	; 0xd4
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	2100      	movs	r1, #0
 8003700:	0018      	movs	r0, r3
 8003702:	f000 fa73 	bl	8003bec <wrSensorReg16_8>
	wrSensorReg16_8(0x3501, 0x79);
 8003706:	4b97      	ldr	r3, [pc, #604]	; (8003964 <main+0x410>)
 8003708:	2179      	movs	r1, #121	; 0x79
 800370a:	0018      	movs	r0, r3
 800370c:	f000 fa6e 	bl	8003bec <wrSensorReg16_8>
	wrSensorReg16_8(0x3502, 0xe0);
 8003710:	4b95      	ldr	r3, [pc, #596]	; (8003968 <main+0x414>)
 8003712:	21e0      	movs	r1, #224	; 0xe0
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fa69 	bl	8003bec <wrSensorReg16_8>
	 *
	 *
	 *
	 */

	SpiritEnterShutdown();
 800371a:	f003 fb97 	bl	8006e4c <RadioEnterShutdown>
	SpiritExitShutdown();
 800371e:	f003 fba2 	bl	8006e66 <RadioExitShutdown>
	SpiritManagementWaExtraCurrent();
 8003722:	f001 fb43 	bl	8004dac <SpiritManagementWaExtraCurrent>

	do {
		for (volatile uint8_t i = 0; i != 0xFF; i++)
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e006      	b.n	800373c <main+0x1e8>
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	b2da      	uxtb	r2, r3
 8003738:	1dfb      	adds	r3, r7, #7
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	1dfb      	adds	r3, r7, #7
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2bff      	cmp	r3, #255	; 0xff
 8003744:	d1f3      	bne.n	800372e <main+0x1da>
			; // delay for state transition
		SpiritRefreshStatus(); // reads the MC_STATUS register
 8003746:	f003 f9e7 	bl	8006b18 <SpiritRefreshStatus>
	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 800374a:	4b88      	ldr	r3, [pc, #544]	; (800396c <main+0x418>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	0e5b      	lsrs	r3, r3, #25
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d1e6      	bne.n	8003726 <main+0x1d2>

	SRadioInit xRadioInit;

	// Initialize radio RF parameters
	xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8003758:	2424      	movs	r4, #36	; 0x24
 800375a:	193b      	adds	r3, r7, r4
 800375c:	2200      	movs	r2, #0
 800375e:	801a      	strh	r2, [r3, #0]
	xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8003760:	193b      	adds	r3, r7, r4
 8003762:	4a83      	ldr	r2, [pc, #524]	; (8003970 <main+0x41c>)
 8003764:	605a      	str	r2, [r3, #4]
	xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8003766:	193b      	adds	r3, r7, r4
 8003768:	4a82      	ldr	r2, [pc, #520]	; (8003974 <main+0x420>)
 800376a:	609a      	str	r2, [r3, #8]
	xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 800376c:	193b      	adds	r3, r7, r4
 800376e:	2200      	movs	r2, #0
 8003770:	731a      	strb	r2, [r3, #12]
	xRadioInit.xModulationSelect = MODULATION_SELECT;
 8003772:	193b      	adds	r3, r7, r4
 8003774:	2200      	movs	r2, #0
 8003776:	735a      	strb	r2, [r3, #13]
	xRadioInit.lDatarate = DATARATE;
 8003778:	193b      	adds	r3, r7, r4
 800377a:	2296      	movs	r2, #150	; 0x96
 800377c:	0212      	lsls	r2, r2, #8
 800377e:	611a      	str	r2, [r3, #16]
	xRadioInit.lFreqDev = FREQ_DEVIATION;
 8003780:	193b      	adds	r3, r7, r4
 8003782:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <main+0x424>)
 8003784:	615a      	str	r2, [r3, #20]
	xRadioInit.lBandwidth = BANDWIDTH;
 8003786:	193b      	adds	r3, r7, r4
 8003788:	4a7a      	ldr	r2, [pc, #488]	; (8003974 <main+0x420>)
 800378a:	619a      	str	r2, [r3, #24]
	SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 800378c:	4b7b      	ldr	r3, [pc, #492]	; (800397c <main+0x428>)
 800378e:	0018      	movs	r0, r3
 8003790:	f003 f942 	bl	8006a18 <SpiritRadioSetXtalFrequency>
	SpiritRadioInit(&xRadioInit);
 8003794:	193b      	adds	r3, r7, r4
 8003796:	0018      	movs	r0, r3
 8003798:	f001 fe2a 	bl	80053f0 <SpiritRadioInit>

	// Set the transmitter power level
	SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 800379c:	4b78      	ldr	r3, [pc, #480]	; (8003980 <main+0x42c>)
 800379e:	1c19      	adds	r1, r3, #0
 80037a0:	2007      	movs	r0, #7
 80037a2:	f002 ffa3 	bl	80066ec <SpiritRadioSetPALeveldBm>
	SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 80037a6:	2007      	movs	r0, #7
 80037a8:	f003 f804 	bl	80067b4 <SpiritRadioSetPALevelMaxIndex>

	PktBasicInit xBasicInit;
	PktBasicAddressesInit xBasicAddress;

	// Configure packet handler to use the Basic packet format
	xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 80037ac:	2114      	movs	r1, #20
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2218      	movs	r2, #24
 80037b2:	701a      	strb	r2, [r3, #0]
	xBasicInit.xSyncLength = SYNC_LENGTH;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2206      	movs	r2, #6
 80037b8:	705a      	strb	r2, [r3, #1]
	xBasicInit.lSyncWords = SYNC_WORD;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	4a71      	ldr	r2, [pc, #452]	; (8003984 <main+0x430>)
 80037be:	605a      	str	r2, [r3, #4]
	xBasicInit.xFixVarLength = LENGTH_TYPE;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2201      	movs	r2, #1
 80037c4:	721a      	strb	r2, [r3, #8]
	xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2207      	movs	r2, #7
 80037ca:	725a      	strb	r2, [r3, #9]
	xBasicInit.xCrcMode = CRC_MODE;
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	2220      	movs	r2, #32
 80037d0:	729a      	strb	r2, [r3, #10]
	xBasicInit.xControlLength = CONTROL_LENGTH;
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2200      	movs	r2, #0
 80037d6:	72da      	strb	r2, [r3, #11]
	xBasicInit.xAddressField = EN_ADDRESS;
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2201      	movs	r2, #1
 80037dc:	731a      	strb	r2, [r3, #12]
	xBasicInit.xFec = EN_FEC;
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	2200      	movs	r2, #0
 80037e2:	735a      	strb	r2, [r3, #13]
	xBasicInit.xDataWhitening = EN_WHITENING;
 80037e4:	187b      	adds	r3, r7, r1
 80037e6:	2201      	movs	r2, #1
 80037e8:	739a      	strb	r2, [r3, #14]
	SpiritPktBasicInit(&xBasicInit);
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	0018      	movs	r0, r3
 80037ee:	f001 fb05 	bl	8004dfc <SpiritPktBasicInit>

	// Configure destination address criteria for automatic packet filtering
	xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 80037f2:	210c      	movs	r1, #12
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
	xBasicAddress.cMyAddress = MY_ADDRESS;
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	2244      	movs	r2, #68	; 0x44
 80037fe:	705a      	strb	r2, [r3, #1]
	xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8003800:	187b      	adds	r3, r7, r1
 8003802:	2201      	movs	r2, #1
 8003804:	709a      	strb	r2, [r3, #2]
	xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8003806:	187b      	adds	r3, r7, r1
 8003808:	22ee      	movs	r2, #238	; 0xee
 800380a:	70da      	strb	r2, [r3, #3]
	xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800380c:	187b      	adds	r3, r7, r1
 800380e:	2201      	movs	r2, #1
 8003810:	711a      	strb	r2, [r3, #4]
	xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8003812:	187b      	adds	r3, r7, r1
 8003814:	22ff      	movs	r2, #255	; 0xff
 8003816:	715a      	strb	r2, [r3, #5]
	SpiritPktBasicAddressesInit(&xBasicAddress);
 8003818:	187b      	adds	r3, r7, r1
 800381a:	0018      	movs	r0, r3
 800381c:	f001 fbe6 	bl	8004fec <SpiritPktBasicAddressesInit>

	SGpioInit xGpioInit;

	// Configure GPIO3 as interrupt request pin (active low)
	xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8003820:	2108      	movs	r1, #8
 8003822:	187b      	adds	r3, r7, r1
 8003824:	2202      	movs	r2, #2
 8003826:	701a      	strb	r2, [r3, #0]
	xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2202      	movs	r2, #2
 800382c:	705a      	strb	r2, [r3, #1]
	xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800382e:	187b      	adds	r3, r7, r1
 8003830:	2200      	movs	r2, #0
 8003832:	709a      	strb	r2, [r3, #2]
	SpiritGpioInit(&xGpioInit);
 8003834:	187b      	adds	r3, r7, r1
 8003836:	0018      	movs	r0, r3
 8003838:	f000 ff1c 	bl	8004674 <SpiritGpioInit>

	// Generate an interrupt request for the following IRQs
	SpiritIrqDeInit(NULL);
 800383c:	2000      	movs	r0, #0
 800383e:	f000 ff3f 	bl	80046c0 <SpiritIrqDeInit>
	SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8003842:	2101      	movs	r1, #1
 8003844:	2004      	movs	r0, #4
 8003846:	f000 ff6b 	bl	8004720 <SpiritIrq>
	SpiritIrq(RX_DATA_READY, S_ENABLE);
 800384a:	2101      	movs	r1, #1
 800384c:	2001      	movs	r0, #1
 800384e:	f000 ff67 	bl	8004720 <SpiritIrq>
	SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8003852:	2101      	movs	r1, #1
 8003854:	2002      	movs	r0, #2
 8003856:	f000 ff63 	bl	8004720 <SpiritIrq>
	SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	059b      	lsls	r3, r3, #22
 800385e:	2101      	movs	r1, #1
 8003860:	0018      	movs	r0, r3
 8003862:	f000 ff5d 	bl	8004720 <SpiritIrq>
	SpiritIrqClearStatus();
 8003866:	f001 f80f 	bl	8004888 <SpiritIrqClearStatus>

	// Enable the synchronization quality indicator check (perfect match required)
	// NOTE: 9.10.4: "It is recommended to always enable the SQI check."
	SpiritQiSetSqiThreshold(SQI_TH_0);
 800386a:	2000      	movs	r0, #0
 800386c:	f001 fd64 	bl	8005338 <SpiritQiSetSqiThreshold>
	SpiritQiSqiCheck(S_ENABLE);
 8003870:	2001      	movs	r0, #1
 8003872:	f001 fd21 	bl	80052b8 <SpiritQiSqiCheck>

	// Set the RSSI Threshold for Carrier Sense (9.10.2)
	// NOTE: CS_MODE = 0 at reset
	SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8003876:	2378      	movs	r3, #120	; 0x78
 8003878:	425b      	negs	r3, r3
 800387a:	0018      	movs	r0, r3
 800387c:	f001 fd96 	bl	80053ac <SpiritQiSetRssiThresholddBm>

	// Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
	  SpiritTimerSetRxTimeoutMs(2000.0);
	  #else
	SET_INFINITE_RX_TIMEOUT();
 8003880:	2000      	movs	r0, #0
 8003882:	f003 f8d7 	bl	8006a34 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
	SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8003886:	2002      	movs	r0, #2
 8003888:	f003 f8f0 	bl	8006a6c <SpiritTimerSetRxTimeoutStopCondition>

	SpiritPktBasicSetDestinationAddress(0x44);
 800388c:	2044      	movs	r0, #68	; 0x44
 800388e:	f001 fcf7 	bl	8005280 <SpiritPktCommonSetDestinationAddress>

    /* USER CODE BEGIN 3 */

		// camera code
		//Clear fifo flag
		write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8003892:	2101      	movs	r1, #1
 8003894:	2004      	movs	r0, #4
 8003896:	f000 f9d3 	bl	8003c40 <write_reg>

		// Start capture
		write_reg(ARDUCHIP_FIFO, FIFO_RDPTR_RST_MASK);
 800389a:	2110      	movs	r1, #16
 800389c:	2004      	movs	r0, #4
 800389e:	f000 f9cf 	bl	8003c40 <write_reg>

		///Flush FIFO buffer
		write_reg(ARDUCHIP_FIFO, FIFO_WRPTR_RST_MASK);
 80038a2:	2120      	movs	r1, #32
 80038a4:	2004      	movs	r0, #4
 80038a6:	f000 f9cb 	bl	8003c40 <write_reg>

		//Clear fifo flag
		write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 80038aa:	2101      	movs	r1, #1
 80038ac:	2004      	movs	r0, #4
 80038ae:	f000 f9c7 	bl	8003c40 <write_reg>

		// Start capture
		write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 80038b2:	2102      	movs	r1, #2
 80038b4:	2004      	movs	r0, #4
 80038b6:	f000 f9c3 	bl	8003c40 <write_reg>

		//Wait for capture to be done
		while (get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK) == 0);
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	2108      	movs	r1, #8
 80038be:	2041      	movs	r0, #65	; 0x41
 80038c0:	f000 fa4c 	bl	8003d5c <get_bit>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d0f9      	beq.n	80038bc <main+0x368>
		//HAL_Delay(2000);

		//Start to read data from FIFO
		//Set CS to low
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	4820      	ldr	r0, [pc, #128]	; (8003950 <main+0x3fc>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	0019      	movs	r1, r3
 80038d2:	f004 f85f 	bl	8007994 <HAL_GPIO_WritePin>
		//Send start command

		//spi_buf = BURST_FIFO_READ;
		spi_buf = SINGLE_FIFO_READ;
 80038d6:	2142      	movs	r1, #66	; 0x42
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	223d      	movs	r2, #61	; 0x3d
 80038dc:	701a      	strb	r2, [r3, #0]
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 80038de:	23bd      	movs	r3, #189	; 0xbd
 80038e0:	18fc      	adds	r4, r7, r3
 80038e2:	2343      	movs	r3, #67	; 0x43
 80038e4:	18fa      	adds	r2, r7, r3
 80038e6:	000d      	movs	r5, r1
 80038e8:	1879      	adds	r1, r7, r1
 80038ea:	481a      	ldr	r0, [pc, #104]	; (8003954 <main+0x400>)
 80038ec:	2364      	movs	r3, #100	; 0x64
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2301      	movs	r3, #1
 80038f2:	f006 f8ad 	bl	8009a50 <HAL_SPI_TransmitReceive>
 80038f6:	0003      	movs	r3, r0
 80038f8:	7023      	strb	r3, [r4, #0]

		//Read FIFO data
		spi_buf = 0x00;
 80038fa:	197b      	adds	r3, r7, r5
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
		while(count < 200000){

			/*temp = HAL_SPI_Transmit(&hspi2, &spi_buf, 1, 100);
			temp = HAL_SPI_Receive_DMA(&hspi2, payload, 40);*/
			temp = HAL_SPI_TransmitReceive_DMA(&hspi2, buffer_TX,buffer_RX, 40);
 8003900:	23bd      	movs	r3, #189	; 0xbd
 8003902:	18fc      	adds	r4, r7, r3
 8003904:	2544      	movs	r5, #68	; 0x44
 8003906:	197a      	adds	r2, r7, r5
 8003908:	236c      	movs	r3, #108	; 0x6c
 800390a:	18f9      	adds	r1, r7, r3
 800390c:	4811      	ldr	r0, [pc, #68]	; (8003954 <main+0x400>)
 800390e:	2328      	movs	r3, #40	; 0x28
 8003910:	f006 fa70 	bl	8009df4 <HAL_SPI_TransmitReceive_DMA>
 8003914:	0003      	movs	r3, r0
 8003916:	7023      	strb	r3, [r4, #0]
			//payload[count] = spi_recv_buf;

			xTxDoneFlag = S_RESET;
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <main+0x434>)
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
			SPSGRF_StartTx(buffer_RX, sizeof(buffer_RX));
 800391e:	197b      	adds	r3, r7, r5
 8003920:	2128      	movs	r1, #40	; 0x28
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f890 	bl	8003a48 <SPSGRF_StartTx>
			while (!xTxDoneFlag)
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <main+0x434>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0fa      	beq.n	800392a <main+0x3d6>
				;
count = count+1;
 8003934:	22be      	movs	r2, #190	; 0xbe
 8003936:	18bb      	adds	r3, r7, r2
 8003938:	18ba      	adds	r2, r7, r2
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	3201      	adds	r2, #1
 800393e:	801a      	strh	r2, [r3, #0]
					break;
				}
				tempData_last = buffer_RX[var];
			}*/
			//memset(payload, '\0', sizeof(payload));
			memset(buffer_RX, '\0', sizeof(buffer_RX));
 8003940:	2344      	movs	r3, #68	; 0x44
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	2228      	movs	r2, #40	; 0x28
 8003946:	2100      	movs	r1, #0
 8003948:	0018      	movs	r0, r3
 800394a:	f007 fcdb 	bl	800b304 <memset>
			temp = HAL_SPI_TransmitReceive_DMA(&hspi2, buffer_TX,buffer_RX, 40);
 800394e:	e7d7      	b.n	8003900 <main+0x3ac>
 8003950:	50000400 	.word	0x50000400
 8003954:	200000ec 	.word	0x200000ec
 8003958:	0000300a 	.word	0x0000300a
 800395c:	0000300b 	.word	0x0000300b
 8003960:	0800b54c 	.word	0x0800b54c
 8003964:	00003501 	.word	0x00003501
 8003968:	00003502 	.word	0x00003502
 800396c:	20000300 	.word	0x20000300
 8003970:	19cf0e40 	.word	0x19cf0e40
 8003974:	000186a0 	.word	0x000186a0
 8003978:	00004e20 	.word	0x00004e20
 800397c:	02faf080 	.word	0x02faf080
 8003980:	4139999a 	.word	0x4139999a
 8003984:	88888888 	.word	0x88888888
 8003988:	20000084 	.word	0x20000084

0800398c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b093      	sub	sp, #76	; 0x4c
 8003990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003992:	2410      	movs	r4, #16
 8003994:	193b      	adds	r3, r7, r4
 8003996:	0018      	movs	r0, r3
 8003998:	2338      	movs	r3, #56	; 0x38
 800399a:	001a      	movs	r2, r3
 800399c:	2100      	movs	r1, #0
 800399e:	f007 fcb1 	bl	800b304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a2:	003b      	movs	r3, r7
 80039a4:	0018      	movs	r0, r3
 80039a6:	2310      	movs	r3, #16
 80039a8:	001a      	movs	r2, r3
 80039aa:	2100      	movs	r1, #0
 80039ac:	f007 fcaa 	bl	800b304 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	0018      	movs	r0, r3
 80039b6:	f004 fe27 	bl	8008608 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ba:	193b      	adds	r3, r7, r4
 80039bc:	2202      	movs	r2, #2
 80039be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	0052      	lsls	r2, r2, #1
 80039c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80039c8:	0021      	movs	r1, r4
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	2202      	movs	r2, #2
 80039da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2202      	movs	r2, #2
 80039e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	2200      	movs	r2, #0
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2208      	movs	r2, #8
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	0292      	lsls	r2, r2, #10
 80039f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	0492      	lsls	r2, r2, #18
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0592      	lsls	r2, r2, #22
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f004 fe49 	bl	80086a0 <HAL_RCC_OscConfig>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003a12:	f000 fa13 	bl	8003e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a16:	003b      	movs	r3, r7
 8003a18:	2207      	movs	r2, #7
 8003a1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a1c:	003b      	movs	r3, r7
 8003a1e:	2202      	movs	r2, #2
 8003a20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a22:	003b      	movs	r3, r7
 8003a24:	2200      	movs	r2, #0
 8003a26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a28:	003b      	movs	r3, r7
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a2e:	003b      	movs	r3, r7
 8003a30:	2102      	movs	r1, #2
 8003a32:	0018      	movs	r0, r3
 8003a34:	f005 f94e 	bl	8008cd4 <HAL_RCC_ClockConfig>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d001      	beq.n	8003a40 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003a3c:	f000 f9fe 	bl	8003e3c <Error_Handler>
  }
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b013      	add	sp, #76	; 0x4c
 8003a46:	bd90      	pop	{r4, r7, pc}

08003a48 <SPSGRF_StartTx>:

/* USER CODE BEGIN 4 */



void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	000a      	movs	r2, r1
 8003a52:	1cfb      	adds	r3, r7, #3
 8003a54:	701a      	strb	r2, [r3, #0]
	// flush the TX FIFO
	SpiritCmdStrobeFlushTxFifo();
 8003a56:	2072      	movs	r0, #114	; 0x72
 8003a58:	f000 fdf2 	bl	8004640 <SpiritCmdStrobeCommand>

	// Avoid TX FIFO overflow
	//txLen = (txLen > MAX_BUFFER_LEN ? txLen : MAX_BUFFER_LEN);
	txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8003a5c:	1cfa      	adds	r2, r7, #3
 8003a5e:	1cfb      	adds	r3, r7, #3
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b2d9      	uxtb	r1, r3
 8003a64:	2960      	cmp	r1, #96	; 0x60
 8003a66:	d900      	bls.n	8003a6a <SPSGRF_StartTx+0x22>
 8003a68:	2360      	movs	r3, #96	; 0x60
 8003a6a:	7013      	strb	r3, [r2, #0]

	// start TX operation
	SpiritSpiWriteLinearFifo(txLen, txBuff);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	1cfb      	adds	r3, r7, #3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f003 f98d 	bl	8006d94 <RadioSpiWriteFifo>
	SpiritPktBasicSetPayloadLength(txLen);
 8003a7a:	1cfb      	adds	r3, r7, #3
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	0018      	movs	r0, r3
 8003a82:	f001 fb59 	bl	8005138 <SpiritPktBasicSetPayloadLength>
	SpiritCmdStrobeTx();
 8003a86:	f001 f927 	bl	8004cd8 <SpiritManagementWaCmdStrobeTx>
 8003a8a:	2060      	movs	r0, #96	; 0x60
 8003a8c:	f000 fdd8 	bl	8004640 <SpiritCmdStrobeCommand>
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_GPIO_EXTI_Falling_Callback>:
	SpiritSpiReadLinearFifo(len, rxBuff);

	return len;
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	1dbb      	adds	r3, r7, #6
 8003aa2:	801a      	strh	r2, [r3, #0]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin) {
 8003aa4:	1dbb      	adds	r3, r7, #6
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d12e      	bne.n	8003b0a <HAL_GPIO_EXTI_Falling_Callback+0x72>
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 8003aac:	240c      	movs	r4, #12
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 feaf 	bl	8004814 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT) {
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2204      	movs	r2, #4
 8003abc:	4013      	ands	r3, r2
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_GPIO_EXTI_Falling_Callback+0x32>
		xTxDoneFlag = S_SET;
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY) {
 8003aca:	230c      	movs	r3, #12
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		xRxDoneFlag = S_SET;
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT) {
 8003ae0:	210c      	movs	r1, #12
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_GPIO_EXTI_Falling_Callback+0x66>
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	78db      	ldrb	r3, [r3, #3]
 8003af4:	2220      	movs	r2, #32
 8003af6:	4013      	ands	r3, r2
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <HAL_GPIO_EXTI_Falling_Callback+0x74>
		SpiritCmdStrobeRx();
 8003afe:	f001 f925 	bl	8004d4c <SpiritManagementWaCmdStrobeRx>
 8003b02:	2061      	movs	r0, #97	; 0x61
 8003b04:	f000 fd9c 	bl	8004640 <SpiritCmdStrobeCommand>
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_EXTI_Falling_Callback+0x74>
		return;
 8003b0a:	46c0      	nop			; (mov r8, r8)
	}
}
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b005      	add	sp, #20
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	20000084 	.word	0x20000084
 8003b18:	20000085 	.word	0x20000085

08003b1c <wrSensorRegs16_8>:

//camera functions

int wrSensorRegs16_8(const struct sensor_reg reglist[]) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

	unsigned int reg_addr;
	unsigned char reg_val;
	const struct sensor_reg *next = reglist;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60fb      	str	r3, [r7, #12]

	while ((reg_addr != 0xffff) | (reg_val != 0xff)) {
 8003b28:	e017      	b.n	8003b5a <wrSensorRegs16_8+0x3e>

		reg_addr = pgm_read_word(&next->reg);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
		reg_val = pgm_read_word(&next->val);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	2113      	movs	r1, #19
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]

		wrSensorReg16_8(reg_addr, reg_val);
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	0010      	movs	r0, r2
 8003b50:	f000 f84c 	bl	8003bec <wrSensorReg16_8>

		next++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3304      	adds	r3, #4
 8003b58:	60fb      	str	r3, [r7, #12]
	while ((reg_addr != 0xffff) | (reg_val != 0xff)) {
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <wrSensorRegs16_8+0x6c>)
 8003b5e:	4694      	mov	ip, r2
 8003b60:	4463      	add	r3, ip
 8003b62:	1e5a      	subs	r2, r3, #1
 8003b64:	4193      	sbcs	r3, r2
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	2313      	movs	r3, #19
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	3bff      	subs	r3, #255	; 0xff
 8003b70:	1e59      	subs	r1, r3, #1
 8003b72:	418b      	sbcs	r3, r1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1d5      	bne.n	8003b2a <wrSensorRegs16_8+0xe>

	}
	return 1;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b006      	add	sp, #24
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	ffff0001 	.word	0xffff0001

08003b8c <rdSensorReg16_8>:

uint8_t rdSensorReg16_8(uint16_t regID, uint8_t *regDat) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	0002      	movs	r2, r0
 8003b94:	6039      	str	r1, [r7, #0]
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	801a      	strh	r2, [r3, #0]

	uint8_t I2C_buf_register[2];

	I2C_buf_register[0] = regID >> 8;
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	210c      	movs	r1, #12
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
	I2C_buf_register[1] = regID & 0x00FF;
 8003baa:	1dbb      	adds	r3, r7, #6
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0x78, I2C_buf_register, 2, HAL_MAX_DELAY);
 8003bb4:	187a      	adds	r2, r7, r1
 8003bb6:	480c      	ldr	r0, [pc, #48]	; (8003be8 <rdSensorReg16_8+0x5c>)
 8003bb8:	2301      	movs	r3, #1
 8003bba:	425b      	negs	r3, r3
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	2178      	movs	r1, #120	; 0x78
 8003bc2:	f003 ffe9 	bl	8007b98 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, 0x79, regDat, 1, HAL_MAX_DELAY);
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	4807      	ldr	r0, [pc, #28]	; (8003be8 <rdSensorReg16_8+0x5c>)
 8003bca:	2301      	movs	r3, #1
 8003bcc:	425b      	negs	r3, r3
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	2179      	movs	r1, #121	; 0x79
 8003bd4:	f004 f8e8 	bl	8007da8 <HAL_I2C_Master_Receive>

	HAL_Delay(1);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f003 f9db 	bl	8006f94 <HAL_Delay>

	return 1;
 8003bde:	2301      	movs	r3, #1
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b004      	add	sp, #16
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000030 	.word	0x20000030

08003bec <wrSensorReg16_8>:

uint8_t wrSensorReg16_8(int regID, int regDat) {
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
	uint8_t ret = 0;
 8003bf6:	200f      	movs	r0, #15
 8003bf8:	183b      	adds	r3, r7, r0
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
	uint8_t I2C_buf_register[3];

	I2C_buf_register[0] = regID >> 8;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	121b      	asrs	r3, r3, #8
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	210c      	movs	r1, #12
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	701a      	strb	r2, [r3, #0]
	I2C_buf_register[1] = regID & 0x00FF;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	705a      	strb	r2, [r3, #1]
	I2C_buf_register[2] = regDat & 0x00FF;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	709a      	strb	r2, [r3, #2]
	ret = HAL_I2C_Master_Transmit(&hi2c1, 0x78, I2C_buf_register, 3,
 8003c1a:	183c      	adds	r4, r7, r0
 8003c1c:	187a      	adds	r2, r7, r1
 8003c1e:	4807      	ldr	r0, [pc, #28]	; (8003c3c <wrSensorReg16_8+0x50>)
 8003c20:	2301      	movs	r3, #1
 8003c22:	425b      	negs	r3, r3
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2303      	movs	r3, #3
 8003c28:	2178      	movs	r1, #120	; 0x78
 8003c2a:	f003 ffb5 	bl	8007b98 <HAL_I2C_Master_Transmit>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	7023      	strb	r3, [r4, #0]
			HAL_MAX_DELAY);

	return 1;
 8003c32:	2301      	movs	r3, #1
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b005      	add	sp, #20
 8003c3a:	bd90      	pop	{r4, r7, pc}
 8003c3c:	20000030 	.word	0x20000030

08003c40 <write_reg>:

void write_reg(int address, int value) {
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
	uint8_t temp = 0;
 8003c4a:	240f      	movs	r4, #15
 8003c4c:	193b      	adds	r3, r7, r4
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
	uint8_t spi_recv_buf = 0;
 8003c52:	230e      	movs	r3, #14
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
	uint8_t spi_buf;

	spi_buf = address | 0x80;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	4252      	negs	r2, r2
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b25b      	sxtb	r3, r3
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	250d      	movs	r5, #13
 8003c6a:	197b      	adds	r3, r7, r5
 8003c6c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	015b      	lsls	r3, r3, #5
 8003c72:	4816      	ldr	r0, [pc, #88]	; (8003ccc <write_reg+0x8c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	0019      	movs	r1, r3
 8003c78:	f003 fe8c 	bl	8007994 <HAL_GPIO_WritePin>
	temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 8003c7c:	0026      	movs	r6, r4
 8003c7e:	193c      	adds	r4, r7, r4
 8003c80:	230e      	movs	r3, #14
 8003c82:	18fa      	adds	r2, r7, r3
 8003c84:	1979      	adds	r1, r7, r5
 8003c86:	4812      	ldr	r0, [pc, #72]	; (8003cd0 <write_reg+0x90>)
 8003c88:	2364      	movs	r3, #100	; 0x64
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f005 fedf 	bl	8009a50 <HAL_SPI_TransmitReceive>
 8003c92:	0003      	movs	r3, r0
 8003c94:	7023      	strb	r3, [r4, #0]

	spi_buf = value;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	197b      	adds	r3, r7, r5
 8003c9c:	701a      	strb	r2, [r3, #0]
	temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 8003c9e:	19bc      	adds	r4, r7, r6
 8003ca0:	230e      	movs	r3, #14
 8003ca2:	18fa      	adds	r2, r7, r3
 8003ca4:	1979      	adds	r1, r7, r5
 8003ca6:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <write_reg+0x90>)
 8003ca8:	2364      	movs	r3, #100	; 0x64
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2301      	movs	r3, #1
 8003cae:	f005 fecf 	bl	8009a50 <HAL_SPI_TransmitReceive>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	015b      	lsls	r3, r3, #5
 8003cba:	4804      	ldr	r0, [pc, #16]	; (8003ccc <write_reg+0x8c>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	f003 fe68 	bl	8007994 <HAL_GPIO_WritePin>

}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b005      	add	sp, #20
 8003cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ccc:	50000400 	.word	0x50000400
 8003cd0:	200000ec 	.word	0x200000ec

08003cd4 <read_reg>:

uint8_t read_reg(int address) {
 8003cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0;
 8003cdc:	240f      	movs	r4, #15
 8003cde:	193b      	adds	r3, r7, r4
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
	uint8_t spi_recv_buf = 0;
 8003ce4:	250e      	movs	r5, #14
 8003ce6:	197b      	adds	r3, r7, r5
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
	uint8_t spi_buf;

	spi_buf = address;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	260d      	movs	r6, #13
 8003cf2:	19bb      	adds	r3, r7, r6
 8003cf4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	015b      	lsls	r3, r3, #5
 8003cfa:	4816      	ldr	r0, [pc, #88]	; (8003d54 <read_reg+0x80>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	0019      	movs	r1, r3
 8003d00:	f003 fe48 	bl	8007994 <HAL_GPIO_WritePin>
	temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 8003d04:	193c      	adds	r4, r7, r4
 8003d06:	197a      	adds	r2, r7, r5
 8003d08:	19b9      	adds	r1, r7, r6
 8003d0a:	4813      	ldr	r0, [pc, #76]	; (8003d58 <read_reg+0x84>)
 8003d0c:	2364      	movs	r3, #100	; 0x64
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2301      	movs	r3, #1
 8003d12:	f005 fe9d 	bl	8009a50 <HAL_SPI_TransmitReceive>
 8003d16:	0003      	movs	r3, r0
 8003d18:	7023      	strb	r3, [r4, #0]

	spi_buf = 0x00;
 8003d1a:	19bb      	adds	r3, r7, r6
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
	temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
 8003d20:	240f      	movs	r4, #15
 8003d22:	193c      	adds	r4, r7, r4
 8003d24:	197a      	adds	r2, r7, r5
 8003d26:	19b9      	adds	r1, r7, r6
 8003d28:	480b      	ldr	r0, [pc, #44]	; (8003d58 <read_reg+0x84>)
 8003d2a:	2364      	movs	r3, #100	; 0x64
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f005 fe8e 	bl	8009a50 <HAL_SPI_TransmitReceive>
 8003d34:	0003      	movs	r3, r0
 8003d36:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	015b      	lsls	r3, r3, #5
 8003d3c:	4805      	ldr	r0, [pc, #20]	; (8003d54 <read_reg+0x80>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	0019      	movs	r1, r3
 8003d42:	f003 fe27 	bl	8007994 <HAL_GPIO_WritePin>
	return spi_recv_buf;
 8003d46:	197b      	adds	r3, r7, r5
 8003d48:	781b      	ldrb	r3, [r3, #0]

}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b005      	add	sp, #20
 8003d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	50000400 	.word	0x50000400
 8003d58:	200000ec 	.word	0x200000ec

08003d5c <get_bit>:

uint8_t get_bit(uint8_t addr, uint8_t bit) {
 8003d5c:	b5b0      	push	{r4, r5, r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	0002      	movs	r2, r0
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	1dbb      	adds	r3, r7, #6
 8003d6a:	1c0a      	adds	r2, r1, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	temp = read_reg(addr & 0x7F);
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	227f      	movs	r2, #127	; 0x7f
 8003d74:	4013      	ands	r3, r2
 8003d76:	250f      	movs	r5, #15
 8003d78:	197c      	adds	r4, r7, r5
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff ffaa 	bl	8003cd4 <read_reg>
 8003d80:	0003      	movs	r3, r0
 8003d82:	7023      	strb	r3, [r4, #0]
	temp = temp & bit;
 8003d84:	0028      	movs	r0, r5
 8003d86:	183b      	adds	r3, r7, r0
 8003d88:	183a      	adds	r2, r7, r0
 8003d8a:	1db9      	adds	r1, r7, #6
 8003d8c:	7812      	ldrb	r2, [r2, #0]
 8003d8e:	7809      	ldrb	r1, [r1, #0]
 8003d90:	400a      	ands	r2, r1
 8003d92:	701a      	strb	r2, [r3, #0]
	return temp;
 8003d94:	183b      	adds	r3, r7, r0
 8003d96:	781b      	ldrb	r3, [r3, #0]
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bdb0      	pop	{r4, r5, r7, pc}

08003da0 <initCam>:
		return true;
	}
	return false;
}

void initCam() {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0

	wrSensorReg16_8(0x3008, 0x80);
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <initCam+0x78>)
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff ff1f 	bl	8003bec <wrSensorReg16_8>
	wrSensorRegs16_8(OV5642_QVGA_Preview);
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <initCam+0x7c>)
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff feb3 	bl	8003b1c <wrSensorRegs16_8>

	HAL_Delay(200);
 8003db6:	20c8      	movs	r0, #200	; 0xc8
 8003db8:	f003 f8ec 	bl	8006f94 <HAL_Delay>

	wrSensorRegs16_8(OV5642_JPEG_Capture_QSXGA);
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <initCam+0x80>)
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7ff feac 	bl	8003b1c <wrSensorRegs16_8>
	wrSensorRegs16_8(ov5642_320x240);
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <initCam+0x84>)
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7ff fea8 	bl	8003b1c <wrSensorRegs16_8>
	HAL_Delay(100);
 8003dcc:	2064      	movs	r0, #100	; 0x64
 8003dce:	f003 f8e1 	bl	8006f94 <HAL_Delay>

	wrSensorReg16_8(0x3818, 0xa8);
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <initCam+0x88>)
 8003dd4:	21a8      	movs	r1, #168	; 0xa8
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff ff08 	bl	8003bec <wrSensorReg16_8>
	wrSensorReg16_8(0x3621, 0x10);
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <initCam+0x8c>)
 8003dde:	2110      	movs	r1, #16
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff ff03 	bl	8003bec <wrSensorReg16_8>
	wrSensorReg16_8(0x3801, 0xb0);
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <initCam+0x90>)
 8003de8:	21b0      	movs	r1, #176	; 0xb0
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7ff fefe 	bl	8003bec <wrSensorReg16_8>
	wrSensorReg16_8(0x4407, 0x08);
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <initCam+0x94>)
 8003df2:	2108      	movs	r1, #8
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7ff fef9 	bl	8003bec <wrSensorReg16_8>
	wrSensorReg16_8(0x5888, 0x00);
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <initCam+0x98>)
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff fef4 	bl	8003bec <wrSensorReg16_8>
	wrSensorReg16_8(0x5000, 0xFF);
 8003e04:	23a0      	movs	r3, #160	; 0xa0
 8003e06:	01db      	lsls	r3, r3, #7
 8003e08:	21ff      	movs	r1, #255	; 0xff
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7ff feee 	bl	8003bec <wrSensorReg16_8>
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	00003008 	.word	0x00003008
 8003e1c:	0800b5b4 	.word	0x0800b5b4
 8003e20:	0800bed4 	.word	0x0800bed4
 8003e24:	0800b4e0 	.word	0x0800b4e0
 8003e28:	00003818 	.word	0x00003818
 8003e2c:	00003621 	.word	0x00003621
 8003e30:	00003801 	.word	0x00003801
 8003e34:	00004407 	.word	0x00004407
 8003e38:	00005888 	.word	0x00005888

08003e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e40:	b672      	cpsid	i
}
 8003e42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <Error_Handler+0x8>
	...

08003e48 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <MX_SPI1_Init+0x78>)
 8003e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e54:	2282      	movs	r2, #130	; 0x82
 8003e56:	0052      	lsls	r2, r2, #1
 8003e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e62:	22e0      	movs	r2, #224	; 0xe0
 8003e64:	00d2      	lsls	r2, r2, #3
 8003e66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e7e:	2210      	movs	r2, #16
 8003e80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e96:	2207      	movs	r2, #7
 8003e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <MX_SPI1_Init+0x74>)
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f005 fa75 	bl	8009398 <HAL_SPI_Init>
 8003eae:	1e03      	subs	r3, r0, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003eb2:	f7ff ffc3 	bl	8003e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000088 	.word	0x20000088
 8003ec0:	40013000 	.word	0x40013000

08003ec4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003eca:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <MX_SPI2_Init+0x78>)
 8003ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003ed0:	2282      	movs	r2, #130	; 0x82
 8003ed2:	0052      	lsls	r2, r2, #1
 8003ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ed6:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003ede:	22e0      	movs	r2, #224	; 0xe0
 8003ee0:	00d2      	lsls	r2, r2, #3
 8003ee2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee4:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003ef2:	2280      	movs	r2, #128	; 0x80
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003efa:	2218      	movs	r2, #24
 8003efc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003f12:	2207      	movs	r2, #7
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <MX_SPI2_Init+0x74>)
 8003f24:	0018      	movs	r0, r3
 8003f26:	f005 fa37 	bl	8009398 <HAL_SPI_Init>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003f2e:	f7ff ff85 	bl	8003e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200000ec 	.word	0x200000ec
 8003f3c:	40003800 	.word	0x40003800

08003f40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b08d      	sub	sp, #52	; 0x34
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	241c      	movs	r4, #28
 8003f4a:	193b      	adds	r3, r7, r4
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	2314      	movs	r3, #20
 8003f50:	001a      	movs	r2, r3
 8003f52:	2100      	movs	r1, #0
 8003f54:	f007 f9d6 	bl	800b304 <memset>
  if(spiHandle->Instance==SPI1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a86      	ldr	r2, [pc, #536]	; (8004178 <HAL_SPI_MspInit+0x238>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d15a      	bne.n	8004018 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f62:	4b86      	ldr	r3, [pc, #536]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8003f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f66:	4b85      	ldr	r3, [pc, #532]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	0149      	lsls	r1, r1, #5
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f70:	4b82      	ldr	r3, [pc, #520]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8003f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	015b      	lsls	r3, r3, #5
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	4b7f      	ldr	r3, [pc, #508]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8003f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f82:	4b7e      	ldr	r3, [pc, #504]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34
 8003f8a:	4b7c      	ldr	r3, [pc, #496]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003f96:	0021      	movs	r1, r4
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	22c2      	movs	r2, #194	; 0xc2
 8003f9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	2200      	movs	r2, #0
 8003fae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb6:	187a      	adds	r2, r7, r1
 8003fb8:	23a0      	movs	r3, #160	; 0xa0
 8003fba:	05db      	lsls	r3, r3, #23
 8003fbc:	0011      	movs	r1, r2
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f003 fb84 	bl	80076cc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003fc4:	4b6e      	ldr	r3, [pc, #440]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003fc6:	4a6f      	ldr	r2, [pc, #444]	; (8004184 <HAL_SPI_MspInit+0x244>)
 8003fc8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003fcc:	2211      	movs	r2, #17
 8003fce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd6:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003fde:	2280      	movs	r2, #128	; 0x80
 8003fe0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fe2:	4b67      	ldr	r3, [pc, #412]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fe8:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003fee:	4b64      	ldr	r3, [pc, #400]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ff4:	4b62      	ldr	r3, [pc, #392]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003ffa:	4b61      	ldr	r3, [pc, #388]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f003 f913 	bl	8007228 <HAL_DMA_Init>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d001      	beq.n	800400a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8004006:	f7ff ff19 	bl	8003e3c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a5c      	ldr	r2, [pc, #368]	; (8004180 <HAL_SPI_MspInit+0x240>)
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
 8004010:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <HAL_SPI_MspInit+0x240>)
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004016:	e0aa      	b.n	800416e <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5a      	ldr	r2, [pc, #360]	; (8004188 <HAL_SPI_MspInit+0x248>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d000      	beq.n	8004024 <HAL_SPI_MspInit+0xe4>
 8004022:	e0a4      	b.n	800416e <HAL_SPI_MspInit+0x22e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004024:	4b55      	ldr	r3, [pc, #340]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8004026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004028:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_SPI_MspInit+0x23c>)
 800402a:	2180      	movs	r1, #128	; 0x80
 800402c:	01c9      	lsls	r1, r1, #7
 800402e:	430a      	orrs	r2, r1
 8004030:	63da      	str	r2, [r3, #60]	; 0x3c
 8004032:	4b52      	ldr	r3, [pc, #328]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8004034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	01db      	lsls	r3, r3, #7
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004040:	4b4e      	ldr	r3, [pc, #312]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8004042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8004046:	2104      	movs	r1, #4
 8004048:	430a      	orrs	r2, r1
 800404a:	635a      	str	r2, [r3, #52]	; 0x34
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_SPI_MspInit+0x23c>)
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	2204      	movs	r2, #4
 8004052:	4013      	ands	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <HAL_SPI_MspInit+0x23c>)
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_SPI_MspInit+0x23c>)
 800405e:	2101      	movs	r1, #1
 8004060:	430a      	orrs	r2, r1
 8004062:	635a      	str	r2, [r3, #52]	; 0x34
 8004064:	4b45      	ldr	r3, [pc, #276]	; (800417c <HAL_SPI_MspInit+0x23c>)
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	2201      	movs	r2, #1
 800406a:	4013      	ands	r3, r2
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004070:	241c      	movs	r4, #28
 8004072:	193b      	adds	r3, r7, r4
 8004074:	220c      	movs	r2, #12
 8004076:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	193b      	adds	r3, r7, r4
 800407a:	2202      	movs	r2, #2
 800407c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	193b      	adds	r3, r7, r4
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004084:	193b      	adds	r3, r7, r4
 8004086:	2200      	movs	r2, #0
 8004088:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800408a:	193b      	adds	r3, r7, r4
 800408c:	2201      	movs	r2, #1
 800408e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004090:	193b      	adds	r3, r7, r4
 8004092:	4a3e      	ldr	r2, [pc, #248]	; (800418c <HAL_SPI_MspInit+0x24c>)
 8004094:	0019      	movs	r1, r3
 8004096:	0010      	movs	r0, r2
 8004098:	f003 fb18 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800409c:	0021      	movs	r1, r4
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	2202      	movs	r2, #2
 80040a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	187b      	adds	r3, r7, r1
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	2200      	movs	r2, #0
 80040b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040bc:	187a      	adds	r2, r7, r1
 80040be:	23a0      	movs	r3, #160	; 0xa0
 80040c0:	05db      	lsls	r3, r3, #23
 80040c2:	0011      	movs	r1, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f003 fb01 	bl	80076cc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel1;
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040cc:	4a31      	ldr	r2, [pc, #196]	; (8004194 <HAL_SPI_MspInit+0x254>)
 80040ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80040d0:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040d2:	2212      	movs	r2, #18
 80040d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040d6:	4b2e      	ldr	r3, [pc, #184]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040dc:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040e2:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040ee:	4b28      	ldr	r3, [pc, #160]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80040f4:	4b26      	ldr	r3, [pc, #152]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040fa:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_SPI_MspInit+0x250>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <HAL_SPI_MspInit+0x250>)
 8004102:	0018      	movs	r0, r3
 8004104:	f003 f890 	bl	8007228 <HAL_DMA_Init>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <HAL_SPI_MspInit+0x1d0>
      Error_Handler();
 800410c:	f7ff fe96 	bl	8003e3c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <HAL_SPI_MspInit+0x250>)
 8004114:	659a      	str	r2, [r3, #88]	; 0x58
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_SPI_MspInit+0x250>)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel2;
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_SPI_MspInit+0x258>)
 800411e:	4a1f      	ldr	r2, [pc, #124]	; (800419c <HAL_SPI_MspInit+0x25c>)
 8004120:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_SPI_MspInit+0x258>)
 8004124:	2213      	movs	r2, #19
 8004126:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_SPI_MspInit+0x258>)
 800412a:	2210      	movs	r2, #16
 800412c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_SPI_MspInit+0x258>)
 8004130:	2200      	movs	r2, #0
 8004132:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004134:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_SPI_MspInit+0x258>)
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_SPI_MspInit+0x258>)
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004140:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_SPI_MspInit+0x258>)
 8004142:	2200      	movs	r2, #0
 8004144:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_SPI_MspInit+0x258>)
 8004148:	2200      	movs	r2, #0
 800414a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_SPI_MspInit+0x258>)
 800414e:	2200      	movs	r2, #0
 8004150:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004152:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_SPI_MspInit+0x258>)
 8004154:	0018      	movs	r0, r3
 8004156:	f003 f867 	bl	8007228 <HAL_DMA_Init>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d001      	beq.n	8004162 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800415e:	f7ff fe6d 	bl	8003e3c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <HAL_SPI_MspInit+0x258>)
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_SPI_MspInit+0x258>)
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b00d      	add	sp, #52	; 0x34
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	40013000 	.word	0x40013000
 800417c:	40021000 	.word	0x40021000
 8004180:	20000150 	.word	0x20000150
 8004184:	40020044 	.word	0x40020044
 8004188:	40003800 	.word	0x40003800
 800418c:	50000800 	.word	0x50000800
 8004190:	200001ac 	.word	0x200001ac
 8004194:	40020008 	.word	0x40020008
 8004198:	20000208 	.word	0x20000208
 800419c:	4002001c 	.word	0x4002001c

080041a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_MspInit+0x4c>)
 80041a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_MspInit+0x4c>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	430a      	orrs	r2, r1
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <HAL_MspInit+0x4c>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2201      	movs	r2, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_MspInit+0x4c>)
 80041c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_MspInit+0x4c>)
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	0549      	lsls	r1, r1, #21
 80041c8:	430a      	orrs	r2, r1
 80041ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <HAL_MspInit+0x4c>)
 80041ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	055b      	lsls	r3, r3, #21
 80041d4:	4013      	ands	r3, r2
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80041da:	23c0      	movs	r3, #192	; 0xc0
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	0018      	movs	r0, r3
 80041e0:	f002 fefc 	bl	8006fdc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000

080041f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041f4:	e7fe      	b.n	80041f4 <NMI_Handler+0x4>

080041f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041fa:	e7fe      	b.n	80041fa <HardFault_Handler+0x4>

080041fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004214:	f002 fea2 	bl	8006f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8004222:	2008      	movs	r0, #8
 8004224:	f003 fbee 	bl	8007a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <DMA1_Channel1_IRQHandler+0x14>)
 8004236:	0018      	movs	r0, r3
 8004238:	f003 f906 	bl	8007448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	200001ac 	.word	0x200001ac

08004248 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <DMA1_Channel2_3_IRQHandler+0x14>)
 800424e:	0018      	movs	r0, r3
 8004250:	f003 f8fa 	bl	8007448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	20000208 	.word	0x20000208

08004260 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8004266:	0018      	movs	r0, r3
 8004268:	f003 f8ee 	bl	8007448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	20000150 	.word	0x20000150

08004278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004288:	4b23      	ldr	r3, [pc, #140]	; (8004318 <MX_USART2_UART_Init+0x94>)
 800428a:	4a24      	ldr	r2, [pc, #144]	; (800431c <MX_USART2_UART_Init+0x98>)
 800428c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800428e:	4b22      	ldr	r3, [pc, #136]	; (8004318 <MX_USART2_UART_Init+0x94>)
 8004290:	22e1      	movs	r2, #225	; 0xe1
 8004292:	0252      	lsls	r2, r2, #9
 8004294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <MX_USART2_UART_Init+0x94>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <MX_USART2_UART_Init+0x94>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042aa:	220c      	movs	r2, #12
 80042ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b4:	4b18      	ldr	r3, [pc, #96]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042bc:	2200      	movs	r2, #0
 80042be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042c0:	4b15      	ldr	r3, [pc, #84]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042ce:	0018      	movs	r0, r3
 80042d0:	f006 fa20 	bl	800a714 <HAL_UART_Init>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d001      	beq.n	80042dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80042d8:	f7ff fdb0 	bl	8003e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042de:	2100      	movs	r1, #0
 80042e0:	0018      	movs	r0, r3
 80042e2:	f006 ff2f 	bl	800b144 <HAL_UARTEx_SetTxFifoThreshold>
 80042e6:	1e03      	subs	r3, r0, #0
 80042e8:	d001      	beq.n	80042ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80042ea:	f7ff fda7 	bl	8003e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <MX_USART2_UART_Init+0x94>)
 80042f0:	2100      	movs	r1, #0
 80042f2:	0018      	movs	r0, r3
 80042f4:	f006 ff66 	bl	800b1c4 <HAL_UARTEx_SetRxFifoThreshold>
 80042f8:	1e03      	subs	r3, r0, #0
 80042fa:	d001      	beq.n	8004300 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80042fc:	f7ff fd9e 	bl	8003e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <MX_USART2_UART_Init+0x94>)
 8004302:	0018      	movs	r0, r3
 8004304:	f006 fee4 	bl	800b0d0 <HAL_UARTEx_DisableFifoMode>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d001      	beq.n	8004310 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800430c:	f7ff fd96 	bl	8003e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	20000264 	.word	0x20000264
 800431c:	40004400 	.word	0x40004400

08004320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b097      	sub	sp, #92	; 0x5c
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	2344      	movs	r3, #68	; 0x44
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	0018      	movs	r0, r3
 800432e:	2314      	movs	r3, #20
 8004330:	001a      	movs	r2, r3
 8004332:	2100      	movs	r1, #0
 8004334:	f006 ffe6 	bl	800b304 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004338:	2410      	movs	r4, #16
 800433a:	193b      	adds	r3, r7, r4
 800433c:	0018      	movs	r0, r3
 800433e:	2334      	movs	r3, #52	; 0x34
 8004340:	001a      	movs	r2, r3
 8004342:	2100      	movs	r1, #0
 8004344:	f006 ffde 	bl	800b304 <memset>
  if(uartHandle->Instance==USART2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <HAL_UART_MspInit+0xb8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d13e      	bne.n	80043d0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004352:	193b      	adds	r3, r7, r4
 8004354:	2202      	movs	r2, #2
 8004356:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004358:	193b      	adds	r3, r7, r4
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800435e:	193b      	adds	r3, r7, r4
 8004360:	0018      	movs	r0, r3
 8004362:	f004 fe61 	bl	8009028 <HAL_RCCEx_PeriphCLKConfig>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d001      	beq.n	800436e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800436a:	f7ff fd67 	bl	8003e3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_UART_MspInit+0xbc>)
 8004370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_UART_MspInit+0xbc>)
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	0289      	lsls	r1, r1, #10
 8004378:	430a      	orrs	r2, r1
 800437a:	63da      	str	r2, [r3, #60]	; 0x3c
 800437c:	4b17      	ldr	r3, [pc, #92]	; (80043dc <HAL_UART_MspInit+0xbc>)
 800437e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	029b      	lsls	r3, r3, #10
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_UART_MspInit+0xbc>)
 800438c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_UART_MspInit+0xbc>)
 8004390:	2101      	movs	r1, #1
 8004392:	430a      	orrs	r2, r1
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_UART_MspInit+0xbc>)
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	2201      	movs	r2, #1
 800439c:	4013      	ands	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80043a2:	2144      	movs	r1, #68	; 0x44
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	220c      	movs	r2, #12
 80043a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	2202      	movs	r2, #2
 80043ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043b0:	187b      	adds	r3, r7, r1
 80043b2:	2201      	movs	r2, #1
 80043b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	2200      	movs	r2, #0
 80043ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	2201      	movs	r2, #1
 80043c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c2:	187a      	adds	r2, r7, r1
 80043c4:	23a0      	movs	r3, #160	; 0xa0
 80043c6:	05db      	lsls	r3, r3, #23
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f003 f97e 	bl	80076cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b017      	add	sp, #92	; 0x5c
 80043d6:	bd90      	pop	{r4, r7, pc}
 80043d8:	40004400 	.word	0x40004400
 80043dc:	40021000 	.word	0x40021000

080043e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043e0:	480d      	ldr	r0, [pc, #52]	; (8004418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043e4:	f7ff ff48 	bl	8004278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043e8:	480c      	ldr	r0, [pc, #48]	; (800441c <LoopForever+0x6>)
  ldr r1, =_edata
 80043ea:	490d      	ldr	r1, [pc, #52]	; (8004420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043ec:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <LoopForever+0xe>)
  movs r3, #0
 80043ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043f0:	e002      	b.n	80043f8 <LoopCopyDataInit>

080043f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043f6:	3304      	adds	r3, #4

080043f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043fc:	d3f9      	bcc.n	80043f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004400:	4c0a      	ldr	r4, [pc, #40]	; (800442c <LoopForever+0x16>)
  movs r3, #0
 8004402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004404:	e001      	b.n	800440a <LoopFillZerobss>

08004406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004408:	3204      	adds	r2, #4

0800440a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800440a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800440c:	d3fb      	bcc.n	8004406 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800440e:	f006 ff81 	bl	800b314 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004412:	f7ff f89f 	bl	8003554 <main>

08004416 <LoopForever>:

LoopForever:
  b LoopForever
 8004416:	e7fe      	b.n	8004416 <LoopForever>
  ldr   r0, =_estack
 8004418:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800441c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004420:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004424:	0800c1e8 	.word	0x0800c1e8
  ldr r2, =_sbss
 8004428:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800442c:	20000308 	.word	0x20000308

08004430 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004430:	e7fe      	b.n	8004430 <ADC1_COMP_IRQHandler>
	...

08004434 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	0002      	movs	r2, r0
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8004440:	240f      	movs	r4, #15
 8004442:	193b      	adds	r3, r7, r4
 8004444:	001a      	movs	r2, r3
 8004446:	2101      	movs	r1, #1
 8004448:	2050      	movs	r0, #80	; 0x50
 800444a:	f002 fbed 	bl	8006c28 <RadioSpiReadRegisters>
 800444e:	1c03      	adds	r3, r0, #0
 8004450:	1c1a      	adds	r2, r3, #0
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <SpiritCalibrationVco+0x7c>)
 8004454:	b212      	sxth	r2, r2
 8004456:	1c11      	adds	r1, r2, #0
 8004458:	7019      	strb	r1, [r3, #0]
 800445a:	0412      	lsls	r2, r2, #16
 800445c:	0e12      	lsrs	r2, r2, #24
 800445e:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <SpiritCalibrationVco+0x44>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8004468:	193b      	adds	r3, r7, r4
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2202      	movs	r2, #2
 800446e:	4313      	orrs	r3, r2
 8004470:	b2da      	uxtb	r2, r3
 8004472:	193b      	adds	r3, r7, r4
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e007      	b.n	8004488 <SpiritCalibrationVco+0x54>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8004478:	210f      	movs	r1, #15
 800447a:	187b      	adds	r3, r7, r1
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2202      	movs	r2, #2
 8004480:	4393      	bics	r3, r2
 8004482:	b2da      	uxtb	r2, r3
 8004484:	187b      	adds	r3, r7, r1
 8004486:	701a      	strb	r2, [r3, #0]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8004488:	230f      	movs	r3, #15
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	001a      	movs	r2, r3
 800448e:	2101      	movs	r1, #1
 8004490:	2050      	movs	r0, #80	; 0x50
 8004492:	f002 fb67 	bl	8006b64 <RadioSpiWriteRegisters>
 8004496:	1c03      	adds	r3, r0, #0
 8004498:	1c1a      	adds	r2, r3, #0
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <SpiritCalibrationVco+0x7c>)
 800449c:	b212      	sxth	r2, r2
 800449e:	1c11      	adds	r1, r2, #0
 80044a0:	7019      	strb	r1, [r3, #0]
 80044a2:	0412      	lsls	r2, r2, #16
 80044a4:	0e12      	lsrs	r2, r2, #24
 80044a6:	705a      	strb	r2, [r3, #1]

}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b005      	add	sp, #20
 80044ae:	bd90      	pop	{r4, r7, pc}
 80044b0:	20000300 	.word	0x20000300

080044b4 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 80044ba:	1dfb      	adds	r3, r7, #7
 80044bc:	001a      	movs	r2, r3
 80044be:	2101      	movs	r1, #1
 80044c0:	20e5      	movs	r0, #229	; 0xe5
 80044c2:	f002 fbb1 	bl	8006c28 <RadioSpiReadRegisters>
 80044c6:	1c03      	adds	r3, r0, #0
 80044c8:	1c1a      	adds	r2, r3, #0
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <SpiritCalibrationGetVcoCalData+0x38>)
 80044cc:	b212      	sxth	r2, r2
 80044ce:	1c11      	adds	r1, r2, #0
 80044d0:	7019      	strb	r1, [r3, #0]
 80044d2:	0412      	lsls	r2, r2, #16
 80044d4:	0e12      	lsrs	r2, r2, #24
 80044d6:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	227f      	movs	r2, #127	; 0x7f
 80044de:	4013      	ands	r3, r2
 80044e0:	b2db      	uxtb	r3, r3

}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b002      	add	sp, #8
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20000300 	.word	0x20000300

080044f0 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0002      	movs	r2, r0
 80044f8:	1dfb      	adds	r3, r7, #7
 80044fa:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80044fc:	240f      	movs	r4, #15
 80044fe:	193b      	adds	r3, r7, r4
 8004500:	001a      	movs	r2, r3
 8004502:	2101      	movs	r1, #1
 8004504:	206e      	movs	r0, #110	; 0x6e
 8004506:	f002 fb8f 	bl	8006c28 <RadioSpiReadRegisters>
 800450a:	1c03      	adds	r3, r0, #0
 800450c:	1c1a      	adds	r2, r3, #0
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <SpiritCalibrationSetVcoCalDataTx+0x70>)
 8004510:	b212      	sxth	r2, r2
 8004512:	1c11      	adds	r1, r2, #0
 8004514:	7019      	strb	r1, [r3, #0]
 8004516:	0412      	lsls	r2, r2, #16
 8004518:	0e12      	lsrs	r2, r2, #24
 800451a:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 800451c:	193b      	adds	r3, r7, r4
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	227f      	movs	r2, #127	; 0x7f
 8004522:	4393      	bics	r3, r2
 8004524:	b2da      	uxtb	r2, r3
 8004526:	193b      	adds	r3, r7, r4
 8004528:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cVcoCalData;
 800452a:	193b      	adds	r3, r7, r4
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	4313      	orrs	r3, r2
 8004534:	b2da      	uxtb	r2, r3
 8004536:	193b      	adds	r3, r7, r4
 8004538:	701a      	strb	r2, [r3, #0]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 800453a:	193b      	adds	r3, r7, r4
 800453c:	001a      	movs	r2, r3
 800453e:	2101      	movs	r1, #1
 8004540:	206e      	movs	r0, #110	; 0x6e
 8004542:	f002 fb0f 	bl	8006b64 <RadioSpiWriteRegisters>
 8004546:	1c03      	adds	r3, r0, #0
 8004548:	1c1a      	adds	r2, r3, #0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <SpiritCalibrationSetVcoCalDataTx+0x70>)
 800454c:	b212      	sxth	r2, r2
 800454e:	1c11      	adds	r1, r2, #0
 8004550:	7019      	strb	r1, [r3, #0]
 8004552:	0412      	lsls	r2, r2, #16
 8004554:	0e12      	lsrs	r2, r2, #24
 8004556:	705a      	strb	r2, [r3, #1]

}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b005      	add	sp, #20
 800455e:	bd90      	pop	{r4, r7, pc}
 8004560:	20000300 	.word	0x20000300

08004564 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	0002      	movs	r2, r0
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8004570:	240f      	movs	r4, #15
 8004572:	193b      	adds	r3, r7, r4
 8004574:	001a      	movs	r2, r3
 8004576:	2101      	movs	r1, #1
 8004578:	206f      	movs	r0, #111	; 0x6f
 800457a:	f002 fb55 	bl	8006c28 <RadioSpiReadRegisters>
 800457e:	1c03      	adds	r3, r0, #0
 8004580:	1c1a      	adds	r2, r3, #0
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <SpiritCalibrationSetVcoCalDataRx+0x70>)
 8004584:	b212      	sxth	r2, r2
 8004586:	1c11      	adds	r1, r2, #0
 8004588:	7019      	strb	r1, [r3, #0]
 800458a:	0412      	lsls	r2, r2, #16
 800458c:	0e12      	lsrs	r2, r2, #24
 800458e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8004590:	193b      	adds	r3, r7, r4
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	227f      	movs	r2, #127	; 0x7f
 8004596:	4393      	bics	r3, r2
 8004598:	b2da      	uxtb	r2, r3
 800459a:	193b      	adds	r3, r7, r4
 800459c:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cVcoCalData;
 800459e:	193b      	adds	r3, r7, r4
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	1dfb      	adds	r3, r7, #7
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	701a      	strb	r2, [r3, #0]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 80045ae:	193b      	adds	r3, r7, r4
 80045b0:	001a      	movs	r2, r3
 80045b2:	2101      	movs	r1, #1
 80045b4:	206f      	movs	r0, #111	; 0x6f
 80045b6:	f002 fad5 	bl	8006b64 <RadioSpiWriteRegisters>
 80045ba:	1c03      	adds	r3, r0, #0
 80045bc:	1c1a      	adds	r2, r3, #0
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <SpiritCalibrationSetVcoCalDataRx+0x70>)
 80045c0:	b212      	sxth	r2, r2
 80045c2:	1c11      	adds	r1, r2, #0
 80045c4:	7019      	strb	r1, [r3, #0]
 80045c6:	0412      	lsls	r2, r2, #16
 80045c8:	0e12      	lsrs	r2, r2, #24
 80045ca:	705a      	strb	r2, [r3, #1]

}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b005      	add	sp, #20
 80045d2:	bd90      	pop	{r4, r7, pc}
 80045d4:	20000300 	.word	0x20000300

080045d8 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	0002      	movs	r2, r0
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80045e4:	240f      	movs	r4, #15
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	001a      	movs	r2, r3
 80045ea:	2101      	movs	r1, #1
 80045ec:	209e      	movs	r0, #158	; 0x9e
 80045ee:	f002 fb1b 	bl	8006c28 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 80045f2:	0021      	movs	r1, r4
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2206      	movs	r2, #6
 80045fa:	4393      	bics	r3, r2
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	187b      	adds	r3, r7, r1
 8004600:	701a      	strb	r2, [r3, #0]
  
  if(xVco == VCO_H)
 8004602:	1dfb      	adds	r3, r7, #7
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <SpiritCalibrationSelectVco+0x42>
  {
    tempRegValue |= 0x02;
 800460a:	187b      	adds	r3, r7, r1
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2202      	movs	r2, #2
 8004610:	4313      	orrs	r3, r2
 8004612:	b2da      	uxtb	r2, r3
 8004614:	187b      	adds	r3, r7, r1
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e007      	b.n	800462a <SpiritCalibrationSelectVco+0x52>
    
  }
  else
  {
    tempRegValue |= 0x04;
 800461a:	210f      	movs	r1, #15
 800461c:	187b      	adds	r3, r7, r1
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2204      	movs	r2, #4
 8004622:	4313      	orrs	r3, r2
 8004624:	b2da      	uxtb	r2, r3
 8004626:	187b      	adds	r3, r7, r1
 8004628:	701a      	strb	r2, [r3, #0]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 800462a:	230f      	movs	r3, #15
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	001a      	movs	r2, r3
 8004630:	2101      	movs	r1, #1
 8004632:	209e      	movs	r0, #158	; 0x9e
 8004634:	f002 fa96 	bl	8006b64 <RadioSpiWriteRegisters>
  
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b005      	add	sp, #20
 800463e:	bd90      	pop	{r4, r7, pc}

08004640 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	0002      	movs	r2, r0
 8004648:	1dfb      	adds	r3, r7, #7
 800464a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	0018      	movs	r0, r3
 8004652:	f002 fb4b 	bl	8006cec <RadioSpiCommandStrobes>
 8004656:	1c03      	adds	r3, r0, #0
 8004658:	1c1a      	adds	r2, r3, #0
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <SpiritCmdStrobeCommand+0x30>)
 800465c:	b212      	sxth	r2, r2
 800465e:	1c11      	adds	r1, r2, #0
 8004660:	7019      	strb	r1, [r3, #0]
 8004662:	0412      	lsls	r2, r2, #16
 8004664:	0e12      	lsrs	r2, r2, #24
 8004666:	705a      	strb	r2, [r3, #1]
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000300 	.word	0x20000300

08004674 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 800467c:	210f      	movs	r1, #15
 800467e:	187b      	adds	r3, r7, r1
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	785a      	ldrb	r2, [r3, #1]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	789b      	ldrb	r3, [r3, #2]
 800468c:	4313      	orrs	r3, r2
 800468e:	b2da      	uxtb	r2, r3
 8004690:	187b      	adds	r3, r7, r1
 8004692:	701a      	strb	r2, [r3, #0]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	187a      	adds	r2, r7, r1
 800469a:	2101      	movs	r1, #1
 800469c:	0018      	movs	r0, r3
 800469e:	f002 fa61 	bl	8006b64 <RadioSpiWriteRegisters>
 80046a2:	1c03      	adds	r3, r0, #0
 80046a4:	1c1a      	adds	r2, r3, #0
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <SpiritGpioInit+0x48>)
 80046a8:	b212      	sxth	r2, r2
 80046aa:	1c11      	adds	r1, r2, #0
 80046ac:	7019      	strb	r1, [r3, #0]
 80046ae:	0412      	lsls	r2, r2, #16
 80046b0:	0e12      	lsrs	r2, r2, #24
 80046b2:	705a      	strb	r2, [r3, #1]

}
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b004      	add	sp, #16
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000300 	.word	0x20000300

080046c0 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 80046c8:	230c      	movs	r3, #12
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

  if(pxIrqInit!=NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <SpiritIrqDeInit+0x34>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 80046d6:	2408      	movs	r4, #8
 80046d8:	193b      	adds	r3, r7, r4
 80046da:	2204      	movs	r2, #4
 80046dc:	2100      	movs	r1, #0
 80046de:	0018      	movs	r0, r3
 80046e0:	f006 fe10 	bl	800b304 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	0010      	movs	r0, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	2304      	movs	r3, #4
 80046ee:	001a      	movs	r2, r3
 80046f0:	f006 fe34 	bl	800b35c <memcpy>
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80046f4:	230c      	movs	r3, #12
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	001a      	movs	r2, r3
 80046fa:	2104      	movs	r1, #4
 80046fc:	2090      	movs	r0, #144	; 0x90
 80046fe:	f002 fa31 	bl	8006b64 <RadioSpiWriteRegisters>
 8004702:	1c03      	adds	r3, r0, #0
 8004704:	1c1a      	adds	r2, r3, #0
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <SpiritIrqDeInit+0x5c>)
 8004708:	b212      	sxth	r2, r2
 800470a:	1c11      	adds	r1, r2, #0
 800470c:	7019      	strb	r1, [r3, #0]
 800470e:	0412      	lsls	r2, r2, #16
 8004710:	0e12      	lsrs	r2, r2, #24
 8004712:	705a      	strb	r2, [r3, #1]
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b005      	add	sp, #20
 800471a:	bd90      	pop	{r4, r7, pc}
 800471c:	20000300 	.word	0x20000300

08004720 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	000a      	movs	r2, r1
 800472a:	1cfb      	adds	r3, r7, #3
 800472c:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8004732:	230c      	movs	r3, #12
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	001a      	movs	r2, r3
 8004738:	2104      	movs	r1, #4
 800473a:	2090      	movs	r0, #144	; 0x90
 800473c:	f002 fa74 	bl	8006c28 <RadioSpiReadRegisters>
 8004740:	1c03      	adds	r3, r0, #0
 8004742:	1c1a      	adds	r2, r3, #0
 8004744:	4b32      	ldr	r3, [pc, #200]	; (8004810 <SpiritIrq+0xf0>)
 8004746:	b212      	sxth	r2, r2
 8004748:	1c11      	adds	r1, r2, #0
 800474a:	7019      	strb	r1, [r3, #0]
 800474c:	0412      	lsls	r2, r2, #16
 800474e:	0e12      	lsrs	r2, r2, #24
 8004750:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8004752:	2313      	movs	r3, #19
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e015      	b.n	8004788 <SpiritIrq+0x68>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 800475c:	2013      	movs	r0, #19
 800475e:	183b      	adds	r3, r7, r0
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	220c      	movs	r2, #12
 8004764:	18ba      	adds	r2, r7, r2
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	0019      	movs	r1, r3
 800476a:	183b      	adds	r3, r7, r0
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2203      	movs	r2, #3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4099      	lsls	r1, r3
 8004776:	000b      	movs	r3, r1
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	18d3      	adds	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 800477e:	183b      	adds	r3, r7, r0
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	183b      	adds	r3, r7, r0
 8004784:	3201      	adds	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	2313      	movs	r3, #19
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b03      	cmp	r3, #3
 8004790:	d9e4      	bls.n	800475c <SpiritIrq+0x3c>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8004792:	1cfb      	adds	r3, r7, #3
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <SpiritIrq+0x86>
  {
    tempValue &= (~xIrq);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	43da      	mvns	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4013      	ands	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e003      	b.n	80047ae <SpiritIrq+0x8e>
  }
  else
  {
    tempValue |= (xIrq);
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80047ae:	2312      	movs	r3, #18
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e012      	b.n	80047de <SpiritIrq+0xbe>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80047b8:	2012      	movs	r0, #18
 80047ba:	183b      	adds	r3, r7, r0
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2203      	movs	r2, #3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	40da      	lsrs	r2, r3
 80047c8:	183b      	adds	r3, r7, r0
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2d1      	uxtb	r1, r2
 80047ce:	220c      	movs	r2, #12
 80047d0:	18ba      	adds	r2, r7, r2
 80047d2:	54d1      	strb	r1, [r2, r3]
  for(uint8_t j=0; j<4; j++)
 80047d4:	183b      	adds	r3, r7, r0
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	183b      	adds	r3, r7, r0
 80047da:	3201      	adds	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	2312      	movs	r3, #18
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d9e7      	bls.n	80047b8 <SpiritIrq+0x98>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80047e8:	230c      	movs	r3, #12
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	001a      	movs	r2, r3
 80047ee:	2104      	movs	r1, #4
 80047f0:	2090      	movs	r0, #144	; 0x90
 80047f2:	f002 f9b7 	bl	8006b64 <RadioSpiWriteRegisters>
 80047f6:	1c03      	adds	r3, r0, #0
 80047f8:	1c1a      	adds	r2, r3, #0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <SpiritIrq+0xf0>)
 80047fc:	b212      	sxth	r2, r2
 80047fe:	1c11      	adds	r1, r2, #0
 8004800:	7019      	strb	r1, [r3, #0]
 8004802:	0412      	lsls	r2, r2, #16
 8004804:	0e12      	lsrs	r2, r2, #24
 8004806:	705a      	strb	r2, [r3, #1]

}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b006      	add	sp, #24
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000300 	.word	0x20000300

08004814 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8004820:	230c      	movs	r3, #12
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	001a      	movs	r2, r3
 8004826:	2104      	movs	r1, #4
 8004828:	20fa      	movs	r0, #250	; 0xfa
 800482a:	f002 f9fd 	bl	8006c28 <RadioSpiReadRegisters>
 800482e:	1c03      	adds	r3, r0, #0
 8004830:	1c1a      	adds	r2, r3, #0
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <SpiritIrqGetStatus+0x70>)
 8004834:	b212      	sxth	r2, r2
 8004836:	1c11      	adds	r1, r2, #0
 8004838:	7019      	strb	r1, [r3, #0]
 800483a:	0412      	lsls	r2, r2, #16
 800483c:	0e12      	lsrs	r2, r2, #24
 800483e:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8004840:	2313      	movs	r3, #19
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e011      	b.n	800486e <SpiritIrqGetStatus+0x5a>
  {
    *pIrqPointer = tempRegValue[3-i];
 800484a:	2113      	movs	r1, #19
 800484c:	187b      	adds	r3, r7, r1
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2203      	movs	r2, #3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	220c      	movs	r2, #12
 8004856:	18ba      	adds	r2, r7, r2
 8004858:	5cd2      	ldrb	r2, [r2, r3]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	3301      	adds	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8004864:	187b      	adds	r3, r7, r1
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	187b      	adds	r3, r7, r1
 800486a:	3201      	adds	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	2313      	movs	r3, #19
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d9e8      	bls.n	800484a <SpiritIrqGetStatus+0x36>
  }
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b006      	add	sp, #24
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	20000300 	.word	0x20000300

08004888 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	001a      	movs	r2, r3
 8004892:	2104      	movs	r1, #4
 8004894:	20fa      	movs	r0, #250	; 0xfa
 8004896:	f002 f9c7 	bl	8006c28 <RadioSpiReadRegisters>
 800489a:	1c03      	adds	r3, r0, #0
 800489c:	1c1a      	adds	r2, r3, #0
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <SpiritIrqClearStatus+0x2c>)
 80048a0:	b212      	sxth	r2, r2
 80048a2:	1c11      	adds	r1, r2, #0
 80048a4:	7019      	strb	r1, [r3, #0]
 80048a6:	0412      	lsls	r2, r2, #16
 80048a8:	0e12      	lsrs	r2, r2, #24
 80048aa:	705a      	strb	r2, [r3, #1]

}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b002      	add	sp, #8
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000300 	.word	0x20000300

080048b8 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80048b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ba:	b08d      	sub	sp, #52	; 0x34
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a88      	ldr	r2, [pc, #544]	; (8004ae4 <SpiritManagementSetFrequencyBase+0x22c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d90a      	bls.n	80048de <SpiritManagementSetFrequencyBase+0x26>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a87      	ldr	r2, [pc, #540]	; (8004ae8 <SpiritManagementSetFrequencyBase+0x230>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d806      	bhi.n	80048de <SpiritManagementSetFrequencyBase+0x26>
  {
    band = HIGH_BAND;
 80048d0:	2327      	movs	r3, #39	; 0x27
 80048d2:	2208      	movs	r2, #8
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	19db      	adds	r3, r3, r7
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e023      	b.n	8004926 <SpiritManagementSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a82      	ldr	r2, [pc, #520]	; (8004aec <SpiritManagementSetFrequencyBase+0x234>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d90a      	bls.n	80048fc <SpiritManagementSetFrequencyBase+0x44>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a81      	ldr	r2, [pc, #516]	; (8004af0 <SpiritManagementSetFrequencyBase+0x238>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d806      	bhi.n	80048fc <SpiritManagementSetFrequencyBase+0x44>
  {
    band = MIDDLE_BAND;
 80048ee:	2327      	movs	r3, #39	; 0x27
 80048f0:	2208      	movs	r2, #8
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	19db      	adds	r3, r3, r7
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e014      	b.n	8004926 <SpiritManagementSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a7d      	ldr	r2, [pc, #500]	; (8004af4 <SpiritManagementSetFrequencyBase+0x23c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d90a      	bls.n	800491a <SpiritManagementSetFrequencyBase+0x62>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a7c      	ldr	r2, [pc, #496]	; (8004af8 <SpiritManagementSetFrequencyBase+0x240>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d806      	bhi.n	800491a <SpiritManagementSetFrequencyBase+0x62>
  {
    band = LOW_BAND;
 800490c:	2327      	movs	r3, #39	; 0x27
 800490e:	2208      	movs	r2, #8
 8004910:	189b      	adds	r3, r3, r2
 8004912:	19db      	adds	r3, r3, r7
 8004914:	2202      	movs	r2, #2
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	e005      	b.n	8004926 <SpiritManagementSetFrequencyBase+0x6e>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800491a:	2327      	movs	r3, #39	; 0x27
 800491c:	2208      	movs	r2, #8
 800491e:	189b      	adds	r3, r3, r2
 8004920:	19db      	adds	r3, r3, r7
 8004922:	2203      	movs	r2, #3
 8004924:	701a      	strb	r2, [r3, #0]
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8004926:	f001 f919 	bl	8005b5c <SpiritRadioGetFrequencyOffset>
 800492a:	0003      	movs	r3, r0
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800492e:	f001 f8f3 	bl	8005b18 <SpiritRadioGetChannelSpace>
 8004932:	0003      	movs	r3, r0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8004936:	251b      	movs	r5, #27
 8004938:	2608      	movs	r6, #8
 800493a:	19ab      	adds	r3, r5, r6
 800493c:	19dc      	adds	r4, r3, r7
 800493e:	f001 f8d1 	bl	8005ae4 <SpiritRadioGetChannel>
 8004942:	0003      	movs	r3, r0
 8004944:	7023      	strb	r3, [r4, #0]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8004946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	18d2      	adds	r2, r2, r3
 800494c:	0034      	movs	r4, r6
 800494e:	192b      	adds	r3, r5, r4
 8004950:	19db      	adds	r3, r3, r7
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004956:	434b      	muls	r3, r1
 8004958:	18d3      	adds	r3, r2, r3
 800495a:	61fb      	str	r3, [r7, #28]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 800495c:	f001 ffd2 	bl	8006904 <SpiritRadioGetRefDiv>
 8004960:	0003      	movs	r3, r0
 8004962:	001a      	movs	r2, r3
 8004964:	2313      	movs	r3, #19
 8004966:	191b      	adds	r3, r3, r4
 8004968:	19db      	adds	r3, r3, r7
 800496a:	3201      	adds	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
  
  switch(band)
 800496e:	2327      	movs	r3, #39	; 0x27
 8004970:	191b      	adds	r3, r3, r4
 8004972:	19db      	adds	r3, r3, r7
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b03      	cmp	r3, #3
 8004978:	d008      	beq.n	800498c <SpiritManagementSetFrequencyBase+0xd4>
 800497a:	dc36      	bgt.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
 800497c:	2b02      	cmp	r3, #2
 800497e:	d011      	beq.n	80049a4 <SpiritManagementSetFrequencyBase+0xec>
 8004980:	dc33      	bgt.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d026      	beq.n	80049d4 <SpiritManagementSetFrequencyBase+0x11c>
 8004986:	2b01      	cmp	r3, #1
 8004988:	d018      	beq.n	80049bc <SpiritManagementSetFrequencyBase+0x104>
 800498a:	e02e      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4a5b      	ldr	r2, [pc, #364]	; (8004afc <SpiritManagementSetFrequencyBase+0x244>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d803      	bhi.n	800499c <SpiritManagementSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8004994:	2000      	movs	r0, #0
 8004996:	f7ff fe1f 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800499a:	e026      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
      SpiritCalibrationSelectVco(VCO_H);
 800499c:	2001      	movs	r0, #1
 800499e:	f7ff fe1b 	bl	80045d8 <SpiritCalibrationSelectVco>
    break;
 80049a2:	e022      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
    
  case LOW_BAND:
    if(Fc<322562500)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4a56      	ldr	r2, [pc, #344]	; (8004b00 <SpiritManagementSetFrequencyBase+0x248>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d803      	bhi.n	80049b4 <SpiritManagementSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7ff fe13 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80049b2:	e01a      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
      SpiritCalibrationSelectVco(VCO_H);
 80049b4:	2001      	movs	r0, #1
 80049b6:	f7ff fe0f 	bl	80045d8 <SpiritCalibrationSelectVco>
    break;
 80049ba:	e016      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4a51      	ldr	r2, [pc, #324]	; (8004b04 <SpiritManagementSetFrequencyBase+0x24c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d803      	bhi.n	80049cc <SpiritManagementSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7ff fe07 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80049ca:	e00e      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
      SpiritCalibrationSelectVco(VCO_H);
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7ff fe03 	bl	80045d8 <SpiritCalibrationSelectVco>
    break;
 80049d2:	e00a      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4a4c      	ldr	r2, [pc, #304]	; (8004b08 <SpiritManagementSetFrequencyBase+0x250>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d803      	bhi.n	80049e4 <SpiritManagementSetFrequencyBase+0x12c>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80049dc:	2000      	movs	r0, #0
 80049de:	f7ff fdfb 	bl	80045d8 <SpiritCalibrationSelectVco>
 80049e2:	e002      	b.n	80049ea <SpiritManagementSetFrequencyBase+0x132>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80049e4:	2001      	movs	r0, #1
 80049e6:	f7ff fdf7 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80049ea:	2612      	movs	r6, #18
 80049ec:	2108      	movs	r1, #8
 80049ee:	1873      	adds	r3, r6, r1
 80049f0:	19dc      	adds	r4, r3, r7
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 ff5b 	bl	80058b0 <SpiritRadioSearchWCP>
 80049fa:	0003      	movs	r3, r0
 80049fc:	7023      	strb	r3, [r4, #0]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fe fba6 	bl	8003150 <__aeabi_ui2d>
 8004a04:	0004      	movs	r4, r0
 8004a06:	000d      	movs	r5, r1
 8004a08:	2313      	movs	r3, #19
 8004a0a:	2108      	movs	r1, #8
 8004a0c:	185b      	adds	r3, r3, r1
 8004a0e:	19db      	adds	r3, r3, r7
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2227      	movs	r2, #39	; 0x27
 8004a14:	1852      	adds	r2, r2, r1
 8004a16:	19d2      	adds	r2, r2, r7
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	493c      	ldr	r1, [pc, #240]	; (8004b0c <SpiritManagementSetFrequencyBase+0x254>)
 8004a1c:	5c8a      	ldrb	r2, [r1, r2]
 8004a1e:	4353      	muls	r3, r2
 8004a20:	049b      	lsls	r3, r3, #18
 8004a22:	0018      	movs	r0, r3
 8004a24:	f7fe fb64 	bl	80030f0 <__aeabi_i2d>
 8004a28:	6038      	str	r0, [r7, #0]
 8004a2a:	6079      	str	r1, [r7, #4]
 8004a2c:	f001 ffea 	bl	8006a04 <SpiritRadioGetXtalFrequency>
 8004a30:	0003      	movs	r3, r0
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fe fb8c 	bl	8003150 <__aeabi_ui2d>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	000b      	movs	r3, r1
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	f7fd f8e2 	bl	8001c08 <__aeabi_ddiv>
 8004a44:	0002      	movs	r2, r0
 8004a46:	000b      	movs	r3, r1
 8004a48:	0020      	movs	r0, r4
 8004a4a:	0029      	movs	r1, r5
 8004a4c:	f7fd fcd6 	bl	80023fc <__aeabi_dmul>
 8004a50:	0002      	movs	r2, r0
 8004a52:	000b      	movs	r3, r1
 8004a54:	0010      	movs	r0, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	f7fb fd7a 	bl	8000550 <__aeabi_d2uiz>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	617b      	str	r3, [r7, #20]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	0d5b      	lsrs	r3, r3, #21
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	221f      	movs	r2, #31
 8004a68:	4013      	ands	r3, r2
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	1873      	adds	r3, r6, r1
 8004a70:	19db      	adds	r3, r3, r7
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	015b      	lsls	r3, r3, #5
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	2008      	movs	r0, #8
 8004a7e:	1843      	adds	r3, r0, r1
 8004a80:	19db      	adds	r3, r3, r7
 8004a82:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	0b5b      	lsrs	r3, r3, #13
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	1843      	adds	r3, r0, r1
 8004a8c:	19db      	adds	r3, r3, r7
 8004a8e:	705a      	strb	r2, [r3, #1]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	1843      	adds	r3, r0, r1
 8004a98:	19db      	adds	r3, r3, r7
 8004a9a:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	2327      	movs	r3, #39	; 0x27
 8004aa6:	000c      	movs	r4, r1
 8004aa8:	185b      	adds	r3, r3, r1
 8004aaa:	19db      	adds	r3, r3, r7
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	4918      	ldr	r1, [pc, #96]	; (8004b10 <SpiritManagementSetFrequencyBase+0x258>)
 8004ab0:	5ccb      	ldrb	r3, [r1, r3]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	1903      	adds	r3, r0, r4
 8004ab8:	19db      	adds	r3, r3, r7
 8004aba:	70da      	strb	r2, [r3, #3]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8004abc:	1903      	adds	r3, r0, r4
 8004abe:	19db      	adds	r3, r3, r7
 8004ac0:	001a      	movs	r2, r3
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	2008      	movs	r0, #8
 8004ac6:	f002 f84d 	bl	8006b64 <RadioSpiWriteRegisters>
 8004aca:	1c03      	adds	r3, r0, #0
 8004acc:	1c1a      	adds	r2, r3, #0
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <SpiritManagementSetFrequencyBase+0x25c>)
 8004ad0:	b212      	sxth	r2, r2
 8004ad2:	1c11      	adds	r1, r2, #0
 8004ad4:	7019      	strb	r1, [r3, #0]
 8004ad6:	0412      	lsls	r2, r2, #16
 8004ad8:	0e12      	lsrs	r2, r2, #24
 8004ada:	705a      	strb	r2, [r3, #1]
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b00d      	add	sp, #52	; 0x34
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae4:	2e5f567f 	.word	0x2e5f567f
 8004ae8:	390c2fe0 	.word	0x390c2fe0
 8004aec:	1701e47f 	.word	0x1701e47f
 8004af0:	1c146a60 	.word	0x1c146a60
 8004af4:	11d260bf 	.word	0x11d260bf
 8004af8:	14ced7e0 	.word	0x14ced7e0
 8004afc:	099cf4e1 	.word	0x099cf4e1
 8004b00:	1339e9c3 	.word	0x1339e9c3
 8004b04:	19a28d05 	.word	0x19a28d05
 8004b08:	33451a0a 	.word	0x33451a0a
 8004b0c:	0800c058 	.word	0x0800c058
 8004b10:	0800c054 	.word	0x0800c054
 8004b14:	20000300 	.word	0x20000300

08004b18 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8004b1e:	240f      	movs	r4, #15
 8004b20:	193b      	adds	r3, r7, r4
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
  uint8_t cStandby = 0;
 8004b26:	230e      	movs	r3, #14
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8004b2e:	f001 ff69 	bl	8006a04 <SpiritRadioGetXtalFrequency>
 8004b32:	0003      	movs	r3, r0
 8004b34:	60bb      	str	r3, [r7, #8]
  uint8_t nLockwon=0;
 8004b36:	230d      	movs	r3, #13
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a63      	ldr	r2, [pc, #396]	; (8004cd0 <SpiritManagementWaVcoCalibration+0x1b8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d911      	bls.n	8004b6a <SpiritManagementWaVcoCalibration+0x52>
  {
    if(!SpiritRadioGetRefDiv())
 8004b46:	f001 fedd 	bl	8006904 <SpiritRadioGetRefDiv>
 8004b4a:	1e03      	subs	r3, r0, #0
 8004b4c:	d10d      	bne.n	8004b6a <SpiritManagementWaVcoCalibration+0x52>
    {
      cRestore = 1;
 8004b4e:	193b      	adds	r3, r7, r4
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
      nFreq = SpiritRadioGetFrequencyBase();
 8004b54:	f001 f9a0 	bl	8005e98 <SpiritRadioGetFrequencyBase>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	607b      	str	r3, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f001 fe97 	bl	8006890 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff fea7 	bl	80048b8 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8004b6a:	f001 f995 	bl	8005e98 <SpiritRadioGetFrequencyBase>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	607b      	str	r3, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8004b72:	1c7b      	adds	r3, r7, #1
 8004b74:	2225      	movs	r2, #37	; 0x25
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	1c7b      	adds	r3, r7, #1
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	20a1      	movs	r0, #161	; 0xa1
 8004b80:	f001 fff0 	bl	8006b64 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7ff fc55 	bl	8004434 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8004b8a:	f001 ffc5 	bl	8006b18 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8004b8e:	4b51      	ldr	r3, [pc, #324]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	061b      	lsls	r3, r3, #24
 8004b94:	0e5b      	lsrs	r3, r3, #25
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d10f      	bne.n	8004bbc <SpiritManagementWaVcoCalibration+0xa4>
  {
    cStandby = 1;
 8004b9c:	230e      	movs	r3, #14
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
    SpiritCmdStrobeReady();
 8004ba4:	2062      	movs	r0, #98	; 0x62
 8004ba6:	f7ff fd4b 	bl	8004640 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8004baa:	f001 ffb5 	bl	8006b18 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8004bae:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	0e5b      	lsrs	r3, r3, #25
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d1f6      	bne.n	8004baa <SpiritManagementWaVcoCalibration+0x92>
  }
  
  SpiritCmdStrobeLockTx();
 8004bbc:	2066      	movs	r0, #102	; 0x66
 8004bbe:	f7ff fd3f 	bl	8004640 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8004bc2:	230d      	movs	r3, #13
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
  do{
    SpiritRefreshStatus();
 8004bca:	f001 ffa5 	bl	8006b18 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8004bce:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	0e5b      	lsrs	r3, r3, #25
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b13      	cmp	r3, #19
 8004bda:	d109      	bne.n	8004bf0 <SpiritManagementWaVcoCalibration+0xd8>
    {
      if(nLockwon++==5) return 1;
 8004bdc:	220d      	movs	r2, #13
 8004bde:	18bb      	adds	r3, r7, r2
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	18ba      	adds	r2, r7, r2
 8004be4:	1c59      	adds	r1, r3, #1
 8004be6:	7011      	strb	r1, [r2, #0]
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	d101      	bne.n	8004bf0 <SpiritManagementWaVcoCalibration+0xd8>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e06b      	b.n	8004cc8 <SpiritManagementWaVcoCalibration+0x1b0>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8004bf0:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	0e5b      	lsrs	r3, r3, #25
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b0f      	cmp	r3, #15
 8004bfc:	d1e5      	bne.n	8004bca <SpiritManagementWaVcoCalibration+0xb2>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8004bfe:	1cfc      	adds	r4, r7, #3
 8004c00:	f7ff fc58 	bl	80044b4 <SpiritCalibrationGetVcoCalData>
 8004c04:	0003      	movs	r3, r0
 8004c06:	7023      	strb	r3, [r4, #0]
  
  SpiritCmdStrobeReady();
 8004c08:	2062      	movs	r0, #98	; 0x62
 8004c0a:	f7ff fd19 	bl	8004640 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8004c0e:	f001 ff83 	bl	8006b18 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8004c12:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	061b      	lsls	r3, r3, #24
 8004c18:	0e5b      	lsrs	r3, r3, #25
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d1f6      	bne.n	8004c0e <SpiritManagementWaVcoCalibration+0xf6>
  
    
  SpiritCmdStrobeLockRx();
 8004c20:	2065      	movs	r0, #101	; 0x65
 8004c22:	f7ff fd0d 	bl	8004640 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8004c26:	230d      	movs	r3, #13
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
  do{
    SpiritRefreshStatus();
 8004c2e:	f001 ff73 	bl	8006b18 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8004c32:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	0e5b      	lsrs	r3, r3, #25
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b13      	cmp	r3, #19
 8004c3e:	d109      	bne.n	8004c54 <SpiritManagementWaVcoCalibration+0x13c>
    {
      if(nLockwon++==5) return 1;
 8004c40:	220d      	movs	r2, #13
 8004c42:	18bb      	adds	r3, r7, r2
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	18ba      	adds	r2, r7, r2
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	7011      	strb	r1, [r2, #0]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d101      	bne.n	8004c54 <SpiritManagementWaVcoCalibration+0x13c>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e039      	b.n	8004cc8 <SpiritManagementWaVcoCalibration+0x1b0>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8004c54:	4b1f      	ldr	r3, [pc, #124]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	0e5b      	lsrs	r3, r3, #25
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d1e5      	bne.n	8004c2e <SpiritManagementWaVcoCalibration+0x116>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8004c62:	1cbc      	adds	r4, r7, #2
 8004c64:	f7ff fc26 	bl	80044b4 <SpiritCalibrationGetVcoCalData>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	7023      	strb	r3, [r4, #0]
  
  SpiritCmdStrobeReady();
 8004c6c:	2062      	movs	r0, #98	; 0x62
 8004c6e:	f7ff fce7 	bl	8004640 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8004c72:	f001 ff51 	bl	8006b18 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <SpiritManagementWaVcoCalibration+0x1bc>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	0e5b      	lsrs	r3, r3, #25
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d1f6      	bne.n	8004c72 <SpiritManagementWaVcoCalibration+0x15a>
  
  if(cStandby == 1)
 8004c84:	230e      	movs	r3, #14
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <SpiritManagementWaVcoCalibration+0x17c>
  {
    SpiritCmdStrobeStandby();    
 8004c8e:	2063      	movs	r0, #99	; 0x63
 8004c90:	f7ff fcd6 	bl	8004640 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7ff fbcd 	bl	8004434 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8004c9a:	230f      	movs	r3, #15
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d006      	beq.n	8004cb2 <SpiritManagementWaVcoCalibration+0x19a>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f001 fdf3 	bl	8006890 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff fe03 	bl	80048b8 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8004cb2:	1cfb      	adds	r3, r7, #3
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff fc1a 	bl	80044f0 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8004cbc:	1cbb      	adds	r3, r7, #2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7ff fc4f 	bl	8004564 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b005      	add	sp, #20
 8004cce:	bd90      	pop	{r4, r7, pc}
 8004cd0:	01c9c380 	.word	0x01c9c380
 8004cd4:	20000300 	.word	0x20000300

08004cd8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8004cde:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <SpiritManagementWaCmdStrobeTx+0x64>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d025      	beq.n	8004d34 <SpiritManagementWaCmdStrobeTx+0x5c>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8004ce8:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <SpiritManagementWaCmdStrobeTx+0x68>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d908      	bls.n	8004d04 <SpiritManagementWaCmdStrobeTx+0x2c>
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <SpiritManagementWaCmdStrobeTx+0x68>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <SpiritManagementWaCmdStrobeTx+0x70>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d803      	bhi.n	8004d04 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8004cfc:	20c0      	movs	r0, #192	; 0xc0
 8004cfe:	f001 fd27 	bl	8006750 <SpiritRadioSetPACwc>
 8004d02:	e002      	b.n	8004d0a <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8004d04:	2000      	movs	r0, #0
 8004d06:	f001 fd23 	bl	8006750 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	2211      	movs	r2, #17
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	1dfb      	adds	r3, r7, #7
 8004d12:	001a      	movs	r2, r3
 8004d14:	2101      	movs	r1, #1
 8004d16:	20a9      	movs	r0, #169	; 0xa9
 8004d18:	f001 ff24 	bl	8006b64 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8004d1c:	1dfb      	adds	r3, r7, #7
 8004d1e:	2220      	movs	r2, #32
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	1dfb      	adds	r3, r7, #7
 8004d24:	001a      	movs	r2, r3
 8004d26:	2101      	movs	r1, #1
 8004d28:	20a5      	movs	r0, #165	; 0xa5
 8004d2a:	f001 ff1b 	bl	8006b64 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8004d2e:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <SpiritManagementWaCmdStrobeTx+0x64>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
  }
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	200002f8 	.word	0x200002f8
 8004d44:	08f0d17f 	.word	0x08f0d17f
 8004d48:	1c03a180 	.word	0x1c03a180

08004d4c <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8004d52:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <SpiritManagementWaCmdStrobeRx+0x38>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d00e      	beq.n	8004d7a <SpiritManagementWaCmdStrobeRx+0x2e>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	2298      	movs	r2, #152	; 0x98
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	1dfb      	adds	r3, r7, #7
 8004d64:	001a      	movs	r2, r3
 8004d66:	2101      	movs	r1, #1
 8004d68:	20a5      	movs	r0, #165	; 0xa5
 8004d6a:	f001 fefb 	bl	8006b64 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f001 fcee 	bl	8006750 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <SpiritManagementWaCmdStrobeRx+0x38>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
  }
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b002      	add	sp, #8
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	20000004 	.word	0x20000004

08004d88 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <SpiritManagementWaTRxFcMem+0x1c>)
 8004d92:	2202      	movs	r2, #2
 8004d94:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8004d96:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <SpiritManagementWaTRxFcMem+0x20>)
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b002      	add	sp, #8
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000004 	.word	0x20000004
 8004da8:	200002f8 	.word	0x200002f8

08004dac <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	22ca      	movs	r2, #202	; 0xca
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	1dfb      	adds	r3, r7, #7
 8004dba:	001a      	movs	r2, r3
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	20b2      	movs	r0, #178	; 0xb2
 8004dc0:	f001 fed0 	bl	8006b64 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8004dc4:	1dfb      	adds	r3, r7, #7
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	1dfb      	adds	r3, r7, #7
 8004dcc:	001a      	movs	r2, r3
 8004dce:	2101      	movs	r1, #1
 8004dd0:	20a8      	movs	r0, #168	; 0xa8
 8004dd2:	f001 fec7 	bl	8006b64 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8004dd6:	1dfb      	adds	r3, r7, #7
 8004dd8:	001a      	movs	r2, r3
 8004dda:	2101      	movs	r1, #1
 8004ddc:	20a8      	movs	r0, #168	; 0xa8
 8004dde:	f001 ff23 	bl	8006c28 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8004de2:	1dfb      	adds	r3, r7, #7
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	1dfb      	adds	r3, r7, #7
 8004dea:	001a      	movs	r2, r3
 8004dec:	2101      	movs	r1, #1
 8004dee:	20a8      	movs	r0, #168	; 0xa8
 8004df0:	f001 feb8 	bl	8006b64 <RadioSpiWriteRegisters>
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8004e04:	2408      	movs	r4, #8
 8004e06:	193b      	adds	r3, r7, r4
 8004e08:	001a      	movs	r2, r3
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	2051      	movs	r0, #81	; 0x51
 8004e0e:	f001 ff0b 	bl	8006c28 <RadioSpiReadRegisters>
 8004e12:	1c03      	adds	r3, r0, #0
 8004e14:	1c1a      	adds	r2, r3, #0
 8004e16:	4b74      	ldr	r3, [pc, #464]	; (8004fe8 <SpiritPktBasicInit+0x1ec>)
 8004e18:	b212      	sxth	r2, r2
 8004e1a:	1c11      	adds	r1, r2, #0
 8004e1c:	7019      	strb	r1, [r3, #0]
 8004e1e:	0412      	lsls	r2, r2, #16
 8004e20:	0e12      	lsrs	r2, r2, #24
 8004e22:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8004e24:	193b      	adds	r3, r7, r4
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	193b      	adds	r3, r7, r4
 8004e30:	701a      	strb	r2, [r3, #0]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8004e32:	193b      	adds	r3, r7, r4
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	193b      	adds	r3, r7, r4
 8004e3e:	701a      	strb	r2, [r3, #0]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8004e40:	193b      	adds	r3, r7, r4
 8004e42:	001a      	movs	r2, r3
 8004e44:	2101      	movs	r1, #1
 8004e46:	2051      	movs	r0, #81	; 0x51
 8004e48:	f001 fe8c 	bl	8006b64 <RadioSpiWriteRegisters>
 8004e4c:	1c03      	adds	r3, r0, #0
 8004e4e:	1c1a      	adds	r2, r3, #0
 8004e50:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <SpiritPktBasicInit+0x1ec>)
 8004e52:	b212      	sxth	r2, r2
 8004e54:	1c11      	adds	r1, r2, #0
 8004e56:	7019      	strb	r1, [r3, #0]
 8004e58:	0412      	lsls	r2, r2, #16
 8004e5a:	0e12      	lsrs	r2, r2, #24
 8004e5c:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8004e5e:	193b      	adds	r3, r7, r4
 8004e60:	001a      	movs	r2, r3
 8004e62:	2101      	movs	r1, #1
 8004e64:	204f      	movs	r0, #79	; 0x4f
 8004e66:	f001 fedf 	bl	8006c28 <RadioSpiReadRegisters>
 8004e6a:	1c03      	adds	r3, r0, #0
 8004e6c:	1c1a      	adds	r2, r3, #0
 8004e6e:	4b5e      	ldr	r3, [pc, #376]	; (8004fe8 <SpiritPktBasicInit+0x1ec>)
 8004e70:	b212      	sxth	r2, r2
 8004e72:	1c11      	adds	r1, r2, #0
 8004e74:	7019      	strb	r1, [r3, #0]
 8004e76:	0412      	lsls	r2, r2, #16
 8004e78:	0e12      	lsrs	r2, r2, #24
 8004e7a:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2230      	movs	r2, #48	; 0x30
 8004e82:	4393      	bics	r3, r2
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	701a      	strb	r2, [r3, #0]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8004e8a:	193b      	adds	r3, r7, r4
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	2101      	movs	r1, #1
 8004e90:	204f      	movs	r0, #79	; 0x4f
 8004e92:	f001 fe67 	bl	8006b64 <RadioSpiWriteRegisters>
 8004e96:	1c03      	adds	r3, r0, #0
 8004e98:	1c1a      	adds	r2, r3, #0
 8004e9a:	4b53      	ldr	r3, [pc, #332]	; (8004fe8 <SpiritPktBasicInit+0x1ec>)
 8004e9c:	b212      	sxth	r2, r2
 8004e9e:	1c11      	adds	r1, r2, #0
 8004ea0:	7019      	strb	r1, [r3, #0]
 8004ea2:	0412      	lsls	r2, r2, #16
 8004ea4:	0e12      	lsrs	r2, r2, #24
 8004ea6:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7b1b      	ldrb	r3, [r3, #12]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d103      	bne.n	8004eb8 <SpiritPktBasicInit+0xbc>
  {
    tempRegValue[0]=0x08;
 8004eb0:	193b      	adds	r3, r7, r4
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e003      	b.n	8004ec0 <SpiritPktBasicInit+0xc4>
  }
  else
  {
    tempRegValue[0]=0x00;
 8004eb8:	2308      	movs	r3, #8
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 8004ec0:	2108      	movs	r1, #8
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7adb      	ldrb	r3, [r3, #11]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	187b      	adds	r3, r7, r1
 8004ed0:	701a      	strb	r2, [r3, #0]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7a5b      	ldrb	r3, [r3, #9]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <SpiritPktBasicInit+0xe4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7a5b      	ldrb	r3, [r3, #9]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	2108      	movs	r1, #8
 8004eea:	187b      	adds	r3, r7, r1
 8004eec:	705a      	strb	r2, [r3, #1]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8004efe:	4313      	orrs	r3, r2
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	709a      	strb	r2, [r3, #2]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7a9a      	ldrb	r2, [r3, #10]
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	70da      	strb	r2, [r3, #3]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7b9b      	ldrb	r3, [r3, #14]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d106      	bne.n	8004f24 <SpiritPktBasicInit+0x128>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	78db      	ldrb	r3, [r3, #3]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	70da      	strb	r2, [r3, #3]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7b5b      	ldrb	r3, [r3, #13]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <SpiritPktBasicInit+0x140>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8004f2c:	2108      	movs	r1, #8
 8004f2e:	187b      	adds	r3, r7, r1
 8004f30:	78db      	ldrb	r3, [r3, #3]
 8004f32:	2201      	movs	r2, #1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	187b      	adds	r3, r7, r1
 8004f3a:	70da      	strb	r2, [r3, #3]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	001a      	movs	r2, r3
 8004f42:	2104      	movs	r1, #4
 8004f44:	2030      	movs	r0, #48	; 0x30
 8004f46:	f001 fe0d 	bl	8006b64 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8004f4a:	230f      	movs	r3, #15
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e025      	b.n	8004fa0 <SpiritPktBasicInit+0x1a4>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8004f54:	200f      	movs	r0, #15
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	0019      	movs	r1, r3
 8004f64:	2303      	movs	r3, #3
 8004f66:	1a5b      	subs	r3, r3, r1
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	da06      	bge.n	8004f7a <SpiritPktBasicInit+0x17e>
    {
      tempRegValue[i]=0;
 8004f6c:	183b      	adds	r3, r7, r0
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	18ba      	adds	r2, r7, r2
 8004f74:	2100      	movs	r1, #0
 8004f76:	54d1      	strb	r1, [r2, r3]
 8004f78:	e00c      	b.n	8004f94 <SpiritPktBasicInit+0x198>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	210f      	movs	r1, #15
 8004f80:	187b      	adds	r3, r7, r1
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	40da      	lsrs	r2, r3
 8004f88:	187b      	adds	r3, r7, r1
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	b2d1      	uxtb	r1, r2
 8004f8e:	2208      	movs	r2, #8
 8004f90:	18ba      	adds	r2, r7, r2
 8004f92:	54d1      	strb	r1, [r2, r3]
  for(i=0;i<4;i++)
 8004f94:	210f      	movs	r1, #15
 8004f96:	187b      	adds	r3, r7, r1
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	3201      	adds	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	230f      	movs	r3, #15
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d9d4      	bls.n	8004f54 <SpiritPktBasicInit+0x158>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	7a9b      	ldrb	r3, [r3, #10]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <SpiritPktBasicInit+0x1be>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f000 f924 	bl	8005200 <SpiritPktCommonFilterOnCrc>
 8004fb8:	e002      	b.n	8004fc0 <SpiritPktBasicInit+0x1c4>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f000 f920 	bl	8005200 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	001a      	movs	r2, r3
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	2036      	movs	r0, #54	; 0x36
 8004fca:	f001 fdcb 	bl	8006b64 <RadioSpiWriteRegisters>
 8004fce:	1c03      	adds	r3, r0, #0
 8004fd0:	1c1a      	adds	r2, r3, #0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <SpiritPktBasicInit+0x1ec>)
 8004fd4:	b212      	sxth	r2, r2
 8004fd6:	1c11      	adds	r1, r2, #0
 8004fd8:	7019      	strb	r1, [r3, #0]
 8004fda:	0412      	lsls	r2, r2, #16
 8004fdc:	0e12      	lsrs	r2, r2, #24
 8004fde:	705a      	strb	r2, [r3, #1]

}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b005      	add	sp, #20
 8004fe6:	bd90      	pop	{r4, r7, pc}
 8004fe8:	20000300 	.word	0x20000300

08004fec <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8004ff4:	240c      	movs	r4, #12
 8004ff6:	193b      	adds	r3, r7, r4
 8004ff8:	001a      	movs	r2, r3
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	204f      	movs	r0, #79	; 0x4f
 8004ffe:	f001 fe13 	bl	8006c28 <RadioSpiReadRegisters>
 8005002:	1c03      	adds	r3, r0, #0
 8005004:	1c1a      	adds	r2, r3, #0
 8005006:	4b3a      	ldr	r3, [pc, #232]	; (80050f0 <SpiritPktBasicAddressesInit+0x104>)
 8005008:	b212      	sxth	r2, r2
 800500a:	1c11      	adds	r1, r2, #0
 800500c:	7019      	strb	r1, [r3, #0]
 800500e:	0412      	lsls	r2, r2, #16
 8005010:	0e12      	lsrs	r2, r2, #24
 8005012:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <SpiritPktBasicAddressesInit+0x40>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 800501c:	193b      	adds	r3, r7, r4
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2208      	movs	r2, #8
 8005022:	4313      	orrs	r3, r2
 8005024:	b2da      	uxtb	r2, r3
 8005026:	193b      	adds	r3, r7, r4
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e007      	b.n	800503c <SpiritPktBasicAddressesInit+0x50>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 800502c:	210c      	movs	r1, #12
 800502e:	187b      	adds	r3, r7, r1
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2208      	movs	r2, #8
 8005034:	4393      	bics	r3, r2
 8005036:	b2da      	uxtb	r2, r3
 8005038:	187b      	adds	r3, r7, r1
 800503a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	789b      	ldrb	r3, [r3, #2]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d108      	bne.n	8005056 <SpiritPktBasicAddressesInit+0x6a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8005044:	210c      	movs	r1, #12
 8005046:	187b      	adds	r3, r7, r1
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2204      	movs	r2, #4
 800504c:	4313      	orrs	r3, r2
 800504e:	b2da      	uxtb	r2, r3
 8005050:	187b      	adds	r3, r7, r1
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e007      	b.n	8005066 <SpiritPktBasicAddressesInit+0x7a>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8005056:	210c      	movs	r1, #12
 8005058:	187b      	adds	r3, r7, r1
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2204      	movs	r2, #4
 800505e:	4393      	bics	r3, r2
 8005060:	b2da      	uxtb	r2, r3
 8005062:	187b      	adds	r3, r7, r1
 8005064:	701a      	strb	r2, [r3, #0]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d108      	bne.n	8005080 <SpiritPktBasicAddressesInit+0x94>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800506e:	210c      	movs	r1, #12
 8005070:	187b      	adds	r3, r7, r1
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2202      	movs	r2, #2
 8005076:	4313      	orrs	r3, r2
 8005078:	b2da      	uxtb	r2, r3
 800507a:	187b      	adds	r3, r7, r1
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e007      	b.n	8005090 <SpiritPktBasicAddressesInit+0xa4>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8005080:	210c      	movs	r1, #12
 8005082:	187b      	adds	r3, r7, r1
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2202      	movs	r2, #2
 8005088:	4393      	bics	r3, r2
 800508a:	b2da      	uxtb	r2, r3
 800508c:	187b      	adds	r3, r7, r1
 800508e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8005090:	240c      	movs	r4, #12
 8005092:	193b      	adds	r3, r7, r4
 8005094:	001a      	movs	r2, r3
 8005096:	2101      	movs	r1, #1
 8005098:	204f      	movs	r0, #79	; 0x4f
 800509a:	f001 fd63 	bl	8006b64 <RadioSpiWriteRegisters>
 800509e:	1c03      	adds	r3, r0, #0
 80050a0:	1c1a      	adds	r2, r3, #0
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <SpiritPktBasicAddressesInit+0x104>)
 80050a4:	b212      	sxth	r2, r2
 80050a6:	1c11      	adds	r1, r2, #0
 80050a8:	7019      	strb	r1, [r3, #0]
 80050aa:	0412      	lsls	r2, r2, #16
 80050ac:	0e12      	lsrs	r2, r2, #24
 80050ae:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	795a      	ldrb	r2, [r3, #5]
 80050b4:	193b      	adds	r3, r7, r4
 80050b6:	701a      	strb	r2, [r3, #0]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	78da      	ldrb	r2, [r3, #3]
 80050bc:	193b      	adds	r3, r7, r4
 80050be:	705a      	strb	r2, [r3, #1]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	785a      	ldrb	r2, [r3, #1]
 80050c4:	193b      	adds	r3, r7, r4
 80050c6:	709a      	strb	r2, [r3, #2]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 80050c8:	193b      	adds	r3, r7, r4
 80050ca:	001a      	movs	r2, r3
 80050cc:	2103      	movs	r1, #3
 80050ce:	204c      	movs	r0, #76	; 0x4c
 80050d0:	f001 fd48 	bl	8006b64 <RadioSpiWriteRegisters>
 80050d4:	1c03      	adds	r3, r0, #0
 80050d6:	1c1a      	adds	r2, r3, #0
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <SpiritPktBasicAddressesInit+0x104>)
 80050da:	b212      	sxth	r2, r2
 80050dc:	1c11      	adds	r1, r2, #0
 80050de:	7019      	strb	r1, [r3, #0]
 80050e0:	0412      	lsls	r2, r2, #16
 80050e2:	0e12      	lsrs	r2, r2, #24
 80050e4:	705a      	strb	r2, [r3, #1]
  
  
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b005      	add	sp, #20
 80050ec:	bd90      	pop	{r4, r7, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	20000300 	.word	0x20000300

080050f4 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80050fa:	1dfb      	adds	r3, r7, #7
 80050fc:	001a      	movs	r2, r3
 80050fe:	2101      	movs	r1, #1
 8005100:	2030      	movs	r0, #48	; 0x30
 8005102:	f001 fd91 	bl	8006c28 <RadioSpiReadRegisters>
 8005106:	1c03      	adds	r3, r0, #0
 8005108:	1c1a      	adds	r2, r3, #0
 800510a:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <SpiritPktBasicGetAddressField+0x40>)
 800510c:	b212      	sxth	r2, r2
 800510e:	1c11      	adds	r1, r2, #0
 8005110:	7019      	strb	r1, [r3, #0]
 8005112:	0412      	lsls	r2, r2, #16
 8005114:	0e12      	lsrs	r2, r2, #24
 8005116:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	001a      	movs	r2, r3
 800511e:	2318      	movs	r3, #24
 8005120:	4013      	ands	r3, r2
 8005122:	d001      	beq.n	8005128 <SpiritPktBasicGetAddressField+0x34>
  {
    return S_ENABLE;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <SpiritPktBasicGetAddressField+0x36>
  }
  else
  {
    return S_DISABLE;
 8005128:	2300      	movs	r3, #0
  }

}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b002      	add	sp, #8
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	20000300 	.word	0x20000300

08005138 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	0002      	movs	r2, r0
 8005140:	1dbb      	adds	r3, r7, #6
 8005142:	801a      	strh	r2, [r3, #0]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8005144:	240e      	movs	r4, #14
 8005146:	193b      	adds	r3, r7, r4
 8005148:	2200      	movs	r2, #0
 800514a:	801a      	strh	r2, [r3, #0]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 800514c:	f7ff ffd2 	bl	80050f4 <SpiritPktBasicGetAddressField>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d002      	beq.n	800515a <SpiritPktBasicSetPayloadLength+0x22>
  {
    overSize=1;
 8005154:	193b      	adds	r3, r7, r4
 8005156:	2201      	movs	r2, #1
 8005158:	801a      	strh	r2, [r3, #0]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 800515a:	f000 f833 	bl	80051c4 <SpiritPktCommonGetControlLength>
 800515e:	0003      	movs	r3, r0
 8005160:	b299      	uxth	r1, r3
 8005162:	200e      	movs	r0, #14
 8005164:	183b      	adds	r3, r7, r0
 8005166:	183a      	adds	r2, r7, r0
 8005168:	8812      	ldrh	r2, [r2, #0]
 800516a:	188a      	adds	r2, r1, r2
 800516c:	801a      	strh	r2, [r3, #0]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 800516e:	1dbb      	adds	r3, r7, #6
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	0001      	movs	r1, r0
 8005176:	187b      	adds	r3, r7, r1
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	18d3      	adds	r3, r2, r3
 800517e:	b2da      	uxtb	r2, r3
 8005180:	200c      	movs	r0, #12
 8005182:	183b      	adds	r3, r7, r0
 8005184:	705a      	strb	r2, [r3, #1]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8005186:	1dbb      	adds	r3, r7, #6
 8005188:	881a      	ldrh	r2, [r3, #0]
 800518a:	187b      	adds	r3, r7, r1
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	121b      	asrs	r3, r3, #8
 8005192:	b2da      	uxtb	r2, r3
 8005194:	183b      	adds	r3, r7, r0
 8005196:	701a      	strb	r2, [r3, #0]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8005198:	183b      	adds	r3, r7, r0
 800519a:	001a      	movs	r2, r3
 800519c:	2102      	movs	r1, #2
 800519e:	2034      	movs	r0, #52	; 0x34
 80051a0:	f001 fce0 	bl	8006b64 <RadioSpiWriteRegisters>
 80051a4:	1c03      	adds	r3, r0, #0
 80051a6:	1c1a      	adds	r2, r3, #0
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <SpiritPktBasicSetPayloadLength+0x88>)
 80051aa:	b212      	sxth	r2, r2
 80051ac:	1c11      	adds	r1, r2, #0
 80051ae:	7019      	strb	r1, [r3, #0]
 80051b0:	0412      	lsls	r2, r2, #16
 80051b2:	0e12      	lsrs	r2, r2, #24
 80051b4:	705a      	strb	r2, [r3, #1]

}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b005      	add	sp, #20
 80051bc:	bd90      	pop	{r4, r7, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	20000300 	.word	0x20000300

080051c4 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80051ca:	1dfb      	adds	r3, r7, #7
 80051cc:	001a      	movs	r2, r3
 80051ce:	2101      	movs	r1, #1
 80051d0:	2030      	movs	r0, #48	; 0x30
 80051d2:	f001 fd29 	bl	8006c28 <RadioSpiReadRegisters>
 80051d6:	1c03      	adds	r3, r0, #0
 80051d8:	1c1a      	adds	r2, r3, #0
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <SpiritPktCommonGetControlLength+0x38>)
 80051dc:	b212      	sxth	r2, r2
 80051de:	1c11      	adds	r1, r2, #0
 80051e0:	7019      	strb	r1, [r3, #0]
 80051e2:	0412      	lsls	r2, r2, #16
 80051e4:	0e12      	lsrs	r2, r2, #24
 80051e6:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80051e8:	1dfb      	adds	r3, r7, #7
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2207      	movs	r2, #7
 80051ee:	4013      	ands	r3, r2
 80051f0:	b2db      	uxtb	r3, r3

}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b002      	add	sp, #8
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	20000300 	.word	0x20000300

08005200 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	0002      	movs	r2, r0
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 800520c:	240f      	movs	r4, #15
 800520e:	193b      	adds	r3, r7, r4
 8005210:	001a      	movs	r2, r3
 8005212:	2101      	movs	r1, #1
 8005214:	204f      	movs	r0, #79	; 0x4f
 8005216:	f001 fd07 	bl	8006c28 <RadioSpiReadRegisters>
 800521a:	1c03      	adds	r3, r0, #0
 800521c:	1c1a      	adds	r2, r3, #0
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <SpiritPktCommonFilterOnCrc+0x7c>)
 8005220:	b212      	sxth	r2, r2
 8005222:	1c11      	adds	r1, r2, #0
 8005224:	7019      	strb	r1, [r3, #0]
 8005226:	0412      	lsls	r2, r2, #16
 8005228:	0e12      	lsrs	r2, r2, #24
 800522a:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <SpiritPktCommonFilterOnCrc+0x44>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8005234:	193b      	adds	r3, r7, r4
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	4313      	orrs	r3, r2
 800523c:	b2da      	uxtb	r2, r3
 800523e:	193b      	adds	r3, r7, r4
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e007      	b.n	8005254 <SpiritPktCommonFilterOnCrc+0x54>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8005244:	210f      	movs	r1, #15
 8005246:	187b      	adds	r3, r7, r1
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2201      	movs	r2, #1
 800524c:	4393      	bics	r3, r2
 800524e:	b2da      	uxtb	r2, r3
 8005250:	187b      	adds	r3, r7, r1
 8005252:	701a      	strb	r2, [r3, #0]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8005254:	230f      	movs	r3, #15
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	001a      	movs	r2, r3
 800525a:	2101      	movs	r1, #1
 800525c:	204f      	movs	r0, #79	; 0x4f
 800525e:	f001 fc81 	bl	8006b64 <RadioSpiWriteRegisters>
 8005262:	1c03      	adds	r3, r0, #0
 8005264:	1c1a      	adds	r2, r3, #0
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <SpiritPktCommonFilterOnCrc+0x7c>)
 8005268:	b212      	sxth	r2, r2
 800526a:	1c11      	adds	r1, r2, #0
 800526c:	7019      	strb	r1, [r3, #0]
 800526e:	0412      	lsls	r2, r2, #16
 8005270:	0e12      	lsrs	r2, r2, #24
 8005272:	705a      	strb	r2, [r3, #1]

}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b005      	add	sp, #20
 800527a:	bd90      	pop	{r4, r7, pc}
 800527c:	20000300 	.word	0x20000300

08005280 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	0002      	movs	r2, r0
 8005288:	1dfb      	adds	r3, r7, #7
 800528a:	701a      	strb	r2, [r3, #0]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 800528c:	1dfb      	adds	r3, r7, #7
 800528e:	001a      	movs	r2, r3
 8005290:	2101      	movs	r1, #1
 8005292:	204b      	movs	r0, #75	; 0x4b
 8005294:	f001 fc66 	bl	8006b64 <RadioSpiWriteRegisters>
 8005298:	1c03      	adds	r3, r0, #0
 800529a:	1c1a      	adds	r2, r3, #0
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <SpiritPktCommonSetDestinationAddress+0x34>)
 800529e:	b212      	sxth	r2, r2
 80052a0:	1c11      	adds	r1, r2, #0
 80052a2:	7019      	strb	r1, [r3, #0]
 80052a4:	0412      	lsls	r2, r2, #16
 80052a6:	0e12      	lsrs	r2, r2, #24
 80052a8:	705a      	strb	r2, [r3, #1]

}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b002      	add	sp, #8
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	20000300 	.word	0x20000300

080052b8 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	0002      	movs	r2, r0
 80052c0:	1dfb      	adds	r3, r7, #7
 80052c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80052c4:	240f      	movs	r4, #15
 80052c6:	193b      	adds	r3, r7, r4
 80052c8:	001a      	movs	r2, r3
 80052ca:	2101      	movs	r1, #1
 80052cc:	203a      	movs	r0, #58	; 0x3a
 80052ce:	f001 fcab 	bl	8006c28 <RadioSpiReadRegisters>
 80052d2:	1c03      	adds	r3, r0, #0
 80052d4:	1c1a      	adds	r2, r3, #0
 80052d6:	4b17      	ldr	r3, [pc, #92]	; (8005334 <SpiritQiSqiCheck+0x7c>)
 80052d8:	b212      	sxth	r2, r2
 80052da:	1c11      	adds	r1, r2, #0
 80052dc:	7019      	strb	r1, [r3, #0]
 80052de:	0412      	lsls	r2, r2, #16
 80052e0:	0e12      	lsrs	r2, r2, #24
 80052e2:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <SpiritQiSqiCheck+0x44>
  {
    tempRegValue |= QI_SQI_MASK;
 80052ec:	193b      	adds	r3, r7, r4
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2202      	movs	r2, #2
 80052f2:	4313      	orrs	r3, r2
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	193b      	adds	r3, r7, r4
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e007      	b.n	800530c <SpiritQiSqiCheck+0x54>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 80052fc:	210f      	movs	r1, #15
 80052fe:	187b      	adds	r3, r7, r1
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2202      	movs	r2, #2
 8005304:	4393      	bics	r3, r2
 8005306:	b2da      	uxtb	r2, r3
 8005308:	187b      	adds	r3, r7, r1
 800530a:	701a      	strb	r2, [r3, #0]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 800530c:	230f      	movs	r3, #15
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	001a      	movs	r2, r3
 8005312:	2101      	movs	r1, #1
 8005314:	203a      	movs	r0, #58	; 0x3a
 8005316:	f001 fc25 	bl	8006b64 <RadioSpiWriteRegisters>
 800531a:	1c03      	adds	r3, r0, #0
 800531c:	1c1a      	adds	r2, r3, #0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <SpiritQiSqiCheck+0x7c>)
 8005320:	b212      	sxth	r2, r2
 8005322:	1c11      	adds	r1, r2, #0
 8005324:	7019      	strb	r1, [r3, #0]
 8005326:	0412      	lsls	r2, r2, #16
 8005328:	0e12      	lsrs	r2, r2, #24
 800532a:	705a      	strb	r2, [r3, #1]

}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	b005      	add	sp, #20
 8005332:	bd90      	pop	{r4, r7, pc}
 8005334:	20000300 	.word	0x20000300

08005338 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	0002      	movs	r2, r0
 8005340:	1dfb      	adds	r3, r7, #7
 8005342:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8005344:	240f      	movs	r4, #15
 8005346:	193b      	adds	r3, r7, r4
 8005348:	001a      	movs	r2, r3
 800534a:	2101      	movs	r1, #1
 800534c:	203a      	movs	r0, #58	; 0x3a
 800534e:	f001 fc6b 	bl	8006c28 <RadioSpiReadRegisters>
 8005352:	1c03      	adds	r3, r0, #0
 8005354:	1c1a      	adds	r2, r3, #0
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <SpiritQiSetSqiThreshold+0x70>)
 8005358:	b212      	sxth	r2, r2
 800535a:	1c11      	adds	r1, r2, #0
 800535c:	7019      	strb	r1, [r3, #0]
 800535e:	0412      	lsls	r2, r2, #16
 8005360:	0e12      	lsrs	r2, r2, #24
 8005362:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8005364:	193b      	adds	r3, r7, r4
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	223f      	movs	r2, #63	; 0x3f
 800536a:	4013      	ands	r3, r2
 800536c:	b2da      	uxtb	r2, r3
 800536e:	193b      	adds	r3, r7, r4
 8005370:	701a      	strb	r2, [r3, #0]
  tempRegValue |= ((uint8_t)xSqiThr);
 8005372:	193b      	adds	r3, r7, r4
 8005374:	781a      	ldrb	r2, [r3, #0]
 8005376:	1dfb      	adds	r3, r7, #7
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	b2da      	uxtb	r2, r3
 800537e:	193b      	adds	r3, r7, r4
 8005380:	701a      	strb	r2, [r3, #0]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8005382:	193b      	adds	r3, r7, r4
 8005384:	001a      	movs	r2, r3
 8005386:	2101      	movs	r1, #1
 8005388:	203a      	movs	r0, #58	; 0x3a
 800538a:	f001 fbeb 	bl	8006b64 <RadioSpiWriteRegisters>
 800538e:	1c03      	adds	r3, r0, #0
 8005390:	1c1a      	adds	r2, r3, #0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <SpiritQiSetSqiThreshold+0x70>)
 8005394:	b212      	sxth	r2, r2
 8005396:	1c11      	adds	r1, r2, #0
 8005398:	7019      	strb	r1, [r3, #0]
 800539a:	0412      	lsls	r2, r2, #16
 800539c:	0e12      	lsrs	r2, r2, #24
 800539e:	705a      	strb	r2, [r3, #1]

}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b005      	add	sp, #20
 80053a6:	bd90      	pop	{r4, r7, pc}
 80053a8:	20000300 	.word	0x20000300

080053ac <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3382      	adds	r3, #130	; 0x82
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	18db      	adds	r3, r3, r3
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	210f      	movs	r1, #15
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 80053c4:	187b      	adds	r3, r7, r1
 80053c6:	001a      	movs	r2, r3
 80053c8:	2101      	movs	r1, #1
 80053ca:	2022      	movs	r0, #34	; 0x22
 80053cc:	f001 fbca 	bl	8006b64 <RadioSpiWriteRegisters>
 80053d0:	1c03      	adds	r3, r0, #0
 80053d2:	1c1a      	adds	r2, r3, #0
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <SpiritQiSetRssiThresholddBm+0x40>)
 80053d6:	b212      	sxth	r2, r2
 80053d8:	1c11      	adds	r1, r2, #0
 80053da:	7019      	strb	r1, [r3, #0]
 80053dc:	0412      	lsls	r2, r2, #16
 80053de:	0e12      	lsrs	r2, r2, #24
 80053e0:	705a      	strb	r2, [r3, #1]

}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b004      	add	sp, #16
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	20000300 	.word	0x20000300

080053f0 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 80053f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f2:	b08d      	sub	sp, #52	; 0x34
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 80053f8:	2111      	movs	r1, #17
 80053fa:	187b      	adds	r3, r7, r1
 80053fc:	22a0      	movs	r2, #160	; 0xa0
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	187b      	adds	r3, r7, r1
 8005402:	001a      	movs	r2, r3
 8005404:	2101      	movs	r1, #1
 8005406:	209f      	movs	r0, #159	; 0x9f
 8005408:	f001 fbac 	bl	8006b64 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	5e9b      	ldrsh	r3, [r3, r2]
 8005412:	0018      	movs	r0, r3
 8005414:	f7fb fffe 	bl	8001414 <__aeabi_i2f>
 8005418:	1c04      	adds	r4, r0, #0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	0018      	movs	r0, r3
 8005420:	f7fc f84a 	bl	80014b8 <__aeabi_ui2f>
 8005424:	1c03      	adds	r3, r0, #0
 8005426:	1c19      	adds	r1, r3, #0
 8005428:	1c20      	adds	r0, r4, #0
 800542a:	f7fb fce5 	bl	8000df8 <__aeabi_fmul>
 800542e:	1c03      	adds	r3, r0, #0
 8005430:	49c9      	ldr	r1, [pc, #804]	; (8005758 <SpiritRadioInit+0x368>)
 8005432:	1c18      	adds	r0, r3, #0
 8005434:	f7fb fb16 	bl	8000a64 <__aeabi_fdiv>
 8005438:	1c03      	adds	r3, r0, #0
 800543a:	1c18      	adds	r0, r3, #0
 800543c:	f7fb ffca 	bl	80013d4 <__aeabi_f2iz>
 8005440:	0003      	movs	r3, r0
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8005444:	2063      	movs	r0, #99	; 0x63
 8005446:	f001 fc51 	bl	8006cec <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 800544a:	230e      	movs	r3, #14
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	2200      	movs	r2, #0
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e007      	b.n	8005464 <SpiritRadioInit+0x74>
 8005454:	210e      	movs	r1, #14
 8005456:	187b      	adds	r3, r7, r1
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	3301      	adds	r3, #1
 800545e:	b2da      	uxtb	r2, r3
 8005460:	187b      	adds	r3, r7, r1
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	230e      	movs	r3, #14
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2bff      	cmp	r3, #255	; 0xff
 800546e:	d1f1      	bne.n	8005454 <SpiritRadioInit+0x64>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8005470:	f001 fb52 	bl	8006b18 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8005474:	4bb9      	ldr	r3, [pc, #740]	; (800575c <SpiritRadioInit+0x36c>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	0e5b      	lsrs	r3, r3, #25
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d1e3      	bne.n	800544a <SpiritRadioInit+0x5a>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8005482:	4bb7      	ldr	r3, [pc, #732]	; (8005760 <SpiritRadioInit+0x370>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4ab7      	ldr	r2, [pc, #732]	; (8005764 <SpiritRadioInit+0x374>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d803      	bhi.n	8005494 <SpiritRadioInit+0xa4>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 800548c:	2000      	movs	r0, #0
 800548e:	f001 fa5d 	bl	800694c <SpiritRadioSetDigDiv>
 8005492:	e002      	b.n	800549a <SpiritRadioInit+0xaa>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8005494:	2001      	movs	r0, #1
 8005496:	f001 fa59 	bl	800694c <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 800549a:	2062      	movs	r0, #98	; 0x62
 800549c:	f001 fc26 	bl	8006cec <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80054a0:	230d      	movs	r3, #13
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e007      	b.n	80054ba <SpiritRadioInit+0xca>
 80054aa:	210d      	movs	r1, #13
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	3301      	adds	r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	230d      	movs	r3, #13
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2bff      	cmp	r3, #255	; 0xff
 80054c4:	d1f1      	bne.n	80054aa <SpiritRadioInit+0xba>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80054c6:	f001 fb27 	bl	8006b18 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80054ca:	4ba4      	ldr	r3, [pc, #656]	; (800575c <SpiritRadioInit+0x36c>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	0e5b      	lsrs	r3, r3, #25
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d1e3      	bne.n	80054a0 <SpiritRadioInit+0xb0>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80054d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054da:	f7fb ff9b 	bl	8001414 <__aeabi_i2f>
 80054de:	1c03      	adds	r3, r0, #0
 80054e0:	2191      	movs	r1, #145	; 0x91
 80054e2:	05c9      	lsls	r1, r1, #23
 80054e4:	1c18      	adds	r0, r3, #0
 80054e6:	f7fb fc87 	bl	8000df8 <__aeabi_fmul>
 80054ea:	1c03      	adds	r3, r0, #0
 80054ec:	1c1c      	adds	r4, r3, #0
 80054ee:	4b9c      	ldr	r3, [pc, #624]	; (8005760 <SpiritRadioInit+0x370>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7fb ffe0 	bl	80014b8 <__aeabi_ui2f>
 80054f8:	1c03      	adds	r3, r0, #0
 80054fa:	1c19      	adds	r1, r3, #0
 80054fc:	1c20      	adds	r0, r4, #0
 80054fe:	f7fb fab1 	bl	8000a64 <__aeabi_fdiv>
 8005502:	1c03      	adds	r3, r0, #0
 8005504:	252a      	movs	r5, #42	; 0x2a
 8005506:	197c      	adds	r4, r7, r5
 8005508:	1c18      	adds	r0, r3, #0
 800550a:	f7fb ff63 	bl	80013d4 <__aeabi_f2iz>
 800550e:	0003      	movs	r3, r0
 8005510:	8023      	strh	r3, [r4, #0]
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8005512:	0029      	movs	r1, r5
 8005514:	187b      	adds	r3, r7, r1
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	0a1b      	lsrs	r3, r3, #8
 800551a:	b29b      	uxth	r3, r3
 800551c:	b2db      	uxtb	r3, r3
 800551e:	220f      	movs	r2, #15
 8005520:	4013      	ands	r3, r2
 8005522:	b2da      	uxtb	r2, r3
 8005524:	241c      	movs	r4, #28
 8005526:	193b      	adds	r3, r7, r4
 8005528:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 800552a:	187b      	adds	r3, r7, r1
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b2da      	uxtb	r2, r3
 8005530:	193b      	adds	r3, r7, r4
 8005532:	70da      	strb	r2, [r3, #3]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	025a      	lsls	r2, r3, #9
 800553a:	4b89      	ldr	r3, [pc, #548]	; (8005760 <SpiritRadioInit+0x370>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	0019      	movs	r1, r3
 8005542:	0010      	movs	r0, r2
 8005544:	f7fa fdde 	bl	8000104 <__udivsi3>
 8005548:	0003      	movs	r3, r0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	3301      	adds	r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	193b      	adds	r3, r7, r4
 8005552:	701a      	strb	r2, [r3, #0]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fc15 	bl	8004d88 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 800555e:	2410      	movs	r4, #16
 8005560:	193b      	adds	r3, r7, r4
 8005562:	001a      	movs	r2, r3
 8005564:	2101      	movs	r1, #1
 8005566:	20a3      	movs	r0, #163	; 0xa3
 8005568:	f001 fb5e 	bl	8006c28 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 800556c:	193b      	adds	r3, r7, r4
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2202      	movs	r2, #2
 8005572:	4393      	bics	r3, r2
 8005574:	b2da      	uxtb	r2, r3
 8005576:	193b      	adds	r3, r7, r4
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	193b      	adds	r3, r7, r4
 800557c:	001a      	movs	r2, r3
 800557e:	2101      	movs	r1, #1
 8005580:	20a3      	movs	r0, #163	; 0xa3
 8005582:	f001 faef 	bl	8006b64 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2616      	movs	r6, #22
 800558c:	19ba      	adds	r2, r7, r6
 800558e:	2517      	movs	r5, #23
 8005590:	1979      	adds	r1, r7, r5
 8005592:	0018      	movs	r0, r3
 8005594:	f000 fcce 	bl	8005f34 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8005598:	197b      	adds	r3, r7, r5
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	2518      	movs	r5, #24
 800559e:	197b      	adds	r3, r7, r5
 80055a0:	701a      	strb	r2, [r3, #0]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7b5a      	ldrb	r2, [r3, #13]
 80055a6:	19bb      	adds	r3, r7, r6
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	197b      	adds	r3, r7, r5
 80055b0:	705a      	strb	r2, [r3, #1]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 80055b2:	193b      	adds	r3, r7, r4
 80055b4:	001a      	movs	r2, r3
 80055b6:	2101      	movs	r1, #1
 80055b8:	201c      	movs	r0, #28
 80055ba:	f001 fb35 	bl	8006c28 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	2614      	movs	r6, #20
 80055c4:	19ba      	adds	r2, r7, r6
 80055c6:	2115      	movs	r1, #21
 80055c8:	1879      	adds	r1, r7, r1
 80055ca:	0018      	movs	r0, r3
 80055cc:	f000 feaa 	bl	8006324 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 80055d0:	19bb      	adds	r3, r7, r6
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	b25a      	sxtb	r2, r3
 80055d8:	193b      	adds	r3, r7, r4
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b25b      	sxtb	r3, r3
 80055de:	2108      	movs	r1, #8
 80055e0:	400b      	ands	r3, r1
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b25a      	sxtb	r2, r3
 80055e8:	2115      	movs	r1, #21
 80055ea:	187b      	adds	r3, r7, r1
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b25b      	sxtb	r3, r3
 80055f0:	4313      	orrs	r3, r2
 80055f2:	b25b      	sxtb	r3, r3
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	197b      	adds	r3, r7, r5
 80055f8:	709a      	strb	r2, [r3, #2]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2412      	movs	r4, #18
 8005600:	193a      	adds	r2, r7, r4
 8005602:	2613      	movs	r6, #19
 8005604:	19b9      	adds	r1, r7, r6
 8005606:	0018      	movs	r0, r3
 8005608:	f000 fd88 	bl	800611c <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 800560c:	19bb      	adds	r3, r7, r6
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	b25a      	sxtb	r2, r3
 8005614:	193b      	adds	r3, r7, r4
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	b25b      	sxtb	r3, r3
 800561a:	4313      	orrs	r3, r2
 800561c:	b25b      	sxtb	r3, r3
 800561e:	b2da      	uxtb	r2, r3
 8005620:	197b      	adds	r3, r7, r5
 8005622:	70da      	strb	r2, [r3, #3]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8005624:	4b4e      	ldr	r3, [pc, #312]	; (8005760 <SpiritRadioInit+0x370>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	0b1b      	lsrs	r3, r3, #12
 800562a:	0018      	movs	r0, r3
 800562c:	f7fb ff44 	bl	80014b8 <__aeabi_ui2f>
 8005630:	1c03      	adds	r3, r0, #0
 8005632:	1c19      	adds	r1, r3, #0
 8005634:	484c      	ldr	r0, [pc, #304]	; (8005768 <SpiritRadioInit+0x378>)
 8005636:	f7fb fa15 	bl	8000a64 <__aeabi_fdiv>
 800563a:	1c03      	adds	r3, r0, #0
 800563c:	2185      	movs	r1, #133	; 0x85
 800563e:	05c9      	lsls	r1, r1, #23
 8005640:	1c18      	adds	r0, r3, #0
 8005642:	f7fb fd27 	bl	8001094 <__aeabi_fsub>
 8005646:	1c03      	adds	r3, r0, #0
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800564a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800564c:	f7fa ff68 	bl	8000520 <__aeabi_f2uiz>
 8005650:	0003      	movs	r3, r0
 8005652:	0018      	movs	r0, r3
 8005654:	f7fb ff30 	bl	80014b8 <__aeabi_ui2f>
 8005658:	1c03      	adds	r3, r0, #0
 800565a:	1c19      	adds	r1, r3, #0
 800565c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800565e:	f7fb fd19 	bl	8001094 <__aeabi_fsub>
 8005662:	1c03      	adds	r3, r0, #0
 8005664:	21fc      	movs	r1, #252	; 0xfc
 8005666:	0589      	lsls	r1, r1, #22
 8005668:	1c18      	adds	r0, r3, #0
 800566a:	f7fa ff25 	bl	80004b8 <__aeabi_fcmpgt>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d007      	beq.n	8005682 <SpiritRadioInit+0x292>
 8005672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005674:	f7fa ff54 	bl	8000520 <__aeabi_f2uiz>
 8005678:	0003      	movs	r3, r0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	3301      	adds	r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	e004      	b.n	800568c <SpiritRadioInit+0x29c>
 8005682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005684:	f7fa ff4c 	bl	8000520 <__aeabi_f2uiz>
 8005688:	0003      	movs	r3, r0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	210f      	movs	r1, #15
 800568e:	187a      	adds	r2, r7, r1
 8005690:	7013      	strb	r3, [r2, #0]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8005692:	4b33      	ldr	r3, [pc, #204]	; (8005760 <SpiritRadioInit+0x370>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a33      	ldr	r2, [pc, #204]	; (8005764 <SpiritRadioInit+0x374>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d805      	bhi.n	80056a8 <SpiritRadioInit+0x2b8>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 800569c:	187b      	adds	r3, r7, r1
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	231c      	movs	r3, #28
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	705a      	strb	r2, [r3, #1]
 80056a6:	e036      	b.n	8005716 <SpiritRadioInit+0x326>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80056a8:	4b2d      	ldr	r3, [pc, #180]	; (8005760 <SpiritRadioInit+0x370>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0b5b      	lsrs	r3, r3, #13
 80056ae:	0018      	movs	r0, r3
 80056b0:	f7fb ff02 	bl	80014b8 <__aeabi_ui2f>
 80056b4:	1c03      	adds	r3, r0, #0
 80056b6:	1c19      	adds	r1, r3, #0
 80056b8:	482b      	ldr	r0, [pc, #172]	; (8005768 <SpiritRadioInit+0x378>)
 80056ba:	f7fb f9d3 	bl	8000a64 <__aeabi_fdiv>
 80056be:	1c03      	adds	r3, r0, #0
 80056c0:	2185      	movs	r1, #133	; 0x85
 80056c2:	05c9      	lsls	r1, r1, #23
 80056c4:	1c18      	adds	r0, r3, #0
 80056c6:	f7fb fce5 	bl	8001094 <__aeabi_fsub>
 80056ca:	1c03      	adds	r3, r0, #0
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 80056ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056d0:	f7fa ff26 	bl	8000520 <__aeabi_f2uiz>
 80056d4:	0003      	movs	r3, r0
 80056d6:	0018      	movs	r0, r3
 80056d8:	f7fb feee 	bl	80014b8 <__aeabi_ui2f>
 80056dc:	1c03      	adds	r3, r0, #0
 80056de:	1c19      	adds	r1, r3, #0
 80056e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056e2:	f7fb fcd7 	bl	8001094 <__aeabi_fsub>
 80056e6:	1c03      	adds	r3, r0, #0
 80056e8:	21fc      	movs	r1, #252	; 0xfc
 80056ea:	0589      	lsls	r1, r1, #22
 80056ec:	1c18      	adds	r0, r3, #0
 80056ee:	f7fa fee3 	bl	80004b8 <__aeabi_fcmpgt>
 80056f2:	1e03      	subs	r3, r0, #0
 80056f4:	d007      	beq.n	8005706 <SpiritRadioInit+0x316>
 80056f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056f8:	f7fa ff12 	bl	8000520 <__aeabi_f2uiz>
 80056fc:	0003      	movs	r3, r0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	3301      	adds	r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e004      	b.n	8005710 <SpiritRadioInit+0x320>
 8005706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005708:	f7fa ff0a 	bl	8000520 <__aeabi_f2uiz>
 800570c:	0003      	movs	r3, r0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	221c      	movs	r2, #28
 8005712:	18ba      	adds	r2, r7, r2
 8005714:	7053      	strb	r3, [r2, #1]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8005716:	230f      	movs	r3, #15
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	001a      	movs	r2, r3
 800571c:	2101      	movs	r1, #1
 800571e:	2007      	movs	r0, #7
 8005720:	f001 fa20 	bl	8006b64 <RadioSpiWriteRegisters>
 8005724:	1c03      	adds	r3, r0, #0
 8005726:	1c1a      	adds	r2, r3, #0
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <SpiritRadioInit+0x36c>)
 800572a:	b212      	sxth	r2, r2
 800572c:	1c11      	adds	r1, r2, #0
 800572e:	7019      	strb	r1, [r3, #0]
 8005730:	0412      	lsls	r2, r2, #16
 8005732:	0e12      	lsrs	r2, r2, #24
 8005734:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8005736:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <SpiritRadioInit+0x370>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a0c      	ldr	r2, [pc, #48]	; (800576c <SpiritRadioInit+0x37c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d919      	bls.n	8005774 <SpiritRadioInit+0x384>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <SpiritRadioInit+0x370>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a0a      	ldr	r2, [pc, #40]	; (8005770 <SpiritRadioInit+0x380>)
 8005746:	429a      	cmp	r2, r3
 8005748:	419b      	sbcs	r3, r3
 800574a:	425b      	negs	r3, r3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	0018      	movs	r0, r3
 8005750:	f000 f86a 	bl	8005828 <SpiritRadioSetXtalFlag>
 8005754:	e018      	b.n	8005788 <SpiritRadioInit+0x398>
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	49742400 	.word	0x49742400
 800575c:	20000300 	.word	0x20000300
 8005760:	200002fc 	.word	0x200002fc
 8005764:	01c9c37f 	.word	0x01c9c37f
 8005768:	49afd520 	.word	0x49afd520
 800576c:	01c9c380 	.word	0x01c9c380
 8005770:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <SpiritRadioInit+0x42c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a29      	ldr	r2, [pc, #164]	; (8005820 <SpiritRadioInit+0x430>)
 800577a:	429a      	cmp	r2, r3
 800577c:	419b      	sbcs	r3, r3
 800577e:	425b      	negs	r3, r3
 8005780:	b2db      	uxtb	r3, r3
 8005782:	0018      	movs	r0, r3
 8005784:	f000 f850 	bl	8005828 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	330c      	adds	r3, #12
 800578c:	001a      	movs	r2, r3
 800578e:	2101      	movs	r1, #1
 8005790:	206c      	movs	r0, #108	; 0x6c
 8005792:	f001 f9e7 	bl	8006b64 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8005796:	241c      	movs	r4, #28
 8005798:	193b      	adds	r3, r7, r4
 800579a:	001a      	movs	r2, r3
 800579c:	2104      	movs	r1, #4
 800579e:	200c      	movs	r0, #12
 80057a0:	f001 f9e0 	bl	8006b64 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 80057a4:	2318      	movs	r3, #24
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	001a      	movs	r2, r3
 80057aa:	2104      	movs	r1, #4
 80057ac:	201a      	movs	r0, #26
 80057ae:	f001 f9d9 	bl	8006b64 <RadioSpiWriteRegisters>
 80057b2:	1c03      	adds	r3, r0, #0
 80057b4:	1c1a      	adds	r2, r3, #0
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <SpiritRadioInit+0x434>)
 80057b8:	b212      	sxth	r2, r2
 80057ba:	1c11      	adds	r1, r2, #0
 80057bc:	7019      	strb	r1, [r3, #0]
 80057be:	0412      	lsls	r2, r2, #16
 80057c0:	0e12      	lsrs	r2, r2, #24
 80057c2:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 80057c4:	2001      	movs	r0, #1
 80057c6:	f001 f827 	bl	8006818 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 80057ca:	193b      	adds	r3, r7, r4
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1]=0xE3;
 80057d0:	193b      	adds	r3, r7, r4
 80057d2:	22e3      	movs	r2, #227	; 0xe3
 80057d4:	705a      	strb	r2, [r3, #1]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 80057d6:	193b      	adds	r3, r7, r4
 80057d8:	001a      	movs	r2, r3
 80057da:	2102      	movs	r1, #2
 80057dc:	2099      	movs	r0, #153	; 0x99
 80057de:	f001 f9c1 	bl	8006b64 <RadioSpiWriteRegisters>
 80057e2:	1c03      	adds	r3, r0, #0
 80057e4:	1c1a      	adds	r2, r3, #0
 80057e6:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <SpiritRadioInit+0x434>)
 80057e8:	b212      	sxth	r2, r2
 80057ea:	1c11      	adds	r1, r2, #0
 80057ec:	7019      	strb	r1, [r3, #0]
 80057ee:	0412      	lsls	r2, r2, #16
 80057f0:	0e12      	lsrs	r2, r2, #24
 80057f2:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80057f4:	193b      	adds	r3, r7, r4
 80057f6:	2222      	movs	r2, #34	; 0x22
 80057f8:	701a      	strb	r2, [r3, #0]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80057fa:	193b      	adds	r3, r7, r4
 80057fc:	001a      	movs	r2, r3
 80057fe:	2101      	movs	r1, #1
 8005800:	20bc      	movs	r0, #188	; 0xbc
 8005802:	f001 f9af 	bl	8006b64 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 f9f6 	bl	8005bfc <SpiritRadioSetFrequencyBase>
 8005810:	0003      	movs	r3, r0
  
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b00d      	add	sp, #52	; 0x34
 8005818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	200002fc 	.word	0x200002fc
 8005820:	017d783f 	.word	0x017d783f
 8005824:	20000300 	.word	0x20000300

08005828 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	0002      	movs	r2, r0
 8005830:	1dfb      	adds	r3, r7, #7
 8005832:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue = 0x00;
 8005834:	240f      	movs	r4, #15
 8005836:	193b      	adds	r3, r7, r4
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800583c:	193b      	adds	r3, r7, r4
 800583e:	001a      	movs	r2, r3
 8005840:	2101      	movs	r1, #1
 8005842:	2001      	movs	r0, #1
 8005844:	f001 f9f0 	bl	8006c28 <RadioSpiReadRegisters>
 8005848:	1c03      	adds	r3, r0, #0
 800584a:	1c1a      	adds	r2, r3, #0
 800584c:	4b17      	ldr	r3, [pc, #92]	; (80058ac <SpiritRadioSetXtalFlag+0x84>)
 800584e:	b212      	sxth	r2, r2
 8005850:	1c11      	adds	r1, r2, #0
 8005852:	7019      	strb	r1, [r3, #0]
 8005854:	0412      	lsls	r2, r2, #16
 8005856:	0e12      	lsrs	r2, r2, #24
 8005858:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 800585a:	1dfb      	adds	r3, r7, #7
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <SpiritRadioSetXtalFlag+0x4a>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8005862:	193b      	adds	r3, r7, r4
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2240      	movs	r2, #64	; 0x40
 8005868:	4313      	orrs	r3, r2
 800586a:	b2da      	uxtb	r2, r3
 800586c:	193b      	adds	r3, r7, r4
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e007      	b.n	8005882 <SpiritRadioSetXtalFlag+0x5a>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8005872:	210f      	movs	r1, #15
 8005874:	187b      	adds	r3, r7, r1
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	4393      	bics	r3, r2
 800587c:	b2da      	uxtb	r2, r3
 800587e:	187b      	adds	r3, r7, r1
 8005880:	701a      	strb	r2, [r3, #0]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8005882:	230f      	movs	r3, #15
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	001a      	movs	r2, r3
 8005888:	2101      	movs	r1, #1
 800588a:	2001      	movs	r0, #1
 800588c:	f001 f96a 	bl	8006b64 <RadioSpiWriteRegisters>
 8005890:	1c03      	adds	r3, r0, #0
 8005892:	1c1a      	adds	r2, r3, #0
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <SpiritRadioSetXtalFlag+0x84>)
 8005896:	b212      	sxth	r2, r2
 8005898:	1c11      	adds	r1, r2, #0
 800589a:	7019      	strb	r1, [r3, #0]
 800589c:	0412      	lsls	r2, r2, #16
 800589e:	0e12      	lsrs	r2, r2, #24
 80058a0:	705a      	strb	r2, [r3, #1]
  
}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b005      	add	sp, #20
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	20000300 	.word	0x20000300

080058b0 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 80058b8:	230f      	movs	r3, #15
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
  uint32_t vcofreq=0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 80058c4:	210e      	movs	r1, #14
 80058c6:	187b      	adds	r3, r7, r1
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a4a      	ldr	r2, [pc, #296]	; (80059f8 <SpiritRadioSearchWCP+0x148>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d907      	bls.n	80058e4 <SpiritRadioSearchWCP+0x34>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a49      	ldr	r2, [pc, #292]	; (80059fc <SpiritRadioSearchWCP+0x14c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d803      	bhi.n	80058e4 <SpiritRadioSearchWCP+0x34>
  {
    BFactor = HIGH_BAND_FACTOR;
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	2206      	movs	r2, #6
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e025      	b.n	8005930 <SpiritRadioSearchWCP+0x80>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a46      	ldr	r2, [pc, #280]	; (8005a00 <SpiritRadioSearchWCP+0x150>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d908      	bls.n	80058fe <SpiritRadioSearchWCP+0x4e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a45      	ldr	r2, [pc, #276]	; (8005a04 <SpiritRadioSearchWCP+0x154>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d804      	bhi.n	80058fe <SpiritRadioSearchWCP+0x4e>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 80058f4:	230e      	movs	r3, #14
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	220c      	movs	r2, #12
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	e018      	b.n	8005930 <SpiritRadioSearchWCP+0x80>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a41      	ldr	r2, [pc, #260]	; (8005a08 <SpiritRadioSearchWCP+0x158>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d908      	bls.n	8005918 <SpiritRadioSearchWCP+0x68>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a40      	ldr	r2, [pc, #256]	; (8005a0c <SpiritRadioSearchWCP+0x15c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d804      	bhi.n	8005918 <SpiritRadioSearchWCP+0x68>
  {
    BFactor = LOW_BAND_FACTOR;
 800590e:	230e      	movs	r3, #14
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	2210      	movs	r2, #16
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e00b      	b.n	8005930 <SpiritRadioSearchWCP+0x80>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a3d      	ldr	r2, [pc, #244]	; (8005a10 <SpiritRadioSearchWCP+0x160>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d907      	bls.n	8005930 <SpiritRadioSearchWCP+0x80>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a3c      	ldr	r2, [pc, #240]	; (8005a14 <SpiritRadioSearchWCP+0x164>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d803      	bhi.n	8005930 <SpiritRadioSearchWCP+0x80>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8005928:	230e      	movs	r3, #14
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2220      	movs	r2, #32
 800592e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	22fa      	movs	r2, #250	; 0xfa
 8005934:	0091      	lsls	r1, r2, #2
 8005936:	0018      	movs	r0, r3
 8005938:	f7fa fbe4 	bl	8000104 <__udivsi3>
 800593c:	0003      	movs	r3, r0
 800593e:	001a      	movs	r2, r3
 8005940:	230e      	movs	r3, #14
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	4353      	muls	r3, r2
 8005948:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 800594a:	4b33      	ldr	r3, [pc, #204]	; (8005a18 <SpiritRadioSearchWCP+0x168>)
 800594c:	001a      	movs	r2, r3
 800594e:	0013      	movs	r3, r2
 8005950:	015b      	lsls	r3, r3, #5
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	189b      	adds	r3, r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	001a      	movs	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4293      	cmp	r3, r2
 8005960:	d304      	bcc.n	800596c <SpiritRadioSearchWCP+0xbc>
  {
    i=15;
 8005962:	230f      	movs	r3, #15
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	220f      	movs	r2, #15
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e032      	b.n	80059d2 <SpiritRadioSearchWCP+0x122>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800596c:	230f      	movs	r3, #15
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e008      	b.n	8005988 <SpiritRadioSearchWCP+0xd8>
 8005976:	210f      	movs	r1, #15
 8005978:	187b      	adds	r3, r7, r1
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b25b      	sxtb	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	3301      	adds	r3, #1
 8005982:	b2da      	uxtb	r2, r3
 8005984:	187b      	adds	r3, r7, r1
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	220f      	movs	r2, #15
 800598a:	18bb      	adds	r3, r7, r2
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	b25b      	sxtb	r3, r3
 8005990:	2b0e      	cmp	r3, #14
 8005992:	dc10      	bgt.n	80059b6 <SpiritRadioSearchWCP+0x106>
 8005994:	18bb      	adds	r3, r7, r2
 8005996:	2200      	movs	r2, #0
 8005998:	569a      	ldrsb	r2, [r3, r2]
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <SpiritRadioSearchWCP+0x16c>)
 800599c:	0052      	lsls	r2, r2, #1
 800599e:	5ad3      	ldrh	r3, [r2, r3]
 80059a0:	001a      	movs	r2, r3
 80059a2:	0013      	movs	r3, r2
 80059a4:	015b      	lsls	r3, r3, #5
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	001a      	movs	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d8df      	bhi.n	8005976 <SpiritRadioSearchWCP+0xc6>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 80059b6:	210f      	movs	r1, #15
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <SpiritRadioSearchWCP+0x122>
      i--;
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b25b      	sxtb	r3, r3
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return index */
  return (i%8);
 80059d2:	230f      	movs	r3, #15
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	b25b      	sxtb	r3, r3
 80059da:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <SpiritRadioSearchWCP+0x170>)
 80059dc:	4013      	ands	r3, r2
 80059de:	d504      	bpl.n	80059ea <SpiritRadioSearchWCP+0x13a>
 80059e0:	3b01      	subs	r3, #1
 80059e2:	2208      	movs	r2, #8
 80059e4:	4252      	negs	r2, r2
 80059e6:	4313      	orrs	r3, r2
 80059e8:	3301      	adds	r3, #1
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
  
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b004      	add	sp, #16
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	2e5f567f 	.word	0x2e5f567f
 80059fc:	390c2fe0 	.word	0x390c2fe0
 8005a00:	1701e47f 	.word	0x1701e47f
 8005a04:	1c146a60 	.word	0x1c146a60
 8005a08:	11d260bf 	.word	0x11d260bf
 8005a0c:	14ced7e0 	.word	0x14ced7e0
 8005a10:	08e18f3f 	.word	0x08e18f3f
 8005a14:	0a6fd060 	.word	0x0a6fd060
 8005a18:	0000161f 	.word	0x0000161f
 8005a1c:	0800c118 	.word	0x0800c118
 8005a20:	80000007 	.word	0x80000007

08005a24 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	2104      	movs	r1, #4
 8005a30:	2008      	movs	r0, #8
 8005a32:	f001 f8f9 	bl	8006c28 <RadioSpiReadRegisters>
 8005a36:	1c03      	adds	r3, r0, #0
 8005a38:	1c1a      	adds	r2, r3, #0
 8005a3a:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <SpiritRadioGetSynthWord+0x54>)
 8005a3c:	b212      	sxth	r2, r2
 8005a3e:	1c11      	adds	r1, r2, #0
 8005a40:	7019      	strb	r1, [r3, #0]
 8005a42:	0412      	lsls	r2, r2, #16
 8005a44:	0e12      	lsrs	r2, r2, #24
 8005a46:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	055a      	lsls	r2, r3, #21
 8005a4e:	23f8      	movs	r3, #248	; 0xf8
 8005a50:	049b      	lsls	r3, r3, #18
 8005a52:	401a      	ands	r2, r3
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	035b      	lsls	r3, r3, #13
 8005a5a:	18d2      	adds	r2, r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8005a5c:	1d3b      	adds	r3, r7, #4
 8005a5e:	789b      	ldrb	r3, [r3, #2]
 8005a60:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8005a62:	18d3      	adds	r3, r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8005a64:	1d3a      	adds	r2, r7, #4
 8005a66:	78d2      	ldrb	r2, [r2, #3]
 8005a68:	08d2      	lsrs	r2, r2, #3
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	189b      	adds	r3, r3, r2
  
}
 8005a6e:	0018      	movs	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b002      	add	sp, #8
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	20000300 	.word	0x20000300

08005a7c <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8005a82:	1dfb      	adds	r3, r7, #7
 8005a84:	001a      	movs	r2, r3
 8005a86:	2101      	movs	r1, #1
 8005a88:	200b      	movs	r0, #11
 8005a8a:	f001 f8cd 	bl	8006c28 <RadioSpiReadRegisters>
 8005a8e:	1c03      	adds	r3, r0, #0
 8005a90:	1c1a      	adds	r2, r3, #0
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <SpiritRadioGetBand+0x64>)
 8005a94:	b212      	sxth	r2, r2
 8005a96:	1c11      	adds	r1, r2, #0
 8005a98:	7019      	strb	r1, [r3, #0]
 8005a9a:	0412      	lsls	r2, r2, #16
 8005a9c:	0e12      	lsrs	r2, r2, #24
 8005a9e:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8005aa0:	1dfb      	adds	r3, r7, #7
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	001a      	movs	r2, r3
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <SpiritRadioGetBand+0x36>
  {
    return HIGH_BAND;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e012      	b.n	8005ad8 <SpiritRadioGetBand+0x5c>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8005ab2:	1dfb      	adds	r3, r7, #7
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	2307      	movs	r3, #7
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d101      	bne.n	8005ac4 <SpiritRadioGetBand+0x48>
  {
    return MIDDLE_BAND;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e009      	b.n	8005ad8 <SpiritRadioGetBand+0x5c>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	001a      	movs	r2, r3
 8005aca:	2307      	movs	r3, #7
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d101      	bne.n	8005ad6 <SpiritRadioGetBand+0x5a>
  {
    return LOW_BAND;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e000      	b.n	8005ad8 <SpiritRadioGetBand+0x5c>
  }
  else
  {
    return VERY_LOW_BAND;
 8005ad6:	2303      	movs	r3, #3
  }
  
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b002      	add	sp, #8
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000300 	.word	0x20000300

08005ae4 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8005aea:	1dfb      	adds	r3, r7, #7
 8005aec:	001a      	movs	r2, r3
 8005aee:	2101      	movs	r1, #1
 8005af0:	206c      	movs	r0, #108	; 0x6c
 8005af2:	f001 f899 	bl	8006c28 <RadioSpiReadRegisters>
 8005af6:	1c03      	adds	r3, r0, #0
 8005af8:	1c1a      	adds	r2, r3, #0
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <SpiritRadioGetChannel+0x30>)
 8005afc:	b212      	sxth	r2, r2
 8005afe:	1c11      	adds	r1, r2, #0
 8005b00:	7019      	strb	r1, [r3, #0]
 8005b02:	0412      	lsls	r2, r2, #16
 8005b04:	0e12      	lsrs	r2, r2, #24
 8005b06:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8005b08:	1dfb      	adds	r3, r7, #7
 8005b0a:	781b      	ldrb	r3, [r3, #0]
  
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b002      	add	sp, #8
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20000300 	.word	0x20000300

08005b18 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8005b1e:	1dfb      	adds	r3, r7, #7
 8005b20:	001a      	movs	r2, r3
 8005b22:	2101      	movs	r1, #1
 8005b24:	200c      	movs	r0, #12
 8005b26:	f001 f87f 	bl	8006c28 <RadioSpiReadRegisters>
 8005b2a:	1c03      	adds	r3, r0, #0
 8005b2c:	1c1a      	adds	r2, r3, #0
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <SpiritRadioGetChannelSpace+0x3c>)
 8005b30:	b212      	sxth	r2, r2
 8005b32:	1c11      	adds	r1, r2, #0
 8005b34:	7019      	strb	r1, [r3, #0]
 8005b36:	0412      	lsls	r2, r2, #16
 8005b38:	0e12      	lsrs	r2, r2, #24
 8005b3a:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8005b3c:	1dfb      	adds	r3, r7, #7
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	001a      	movs	r2, r3
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <SpiritRadioGetChannelSpace+0x40>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4353      	muls	r3, r2
 8005b48:	0bdb      	lsrs	r3, r3, #15
  
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b002      	add	sp, #8
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	20000300 	.word	0x20000300
 8005b58:	200002fc 	.word	0x200002fc

08005b5c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	001a      	movs	r2, r3
 8005b66:	2102      	movs	r1, #2
 8005b68:	200e      	movs	r0, #14
 8005b6a:	f001 f85d 	bl	8006c28 <RadioSpiReadRegisters>
 8005b6e:	1c03      	adds	r3, r0, #0
 8005b70:	1c1a      	adds	r2, r3, #0
 8005b72:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <SpiritRadioGetFrequencyOffset+0x90>)
 8005b74:	b212      	sxth	r2, r2
 8005b76:	1c11      	adds	r1, r2, #0
 8005b78:	7019      	strb	r1, [r3, #0]
 8005b7a:	0412      	lsls	r2, r2, #16
 8005b7c:	0e12      	lsrs	r2, r2, #24
 8005b7e:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	18d3      	adds	r3, r2, r3
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	1cbb      	adds	r3, r7, #2
 8005b96:	801a      	strh	r2, [r3, #0]
  
  if(xtalOffTemp & 0x0800)
 8005b98:	1cbb      	adds	r3, r7, #2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	001a      	movs	r2, r3
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <SpiritRadioGetFrequencyOffset+0x5a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8005ba6:	1cbb      	adds	r3, r7, #2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <SpiritRadioGetFrequencyOffset+0x94>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	1cbb      	adds	r3, r7, #2
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e006      	b.n	8005bc4 <SpiritRadioGetFrequencyOffset+0x68>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8005bb6:	1cbb      	adds	r3, r7, #2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	051b      	lsls	r3, r3, #20
 8005bbc:	0d1b      	lsrs	r3, r3, #20
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	1cbb      	adds	r3, r7, #2
 8005bc2:	801a      	strh	r2, [r3, #0]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8005bc4:	1cba      	adds	r2, r7, #2
 8005bc6:	1dbb      	adds	r3, r7, #6
 8005bc8:	8812      	ldrh	r2, [r2, #0]
 8005bca:	801a      	strh	r2, [r3, #0]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8005bcc:	1dbb      	adds	r3, r7, #6
 8005bce:	2200      	movs	r2, #0
 8005bd0:	5e9a      	ldrsh	r2, [r3, r2]
 8005bd2:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <SpiritRadioGetFrequencyOffset+0x98>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4353      	muls	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	da02      	bge.n	8005be2 <SpiritRadioGetFrequencyOffset+0x86>
 8005bdc:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <SpiritRadioGetFrequencyOffset+0x9c>)
 8005bde:	4694      	mov	ip, r2
 8005be0:	4463      	add	r3, ip
 8005be2:	149b      	asrs	r3, r3, #18
  
}
 8005be4:	0018      	movs	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b002      	add	sp, #8
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000300 	.word	0x20000300
 8005bf0:	fffff000 	.word	0xfffff000
 8005bf4:	200002fc 	.word	0x200002fc
 8005bf8:	0003ffff 	.word	0x0003ffff

08005bfc <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfe:	b08d      	sub	sp, #52	; 0x34
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8005c04:	2127      	movs	r1, #39	; 0x27
 8005c06:	2008      	movs	r0, #8
 8005c08:	180b      	adds	r3, r1, r0
 8005c0a:	19db      	adds	r3, r3, r7
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4a90      	ldr	r2, [pc, #576]	; (8005e54 <SpiritRadioSetFrequencyBase+0x258>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d908      	bls.n	8005c2a <SpiritRadioSetFrequencyBase+0x2e>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a8f      	ldr	r2, [pc, #572]	; (8005e58 <SpiritRadioSetFrequencyBase+0x25c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d804      	bhi.n	8005c2a <SpiritRadioSetFrequencyBase+0x2e>
  {
    band = HIGH_BAND;
 8005c20:	180b      	adds	r3, r1, r0
 8005c22:	19db      	adds	r3, r3, r7
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e02b      	b.n	8005c82 <SpiritRadioSetFrequencyBase+0x86>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a8b      	ldr	r2, [pc, #556]	; (8005e5c <SpiritRadioSetFrequencyBase+0x260>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d90a      	bls.n	8005c48 <SpiritRadioSetFrequencyBase+0x4c>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a8a      	ldr	r2, [pc, #552]	; (8005e60 <SpiritRadioSetFrequencyBase+0x264>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d806      	bhi.n	8005c48 <SpiritRadioSetFrequencyBase+0x4c>
  {
    band = MIDDLE_BAND;
 8005c3a:	2327      	movs	r3, #39	; 0x27
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	19db      	adds	r3, r3, r7
 8005c42:	2201      	movs	r2, #1
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e01c      	b.n	8005c82 <SpiritRadioSetFrequencyBase+0x86>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4a86      	ldr	r2, [pc, #536]	; (8005e64 <SpiritRadioSetFrequencyBase+0x268>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d90a      	bls.n	8005c66 <SpiritRadioSetFrequencyBase+0x6a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a85      	ldr	r2, [pc, #532]	; (8005e68 <SpiritRadioSetFrequencyBase+0x26c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d806      	bhi.n	8005c66 <SpiritRadioSetFrequencyBase+0x6a>
  {
    band = LOW_BAND;
 8005c58:	2327      	movs	r3, #39	; 0x27
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	189b      	adds	r3, r3, r2
 8005c5e:	19db      	adds	r3, r3, r7
 8005c60:	2202      	movs	r2, #2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e00d      	b.n	8005c82 <SpiritRadioSetFrequencyBase+0x86>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a80      	ldr	r2, [pc, #512]	; (8005e6c <SpiritRadioSetFrequencyBase+0x270>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d909      	bls.n	8005c82 <SpiritRadioSetFrequencyBase+0x86>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a7f      	ldr	r2, [pc, #508]	; (8005e70 <SpiritRadioSetFrequencyBase+0x274>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d805      	bhi.n	8005c82 <SpiritRadioSetFrequencyBase+0x86>
  {
    band = VERY_LOW_BAND;
 8005c76:	2327      	movs	r3, #39	; 0x27
 8005c78:	2208      	movs	r2, #8
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	19db      	adds	r3, r3, r7
 8005c7e:	2203      	movs	r2, #3
 8005c80:	701a      	strb	r2, [r3, #0]
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8005c82:	f7ff ff6b 	bl	8005b5c <SpiritRadioGetFrequencyOffset>
 8005c86:	0003      	movs	r3, r0
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8005c8a:	f7ff ff45 	bl	8005b18 <SpiritRadioGetChannelSpace>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8005c92:	251b      	movs	r5, #27
 8005c94:	2608      	movs	r6, #8
 8005c96:	19ab      	adds	r3, r5, r6
 8005c98:	19dc      	adds	r4, r3, r7
 8005c9a:	f7ff ff23 	bl	8005ae4 <SpiritRadioGetChannel>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	7023      	strb	r3, [r4, #0]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8005ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	18d2      	adds	r2, r2, r3
 8005ca8:	0034      	movs	r4, r6
 8005caa:	192b      	adds	r3, r5, r4
 8005cac:	19db      	adds	r3, r3, r7
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cb2:	434b      	muls	r3, r1
 8005cb4:	18d3      	adds	r3, r2, r3
 8005cb6:	61fb      	str	r3, [r7, #28]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8005cb8:	f000 fe24 	bl	8006904 <SpiritRadioGetRefDiv>
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	001a      	movs	r2, r3
 8005cc0:	2313      	movs	r3, #19
 8005cc2:	191b      	adds	r3, r3, r4
 8005cc4:	19db      	adds	r3, r3, r7
 8005cc6:	3201      	adds	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
  
  /* Selects the VCO */
  switch(band)
 8005cca:	2327      	movs	r3, #39	; 0x27
 8005ccc:	191b      	adds	r3, r3, r4
 8005cce:	19db      	adds	r3, r3, r7
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d008      	beq.n	8005ce8 <SpiritRadioSetFrequencyBase+0xec>
 8005cd6:	dc36      	bgt.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d011      	beq.n	8005d00 <SpiritRadioSetFrequencyBase+0x104>
 8005cdc:	dc33      	bgt.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d026      	beq.n	8005d30 <SpiritRadioSetFrequencyBase+0x134>
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d018      	beq.n	8005d18 <SpiritRadioSetFrequencyBase+0x11c>
 8005ce6:	e02e      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4a62      	ldr	r2, [pc, #392]	; (8005e74 <SpiritRadioSetFrequencyBase+0x278>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d803      	bhi.n	8005cf8 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f7fe fc71 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8005cf6:	e026      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
      SpiritCalibrationSelectVco(VCO_H);
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f7fe fc6d 	bl	80045d8 <SpiritCalibrationSelectVco>
    break;
 8005cfe:	e022      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4a5d      	ldr	r2, [pc, #372]	; (8005e78 <SpiritRadioSetFrequencyBase+0x27c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d803      	bhi.n	8005d10 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f7fe fc65 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8005d0e:	e01a      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
      SpiritCalibrationSelectVco(VCO_H);
 8005d10:	2001      	movs	r0, #1
 8005d12:	f7fe fc61 	bl	80045d8 <SpiritCalibrationSelectVco>
    break;
 8005d16:	e016      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4a58      	ldr	r2, [pc, #352]	; (8005e7c <SpiritRadioSetFrequencyBase+0x280>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d803      	bhi.n	8005d28 <SpiritRadioSetFrequencyBase+0x12c>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8005d20:	2000      	movs	r0, #0
 8005d22:	f7fe fc59 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8005d26:	e00e      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
      SpiritCalibrationSelectVco(VCO_H);
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f7fe fc55 	bl	80045d8 <SpiritCalibrationSelectVco>
    break;
 8005d2e:	e00a      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4a53      	ldr	r2, [pc, #332]	; (8005e80 <SpiritRadioSetFrequencyBase+0x284>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d803      	bhi.n	8005d40 <SpiritRadioSetFrequencyBase+0x144>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f7fe fc4d 	bl	80045d8 <SpiritCalibrationSelectVco>
 8005d3e:	e002      	b.n	8005d46 <SpiritRadioSetFrequencyBase+0x14a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7fe fc49 	bl	80045d8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8005d46:	2612      	movs	r6, #18
 8005d48:	2508      	movs	r5, #8
 8005d4a:	1973      	adds	r3, r6, r5
 8005d4c:	19dc      	adds	r4, r3, r7
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7ff fdad 	bl	80058b0 <SpiritRadioSearchWCP>
 8005d56:	0003      	movs	r3, r0
 8005d58:	7023      	strb	r3, [r4, #0]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8005d5a:	2327      	movs	r3, #39	; 0x27
 8005d5c:	195b      	adds	r3, r3, r5
 8005d5e:	19db      	adds	r3, r3, r7
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	4a48      	ldr	r2, [pc, #288]	; (8005e84 <SpiritRadioSetFrequencyBase+0x288>)
 8005d64:	5cd3      	ldrb	r3, [r2, r3]
 8005d66:	001a      	movs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4353      	muls	r3, r2
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f7fd f9ef 	bl	8003150 <__aeabi_ui2d>
 8005d72:	0004      	movs	r4, r0
 8005d74:	000d      	movs	r5, r1
 8005d76:	2213      	movs	r2, #19
 8005d78:	2108      	movs	r1, #8
 8005d7a:	1853      	adds	r3, r2, r1
 8005d7c:	19db      	adds	r3, r3, r7
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	049b      	lsls	r3, r3, #18
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fd f9b4 	bl	80030f0 <__aeabi_i2d>
 8005d88:	6038      	str	r0, [r7, #0]
 8005d8a:	6079      	str	r1, [r7, #4]
 8005d8c:	4b3e      	ldr	r3, [pc, #248]	; (8005e88 <SpiritRadioSetFrequencyBase+0x28c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7fd f9dd 	bl	8003150 <__aeabi_ui2d>
 8005d96:	0002      	movs	r2, r0
 8005d98:	000b      	movs	r3, r1
 8005d9a:	6838      	ldr	r0, [r7, #0]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	f7fb ff33 	bl	8001c08 <__aeabi_ddiv>
 8005da2:	0002      	movs	r2, r0
 8005da4:	000b      	movs	r3, r1
 8005da6:	0020      	movs	r0, r4
 8005da8:	0029      	movs	r1, r5
 8005daa:	f7fc fb27 	bl	80023fc <__aeabi_dmul>
 8005dae:	0002      	movs	r2, r0
 8005db0:	000b      	movs	r3, r1
 8005db2:	0010      	movs	r0, r2
 8005db4:	0019      	movs	r1, r3
 8005db6:	f7fa fbcb 	bl	8000550 <__aeabi_d2uiz>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	617b      	str	r3, [r7, #20]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	0d5b      	lsrs	r3, r3, #21
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	221f      	movs	r2, #31
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	2108      	movs	r1, #8
 8005dcc:	1873      	adds	r3, r6, r1
 8005dce:	19db      	adds	r3, r3, r7
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	015b      	lsls	r3, r3, #5
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	2008      	movs	r0, #8
 8005ddc:	1843      	adds	r3, r0, r1
 8005dde:	19db      	adds	r3, r3, r7
 8005de0:	701a      	strb	r2, [r3, #0]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	0b5b      	lsrs	r3, r3, #13
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	1843      	adds	r3, r0, r1
 8005dea:	19db      	adds	r3, r3, r7
 8005dec:	705a      	strb	r2, [r3, #1]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	1843      	adds	r3, r0, r1
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	709a      	strb	r2, [r3, #2]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	2327      	movs	r3, #39	; 0x27
 8005e04:	000c      	movs	r4, r1
 8005e06:	185b      	adds	r3, r3, r1
 8005e08:	19db      	adds	r3, r3, r7
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	491f      	ldr	r1, [pc, #124]	; (8005e8c <SpiritRadioSetFrequencyBase+0x290>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	1903      	adds	r3, r0, r4
 8005e16:	19db      	adds	r3, r3, r7
 8005e18:	70da      	strb	r2, [r3, #3]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8005e1a:	1903      	adds	r3, r0, r4
 8005e1c:	19db      	adds	r3, r3, r7
 8005e1e:	001a      	movs	r2, r3
 8005e20:	2104      	movs	r1, #4
 8005e22:	2008      	movs	r0, #8
 8005e24:	f000 fe9e 	bl	8006b64 <RadioSpiWriteRegisters>
 8005e28:	1c03      	adds	r3, r0, #0
 8005e2a:	1c1a      	adds	r2, r3, #0
 8005e2c:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <SpiritRadioSetFrequencyBase+0x294>)
 8005e2e:	b212      	sxth	r2, r2
 8005e30:	1c11      	adds	r1, r2, #0
 8005e32:	7019      	strb	r1, [r3, #0]
 8005e34:	0412      	lsls	r2, r2, #16
 8005e36:	0e12      	lsrs	r2, r2, #24
 8005e38:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <SpiritRadioSetFrequencyBase+0x298>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d103      	bne.n	8005e4a <SpiritRadioSetFrequencyBase+0x24e>
    return SpiritManagementWaVcoCalibration();
 8005e42:	f7fe fe69 	bl	8004b18 <SpiritManagementWaVcoCalibration>
 8005e46:	0003      	movs	r3, r0
 8005e48:	e000      	b.n	8005e4c <SpiritRadioSetFrequencyBase+0x250>
  
  return 0;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b00d      	add	sp, #52	; 0x34
 8005e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e54:	2e5f567f 	.word	0x2e5f567f
 8005e58:	390c2fe0 	.word	0x390c2fe0
 8005e5c:	1701e47f 	.word	0x1701e47f
 8005e60:	1c146a60 	.word	0x1c146a60
 8005e64:	11d260bf 	.word	0x11d260bf
 8005e68:	14ced7e0 	.word	0x14ced7e0
 8005e6c:	08e18f3f 	.word	0x08e18f3f
 8005e70:	0a6fd060 	.word	0x0a6fd060
 8005e74:	099cf4e1 	.word	0x099cf4e1
 8005e78:	1339e9c3 	.word	0x1339e9c3
 8005e7c:	19a28d05 	.word	0x19a28d05
 8005e80:	33451a0a 	.word	0x33451a0a
 8005e84:	0800c05c 	.word	0x0800c05c
 8005e88:	200002fc 	.word	0x200002fc
 8005e8c:	0800c060 	.word	0x0800c060
 8005e90:	20000300 	.word	0x20000300
 8005e94:	20000005 	.word	0x20000005

08005e98 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8005e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8005e9e:	f7ff fdc1 	bl	8005a24 <SpiritRadioGetSynthWord>
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	60fb      	str	r3, [r7, #12]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8005ea6:	220b      	movs	r2, #11
 8005ea8:	18bc      	adds	r4, r7, r2
 8005eaa:	f7ff fde7 	bl	8005a7c <SpiritRadioGetBand>
 8005eae:	0003      	movs	r3, r0
 8005eb0:	7023      	strb	r3, [r4, #0]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8005eb2:	f000 fd27 	bl	8006904 <SpiritRadioGetRefDiv>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	001a      	movs	r2, r3
 8005eba:	260a      	movs	r6, #10
 8005ebc:	19bb      	adds	r3, r7, r6
 8005ebe:	3201      	adds	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7fd f944 	bl	8003150 <__aeabi_ui2d>
 8005ec8:	0004      	movs	r4, r0
 8005eca:	000d      	movs	r5, r1
 8005ecc:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <SpiritRadioGetFrequencyBase+0x94>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7fd f93d 	bl	8003150 <__aeabi_ui2d>
 8005ed6:	6038      	str	r0, [r7, #0]
 8005ed8:	6079      	str	r1, [r7, #4]
 8005eda:	19bb      	adds	r3, r7, r6
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	220b      	movs	r2, #11
 8005ee0:	18ba      	adds	r2, r7, r2
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	4912      	ldr	r1, [pc, #72]	; (8005f30 <SpiritRadioGetFrequencyBase+0x98>)
 8005ee6:	5c8a      	ldrb	r2, [r1, r2]
 8005ee8:	4353      	muls	r3, r2
 8005eea:	049b      	lsls	r3, r3, #18
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7fd f8ff 	bl	80030f0 <__aeabi_i2d>
 8005ef2:	0002      	movs	r2, r0
 8005ef4:	000b      	movs	r3, r1
 8005ef6:	6838      	ldr	r0, [r7, #0]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	f7fb fe85 	bl	8001c08 <__aeabi_ddiv>
 8005efe:	0002      	movs	r2, r0
 8005f00:	000b      	movs	r3, r1
 8005f02:	0020      	movs	r0, r4
 8005f04:	0029      	movs	r1, r5
 8005f06:	f7fc fa79 	bl	80023fc <__aeabi_dmul>
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	000b      	movs	r3, r1
 8005f0e:	0010      	movs	r0, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	f005 fa2d 	bl	800b370 <round>
 8005f16:	0002      	movs	r2, r0
 8005f18:	000b      	movs	r3, r1
 8005f1a:	0010      	movs	r0, r2
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	f7fa fb17 	bl	8000550 <__aeabi_d2uiz>
 8005f22:	0003      	movs	r3, r0
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b005      	add	sp, #20
 8005f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2c:	200002fc 	.word	0x200002fc
 8005f30:	0800c05c 	.word	0x0800c05c

08005f34 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b089      	sub	sp, #36	; 0x24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8005f40:	2318      	movs	r3, #24
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
  int8_t i=15;
 8005f48:	231f      	movs	r3, #31
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	220f      	movs	r2, #15
 8005f4e:	701a      	strb	r2, [r3, #0]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8005f50:	211a      	movs	r1, #26
 8005f52:	187b      	adds	r3, r7, r1
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8005f58:	187c      	adds	r4, r7, r1
 8005f5a:	f000 fd2f 	bl	80069bc <SpiritRadioGetDigDiv>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	7023      	strb	r3, [r4, #0]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8005f62:	e01e      	b.n	8005fa2 <SpiritRadioSearchDatarateME+0x6e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8005f64:	4b6b      	ldr	r3, [pc, #428]	; (8006114 <SpiritRadioSearchDatarateME+0x1e0>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	231f      	movs	r3, #31
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b25b      	sxtb	r3, r3
 8005f70:	2114      	movs	r1, #20
 8005f72:	1ac9      	subs	r1, r1, r3
 8005f74:	231a      	movs	r3, #26
 8005f76:	18fb      	adds	r3, r7, r3
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	18cb      	adds	r3, r1, r3
 8005f7c:	40da      	lsrs	r2, r3
 8005f7e:	0013      	movs	r3, r2
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d304      	bcc.n	8005f90 <SpiritRadioSearchDatarateME+0x5c>
    {
      find = S_TRUE;
 8005f86:	2318      	movs	r3, #24
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e008      	b.n	8005fa2 <SpiritRadioSearchDatarateME+0x6e>
    }
    else
    {
      i--;
 8005f90:	211f      	movs	r1, #31
 8005f92:	187b      	adds	r3, r7, r1
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	701a      	strb	r2, [r3, #0]
  while(!find && i>=0)
 8005fa2:	2318      	movs	r3, #24
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <SpiritRadioSearchDatarateME+0x84>
 8005fae:	231f      	movs	r3, #31
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb6:	d9d5      	bls.n	8005f64 <SpiritRadioSearchDatarateME+0x30>
    }
  }
  i<0 ? i=0 : i;
 8005fb8:	221f      	movs	r2, #31
 8005fba:	18bb      	adds	r3, r7, r2
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc0:	d902      	bls.n	8005fc8 <SpiritRadioSearchDatarateME+0x94>
 8005fc2:	18bb      	adds	r3, r7, r2
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]
  *pcE = i;
 8005fc8:	211f      	movs	r1, #31
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8005fd2:	187b      	adds	r3, r7, r1
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b25b      	sxtb	r3, r3
 8005fd8:	2217      	movs	r2, #23
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	409a      	lsls	r2, r3
 8005fe0:	0010      	movs	r0, r2
 8005fe2:	4b4c      	ldr	r3, [pc, #304]	; (8006114 <SpiritRadioSearchDatarateME+0x1e0>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	231a      	movs	r3, #26
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	3305      	adds	r3, #5
 8005fee:	40da      	lsrs	r2, r3
 8005ff0:	0013      	movs	r3, r2
 8005ff2:	0019      	movs	r1, r3
 8005ff4:	f7fa f886 	bl	8000104 <__udivsi3>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	2319      	movs	r3, #25
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	701a      	strb	r2, [r3, #0]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8006002:	231e      	movs	r3, #30
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e03e      	b.n	800608a <SpiritRadioSearchDatarateME+0x156>
  {
    if((cMantissaTmp+j-1))
 800600c:	2119      	movs	r1, #25
 800600e:	187b      	adds	r3, r7, r1
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	241e      	movs	r4, #30
 8006014:	193b      	adds	r3, r7, r4
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	18d3      	adds	r3, r2, r3
 800601a:	2b01      	cmp	r3, #1
 800601c:	d027      	beq.n	800606e <SpiritRadioSearchDatarateME+0x13a>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	b29a      	uxth	r2, r3
 8006022:	187b      	adds	r3, r7, r1
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	31ff      	adds	r1, #255	; 0xff
 800602a:	193b      	adds	r3, r7, r4
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	18cb      	adds	r3, r1, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	0018      	movs	r0, r3
 8006034:	4b37      	ldr	r3, [pc, #220]	; (8006114 <SpiritRadioSearchDatarateME+0x1e0>)
 8006036:	6819      	ldr	r1, [r3, #0]
 8006038:	231a      	movs	r3, #26
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	3305      	adds	r3, #5
 8006040:	40d9      	lsrs	r1, r3
 8006042:	000b      	movs	r3, r1
 8006044:	4343      	muls	r3, r0
 8006046:	0019      	movs	r1, r3
 8006048:	231f      	movs	r3, #31
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	b25b      	sxtb	r3, r3
 8006050:	2017      	movs	r0, #23
 8006052:	1ac3      	subs	r3, r0, r3
 8006054:	40d9      	lsrs	r1, r3
 8006056:	000b      	movs	r3, r1
 8006058:	b29b      	uxth	r3, r3
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b299      	uxth	r1, r3
 800605e:	193b      	adds	r3, r7, r4
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	b209      	sxth	r1, r1
 8006064:	2310      	movs	r3, #16
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	0052      	lsls	r2, r2, #1
 800606a:	52d1      	strh	r1, [r2, r3]
 800606c:	e007      	b.n	800607e <SpiritRadioSearchDatarateME+0x14a>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800606e:	231e      	movs	r3, #30
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	2310      	movs	r3, #16
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	0052      	lsls	r2, r2, #1
 800607a:	4927      	ldr	r1, [pc, #156]	; (8006118 <SpiritRadioSearchDatarateME+0x1e4>)
 800607c:	52d1      	strh	r1, [r2, r3]
  for(uint8_t j=0;j<3;j++)
 800607e:	211e      	movs	r1, #30
 8006080:	187b      	adds	r3, r7, r1
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	187b      	adds	r3, r7, r1
 8006086:	3201      	adds	r2, #1
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	231e      	movs	r3, #30
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d9bb      	bls.n	800600c <SpiritRadioSearchDatarateME+0xd8>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8006094:	231c      	movs	r3, #28
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	2201      	movs	r2, #1
 800609a:	4252      	negs	r2, r2
 800609c:	801a      	strh	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 800609e:	231b      	movs	r3, #27
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	2200      	movs	r2, #0
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e02a      	b.n	80060fe <SpiritRadioSearchDatarateME+0x1ca>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80060a8:	201b      	movs	r0, #27
 80060aa:	183b      	adds	r3, r7, r0
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	2110      	movs	r1, #16
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	0052      	lsls	r2, r2, #1
 80060b4:	5ed3      	ldrsh	r3, [r2, r3]
 80060b6:	17da      	asrs	r2, r3, #31
 80060b8:	189b      	adds	r3, r3, r2
 80060ba:	4053      	eors	r3, r2
 80060bc:	b29b      	uxth	r3, r3
 80060be:	241c      	movs	r4, #28
 80060c0:	193a      	adds	r2, r7, r4
 80060c2:	8812      	ldrh	r2, [r2, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d914      	bls.n	80060f2 <SpiritRadioSearchDatarateME+0x1be>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80060c8:	183b      	adds	r3, r7, r0
 80060ca:	781a      	ldrb	r2, [r3, #0]
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	0052      	lsls	r2, r2, #1
 80060d0:	5ed2      	ldrsh	r2, [r2, r3]
 80060d2:	193b      	adds	r3, r7, r4
 80060d4:	17d1      	asrs	r1, r2, #31
 80060d6:	1852      	adds	r2, r2, r1
 80060d8:	404a      	eors	r2, r1
 80060da:	801a      	strh	r2, [r3, #0]
      *pcM = cMantissaTmp+j-1;
 80060dc:	2319      	movs	r3, #25
 80060de:	18fa      	adds	r2, r7, r3
 80060e0:	183b      	adds	r3, r7, r0
 80060e2:	7812      	ldrb	r2, [r2, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80060f2:	211b      	movs	r1, #27
 80060f4:	187b      	adds	r3, r7, r1
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	187b      	adds	r3, r7, r1
 80060fa:	3201      	adds	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	231b      	movs	r3, #27
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d9cf      	bls.n	80060a8 <SpiritRadioSearchDatarateME+0x174>
    }
  }
  
}
 8006108:	46c0      	nop			; (mov r8, r8)
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	46bd      	mov	sp, r7
 800610e:	b009      	add	sp, #36	; 0x24
 8006110:	bd90      	pop	{r4, r7, pc}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	200002fc 	.word	0x200002fc
 8006118:	00007fff 	.word	0x00007fff

0800611c <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 800611c:	b5b0      	push	{r4, r5, r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8006128:	2426      	movs	r4, #38	; 0x26
 800612a:	193b      	adds	r3, r7, r4
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8006130:	f000 fc44 	bl	80069bc <SpiritRadioGetDigDiv>
 8006134:	1e03      	subs	r3, r0, #0
 8006136:	d003      	beq.n	8006140 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8006138:	193b      	adds	r3, r7, r4
 800613a:	2202      	movs	r2, #2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	e003      	b.n	8006148 <SpiritRadioSearchChannelBwME+0x2c>
  }
  else
  {
    cDivider = 1;
 8006140:	2326      	movs	r3, #38	; 0x26
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8006148:	4b72      	ldr	r3, [pc, #456]	; (8006314 <SpiritRadioSearchChannelBwME+0x1f8>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	2326      	movs	r3, #38	; 0x26
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	0019      	movs	r1, r3
 8006154:	0010      	movs	r0, r2
 8006156:	f7f9 ffd5 	bl	8000104 <__udivsi3>
 800615a:	0003      	movs	r3, r0
 800615c:	2164      	movs	r1, #100	; 0x64
 800615e:	0018      	movs	r0, r3
 8006160:	f7f9 ffd0 	bl	8000104 <__udivsi3>
 8006164:	0003      	movs	r3, r0
 8006166:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8006168:	2327      	movs	r3, #39	; 0x27
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	2200      	movs	r2, #0
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	e008      	b.n	8006184 <SpiritRadioSearchChannelBwME+0x68>
 8006172:	2127      	movs	r1, #39	; 0x27
 8006174:	187b      	adds	r3, r7, r1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b25b      	sxtb	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	3301      	adds	r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	187b      	adds	r3, r7, r1
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	2227      	movs	r2, #39	; 0x27
 8006186:	18bb      	adds	r3, r7, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b25b      	sxtb	r3, r3
 800618c:	2b59      	cmp	r3, #89	; 0x59
 800618e:	dc11      	bgt.n	80061b4 <SpiritRadioSearchChannelBwME+0x98>
 8006190:	18bb      	adds	r3, r7, r2
 8006192:	2200      	movs	r2, #0
 8006194:	569a      	ldrsb	r2, [r3, r2]
 8006196:	4b60      	ldr	r3, [pc, #384]	; (8006318 <SpiritRadioSearchChannelBwME+0x1fc>)
 8006198:	0052      	lsls	r2, r2, #1
 800619a:	5ad3      	ldrh	r3, [r2, r3]
 800619c:	001a      	movs	r2, r3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4353      	muls	r3, r2
 80061a2:	495e      	ldr	r1, [pc, #376]	; (800631c <SpiritRadioSearchChannelBwME+0x200>)
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7f9 ffad 	bl	8000104 <__udivsi3>
 80061aa:	0003      	movs	r3, r0
 80061ac:	001a      	movs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d3de      	bcc.n	8006172 <SpiritRadioSearchChannelBwME+0x56>
  
  if(i!=0)
 80061b4:	2227      	movs	r2, #39	; 0x27
 80061b6:	18bb      	adds	r3, r7, r2
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d100      	bne.n	80061c2 <SpiritRadioSearchChannelBwME+0xa6>
 80061c0:	e08a      	b.n	80062d8 <SpiritRadioSearchChannelBwME+0x1bc>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80061c2:	231b      	movs	r3, #27
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	18ba      	adds	r2, r7, r2
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	701a      	strb	r2, [r3, #0]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80061cc:	2325      	movs	r3, #37	; 0x25
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e040      	b.n	8006258 <SpiritRadioSearchChannelBwME+0x13c>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80061d6:	211b      	movs	r1, #27
 80061d8:	187b      	adds	r3, r7, r1
 80061da:	2200      	movs	r2, #0
 80061dc:	569a      	ldrsb	r2, [r3, r2]
 80061de:	2025      	movs	r0, #37	; 0x25
 80061e0:	183b      	adds	r3, r7, r0
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	18d3      	adds	r3, r2, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dc07      	bgt.n	80061fa <SpiritRadioSearchChannelBwME+0xde>
 80061ea:	187b      	adds	r3, r7, r1
 80061ec:	2200      	movs	r2, #0
 80061ee:	569a      	ldrsb	r2, [r3, r2]
 80061f0:	183b      	adds	r3, r7, r0
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	18d3      	adds	r3, r2, r3
 80061f6:	2b5a      	cmp	r3, #90	; 0x5a
 80061f8:	dc20      	bgt.n	800623c <SpiritRadioSearchChannelBwME+0x120>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	b29c      	uxth	r4, r3
 80061fe:	231b      	movs	r3, #27
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	2200      	movs	r2, #0
 8006204:	569a      	ldrsb	r2, [r3, r2]
 8006206:	2525      	movs	r5, #37	; 0x25
 8006208:	197b      	adds	r3, r7, r5
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	18d3      	adds	r3, r2, r3
 800620e:	1e5a      	subs	r2, r3, #1
 8006210:	4b41      	ldr	r3, [pc, #260]	; (8006318 <SpiritRadioSearchChannelBwME+0x1fc>)
 8006212:	0052      	lsls	r2, r2, #1
 8006214:	5ad3      	ldrh	r3, [r2, r3]
 8006216:	001a      	movs	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4353      	muls	r3, r2
 800621c:	493f      	ldr	r1, [pc, #252]	; (800631c <SpiritRadioSearchChannelBwME+0x200>)
 800621e:	0018      	movs	r0, r3
 8006220:	f7f9 ff70 	bl	8000104 <__udivsi3>
 8006224:	0003      	movs	r3, r0
 8006226:	b29b      	uxth	r3, r3
 8006228:	1ae3      	subs	r3, r4, r3
 800622a:	b299      	uxth	r1, r3
 800622c:	197b      	adds	r3, r7, r5
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	b209      	sxth	r1, r1
 8006232:	2314      	movs	r3, #20
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	0052      	lsls	r2, r2, #1
 8006238:	52d1      	strh	r1, [r2, r3]
 800623a:	e007      	b.n	800624c <SpiritRadioSearchChannelBwME+0x130>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800623c:	2325      	movs	r3, #37	; 0x25
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	781a      	ldrb	r2, [r3, #0]
 8006242:	2314      	movs	r3, #20
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	0052      	lsls	r2, r2, #1
 8006248:	4935      	ldr	r1, [pc, #212]	; (8006320 <SpiritRadioSearchChannelBwME+0x204>)
 800624a:	52d1      	strh	r1, [r2, r3]
    for(uint8_t j=0;j<3;j++) 
 800624c:	2125      	movs	r1, #37	; 0x25
 800624e:	187b      	adds	r3, r7, r1
 8006250:	781a      	ldrb	r2, [r3, #0]
 8006252:	187b      	adds	r3, r7, r1
 8006254:	3201      	adds	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	2325      	movs	r3, #37	; 0x25
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d9b9      	bls.n	80061d6 <SpiritRadioSearchChannelBwME+0xba>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8006262:	2322      	movs	r3, #34	; 0x22
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	2201      	movs	r2, #1
 8006268:	4252      	negs	r2, r2
 800626a:	801a      	strh	r2, [r3, #0]
    
    for(uint8_t j=0;j<3;j++)
 800626c:	2321      	movs	r3, #33	; 0x21
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e02b      	b.n	80062ce <SpiritRadioSearchChannelBwME+0x1b2>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8006276:	2021      	movs	r0, #33	; 0x21
 8006278:	183b      	adds	r3, r7, r0
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	2114      	movs	r1, #20
 800627e:	187b      	adds	r3, r7, r1
 8006280:	0052      	lsls	r2, r2, #1
 8006282:	5ed3      	ldrsh	r3, [r2, r3]
 8006284:	17da      	asrs	r2, r3, #31
 8006286:	189b      	adds	r3, r3, r2
 8006288:	4053      	eors	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	2422      	movs	r4, #34	; 0x22
 800628e:	193a      	adds	r2, r7, r4
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d915      	bls.n	80062c2 <SpiritRadioSearchChannelBwME+0x1a6>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8006296:	183b      	adds	r3, r7, r0
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	187b      	adds	r3, r7, r1
 800629c:	0052      	lsls	r2, r2, #1
 800629e:	5ed2      	ldrsh	r2, [r2, r3]
 80062a0:	193b      	adds	r3, r7, r4
 80062a2:	17d1      	asrs	r1, r2, #31
 80062a4:	1852      	adds	r2, r2, r1
 80062a6:	404a      	eors	r2, r1
 80062a8:	801a      	strh	r2, [r3, #0]
        i=i_tmp+j-1;
 80062aa:	231b      	movs	r3, #27
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	781a      	ldrb	r2, [r3, #0]
 80062b0:	183b      	adds	r3, r7, r0
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	18d3      	adds	r3, r2, r3
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	2327      	movs	r3, #39	; 0x27
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	701a      	strb	r2, [r3, #0]
    for(uint8_t j=0;j<3;j++)
 80062c2:	2121      	movs	r1, #33	; 0x21
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	781a      	ldrb	r2, [r3, #0]
 80062c8:	187b      	adds	r3, r7, r1
 80062ca:	3201      	adds	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	2321      	movs	r3, #33	; 0x21
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d9ce      	bls.n	8006276 <SpiritRadioSearchChannelBwME+0x15a>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80062d8:	2427      	movs	r4, #39	; 0x27
 80062da:	193b      	adds	r3, r7, r4
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	2109      	movs	r1, #9
 80062e2:	0018      	movs	r0, r3
 80062e4:	f7f9 ff98 	bl	8000218 <__divsi3>
 80062e8:	0003      	movs	r3, r0
 80062ea:	b25b      	sxtb	r3, r3
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80062f2:	193b      	adds	r3, r7, r4
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	2109      	movs	r1, #9
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7fa f872 	bl	80003e4 <__aeabi_idivmod>
 8006300:	000b      	movs	r3, r1
 8006302:	b25b      	sxtb	r3, r3
 8006304:	b2da      	uxtb	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	701a      	strb	r2, [r3, #0]
  
}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b00a      	add	sp, #40	; 0x28
 8006310:	bdb0      	pop	{r4, r5, r7, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	200002fc 	.word	0x200002fc
 8006318:	0800c064 	.word	0x0800c064
 800631c:	00000a28 	.word	0x00000a28
 8006320:	00007fff 	.word	0x00007fff

08006324 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8006324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006326:	b08b      	sub	sp, #44	; 0x2c
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8006334:	4b57      	ldr	r3, [pc, #348]	; (8006494 <SpiritRadioSearchFreqDevME+0x170>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	0018      	movs	r0, r3
 800633a:	f7fb f8bd 	bl	80014b8 <__aeabi_ui2f>
 800633e:	1c03      	adds	r3, r0, #0
 8006340:	2191      	movs	r1, #145	; 0x91
 8006342:	05c9      	lsls	r1, r1, #23
 8006344:	1c18      	adds	r0, r3, #0
 8006346:	f7fa fb8d 	bl	8000a64 <__aeabi_fdiv>
 800634a:	1c03      	adds	r3, r0, #0
 800634c:	61bb      	str	r3, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 800634e:	2327      	movs	r3, #39	; 0x27
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e02a      	b.n	80063ae <SpiritRadioSearchFreqDevME+0x8a>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8006358:	2427      	movs	r4, #39	; 0x27
 800635a:	193b      	adds	r3, r7, r4
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	409a      	lsls	r2, r3
 8006362:	0013      	movs	r3, r2
 8006364:	0018      	movs	r0, r3
 8006366:	f7fc fec3 	bl	80030f0 <__aeabi_i2d>
 800636a:	2200      	movs	r2, #0
 800636c:	4b4a      	ldr	r3, [pc, #296]	; (8006498 <SpiritRadioSearchFreqDevME+0x174>)
 800636e:	f7fc f845 	bl	80023fc <__aeabi_dmul>
 8006372:	0002      	movs	r2, r0
 8006374:	000b      	movs	r3, r1
 8006376:	0010      	movs	r0, r2
 8006378:	0019      	movs	r1, r3
 800637a:	f7fa f8e9 	bl	8000550 <__aeabi_d2uiz>
 800637e:	0003      	movs	r3, r0
 8006380:	0018      	movs	r0, r3
 8006382:	f7fb f899 	bl	80014b8 <__aeabi_ui2f>
 8006386:	1c03      	adds	r3, r0, #0
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	1c18      	adds	r0, r3, #0
 800638c:	f7fa fd34 	bl	8000df8 <__aeabi_fmul>
 8006390:	1c03      	adds	r3, r0, #0
 8006392:	1c18      	adds	r0, r3, #0
 8006394:	f7fa f8c4 	bl	8000520 <__aeabi_f2uiz>
 8006398:	0003      	movs	r3, r0
 800639a:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d30a      	bcc.n	80063ba <SpiritRadioSearchFreqDevME+0x96>
  for(i=0;i<10;i++)
 80063a4:	193b      	adds	r3, r7, r4
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	193b      	adds	r3, r7, r4
 80063aa:	3201      	adds	r2, #1
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	2327      	movs	r3, #39	; 0x27
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b09      	cmp	r3, #9
 80063b6:	d9cf      	bls.n	8006358 <SpiritRadioSearchFreqDevME+0x34>
 80063b8:	e000      	b.n	80063bc <SpiritRadioSearchFreqDevME+0x98>
      break;
 80063ba:	46c0      	nop			; (mov r8, r8)
  }
  (*pcE) = i;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2127      	movs	r1, #39	; 0x27
 80063c0:	187a      	adds	r2, r7, r1
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80063c6:	187b      	adds	r3, r7, r1
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	e044      	b.n	8006458 <SpiritRadioSearchFreqDevME+0x134>
  {
    bp=b;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80063d2:	2627      	movs	r6, #39	; 0x27
 80063d4:	19bb      	adds	r3, r7, r6
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	0018      	movs	r0, r3
 80063da:	f7fc fe89 	bl	80030f0 <__aeabi_i2d>
 80063de:	2200      	movs	r2, #0
 80063e0:	4b2e      	ldr	r3, [pc, #184]	; (800649c <SpiritRadioSearchFreqDevME+0x178>)
 80063e2:	f7fb f8b1 	bl	8001548 <__aeabi_dadd>
 80063e6:	0002      	movs	r2, r0
 80063e8:	000b      	movs	r3, r1
 80063ea:	0010      	movs	r0, r2
 80063ec:	0019      	movs	r1, r3
 80063ee:	2200      	movs	r2, #0
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	05db      	lsls	r3, r3, #23
 80063f4:	f7fb fc08 	bl	8001c08 <__aeabi_ddiv>
 80063f8:	0002      	movs	r2, r0
 80063fa:	000b      	movs	r3, r1
 80063fc:	0014      	movs	r4, r2
 80063fe:	001d      	movs	r5, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	001a      	movs	r2, r3
 8006406:	2301      	movs	r3, #1
 8006408:	4093      	lsls	r3, r2
 800640a:	0018      	movs	r0, r3
 800640c:	f7fc fe70 	bl	80030f0 <__aeabi_i2d>
 8006410:	0002      	movs	r2, r0
 8006412:	000b      	movs	r3, r1
 8006414:	0020      	movs	r0, r4
 8006416:	0029      	movs	r1, r5
 8006418:	f7fb fff0 	bl	80023fc <__aeabi_dmul>
 800641c:	0002      	movs	r2, r0
 800641e:	000b      	movs	r3, r1
 8006420:	0010      	movs	r0, r2
 8006422:	0019      	movs	r1, r3
 8006424:	f7fa f894 	bl	8000550 <__aeabi_d2uiz>
 8006428:	0003      	movs	r3, r0
 800642a:	0018      	movs	r0, r3
 800642c:	f7fb f844 	bl	80014b8 <__aeabi_ui2f>
 8006430:	1c03      	adds	r3, r0, #0
 8006432:	69b9      	ldr	r1, [r7, #24]
 8006434:	1c18      	adds	r0, r3, #0
 8006436:	f7fa fcdf 	bl	8000df8 <__aeabi_fmul>
 800643a:	1c03      	adds	r3, r0, #0
 800643c:	1c18      	adds	r0, r3, #0
 800643e:	f7fa f86f 	bl	8000520 <__aeabi_f2uiz>
 8006442:	0003      	movs	r3, r0
 8006444:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	429a      	cmp	r2, r3
 800644c:	d30a      	bcc.n	8006464 <SpiritRadioSearchFreqDevME+0x140>
  for(i=0;i<8;i++)
 800644e:	19bb      	adds	r3, r7, r6
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	19bb      	adds	r3, r7, r6
 8006454:	3201      	adds	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	2327      	movs	r3, #39	; 0x27
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b07      	cmp	r3, #7
 8006460:	d9b5      	bls.n	80063ce <SpiritRadioSearchFreqDevME+0xaa>
 8006462:	e000      	b.n	8006466 <SpiritRadioSearchFreqDevME+0x142>
      break;
 8006464:	46c0      	nop			; (mov r8, r8)
  }
  
  (*pcM)=i;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2227      	movs	r2, #39	; 0x27
 800646a:	18ba      	adds	r2, r7, r2
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	1ad2      	subs	r2, r2, r3
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	1acb      	subs	r3, r1, r3
 800647c:	429a      	cmp	r2, r3
 800647e:	d205      	bcs.n	800648c <SpiritRadioSearchFreqDevME+0x168>
    (*pcM)--;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	3b01      	subs	r3, #1
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	701a      	strb	r2, [r3, #0]
  
}
 800648c:	46c0      	nop			; (mov r8, r8)
 800648e:	46bd      	mov	sp, r7
 8006490:	b00b      	add	sp, #44	; 0x2c
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006494:	200002fc 	.word	0x200002fc
 8006498:	401e0000 	.word	0x401e0000
 800649c:	40200000 	.word	0x40200000

080064a0 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 80064a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint8_t i=0;
 80064aa:	210f      	movs	r1, #15
 80064ac:	187b      	adds	r3, r7, r1
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
  uint8_t j=0;
 80064b2:	230e      	movs	r3, #14
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a7e      	ldr	r2, [pc, #504]	; (80066b8 <SpiritRadioGetdBm2Reg+0x218>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d90e      	bls.n	80064e0 <SpiritRadioGetdBm2Reg+0x40>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a7d      	ldr	r2, [pc, #500]	; (80066bc <SpiritRadioGetdBm2Reg+0x21c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d80a      	bhi.n	80064e0 <SpiritRadioGetdBm2Reg+0x40>
  {
    i=0;
 80064ca:	187b      	adds	r3, r7, r1
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
    if(lFBase<900000000) i=1;// 868   
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a7b      	ldr	r2, [pc, #492]	; (80066c0 <SpiritRadioGetdBm2Reg+0x220>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d829      	bhi.n	800652c <SpiritRadioGetdBm2Reg+0x8c>
 80064d8:	187b      	adds	r3, r7, r1
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	e025      	b.n	800652c <SpiritRadioGetdBm2Reg+0x8c>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a78      	ldr	r2, [pc, #480]	; (80066c4 <SpiritRadioGetdBm2Reg+0x224>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d908      	bls.n	80064fa <SpiritRadioGetdBm2Reg+0x5a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a77      	ldr	r2, [pc, #476]	; (80066c8 <SpiritRadioGetdBm2Reg+0x228>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d804      	bhi.n	80064fa <SpiritRadioGetdBm2Reg+0x5a>
  {
    i=2;
 80064f0:	230f      	movs	r3, #15
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	2202      	movs	r2, #2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e018      	b.n	800652c <SpiritRadioGetdBm2Reg+0x8c>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a73      	ldr	r2, [pc, #460]	; (80066cc <SpiritRadioGetdBm2Reg+0x22c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d908      	bls.n	8006514 <SpiritRadioGetdBm2Reg+0x74>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a72      	ldr	r2, [pc, #456]	; (80066d0 <SpiritRadioGetdBm2Reg+0x230>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d804      	bhi.n	8006514 <SpiritRadioGetdBm2Reg+0x74>
  {
    i=3;
 800650a:	230f      	movs	r3, #15
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	2203      	movs	r2, #3
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	e00b      	b.n	800652c <SpiritRadioGetdBm2Reg+0x8c>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a6f      	ldr	r2, [pc, #444]	; (80066d4 <SpiritRadioGetdBm2Reg+0x234>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d907      	bls.n	800652c <SpiritRadioGetdBm2Reg+0x8c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a6e      	ldr	r2, [pc, #440]	; (80066d8 <SpiritRadioGetdBm2Reg+0x238>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d803      	bhi.n	800652c <SpiritRadioGetdBm2Reg+0x8c>
  {
    i=4;
 8006524:	230f      	movs	r3, #15
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	2204      	movs	r2, #4
 800652a:	701a      	strb	r2, [r3, #0]
  }
  
  j=1;
 800652c:	260e      	movs	r6, #14
 800652e:	19bb      	adds	r3, r7, r6
 8006530:	2201      	movs	r2, #1
 8006532:	701a      	strb	r2, [r3, #0]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8006534:	2100      	movs	r1, #0
 8006536:	6838      	ldr	r0, [r7, #0]
 8006538:	f7f9 ffbe 	bl	80004b8 <__aeabi_fcmpgt>
 800653c:	1e03      	subs	r3, r0, #0
 800653e:	d037      	beq.n	80065b0 <SpiritRadioGetdBm2Reg+0x110>
 8006540:	250f      	movs	r5, #15
 8006542:	197b      	adds	r3, r7, r5
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	4965      	ldr	r1, [pc, #404]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 8006548:	0013      	movs	r3, r2
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	189b      	adds	r3, r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	18cb      	adds	r3, r1, r3
 8006552:	3308      	adds	r3, #8
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	1c19      	adds	r1, r3, #0
 8006558:	4861      	ldr	r0, [pc, #388]	; (80066e0 <SpiritRadioGetdBm2Reg+0x240>)
 800655a:	f7fa fa83 	bl	8000a64 <__aeabi_fdiv>
 800655e:	1c03      	adds	r3, r0, #0
 8006560:	1c1c      	adds	r4, r3, #0
 8006562:	197b      	adds	r3, r7, r5
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	495d      	ldr	r1, [pc, #372]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 8006568:	0013      	movs	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	189b      	adds	r3, r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	18cb      	adds	r3, r1, r3
 8006572:	330c      	adds	r3, #12
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	197b      	adds	r3, r7, r5
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	4958      	ldr	r1, [pc, #352]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 800657c:	0013      	movs	r3, r2
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	189b      	adds	r3, r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	18cb      	adds	r3, r1, r3
 8006586:	3308      	adds	r3, #8
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1c19      	adds	r1, r3, #0
 800658c:	f7fa fa6a 	bl	8000a64 <__aeabi_fdiv>
 8006590:	1c03      	adds	r3, r0, #0
 8006592:	1c19      	adds	r1, r3, #0
 8006594:	1c20      	adds	r0, r4, #0
 8006596:	f7fa fd7d 	bl	8001094 <__aeabi_fsub>
 800659a:	1c03      	adds	r3, r0, #0
 800659c:	1c19      	adds	r1, r3, #0
 800659e:	6838      	ldr	r0, [r7, #0]
 80065a0:	f7f9 ff8a 	bl	80004b8 <__aeabi_fcmpgt>
 80065a4:	1e03      	subs	r3, r0, #0
 80065a6:	d003      	beq.n	80065b0 <SpiritRadioGetdBm2Reg+0x110>
      j=0;
 80065a8:	19bb      	adds	r3, r7, r6
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e03d      	b.n	800662c <SpiritRadioGetdBm2Reg+0x18c>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 80065b0:	2100      	movs	r1, #0
 80065b2:	6838      	ldr	r0, [r7, #0]
 80065b4:	f7f9 ff76 	bl	80004a4 <__aeabi_fcmple>
 80065b8:	1e03      	subs	r3, r0, #0
 80065ba:	d037      	beq.n	800662c <SpiritRadioGetdBm2Reg+0x18c>
 80065bc:	250f      	movs	r5, #15
 80065be:	197b      	adds	r3, r7, r5
 80065c0:	781a      	ldrb	r2, [r3, #0]
 80065c2:	4946      	ldr	r1, [pc, #280]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 80065c4:	0013      	movs	r3, r2
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	189b      	adds	r3, r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	18cb      	adds	r3, r1, r3
 80065ce:	3308      	adds	r3, #8
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	1c19      	adds	r1, r3, #0
 80065d4:	4843      	ldr	r0, [pc, #268]	; (80066e4 <SpiritRadioGetdBm2Reg+0x244>)
 80065d6:	f7fa fa45 	bl	8000a64 <__aeabi_fdiv>
 80065da:	1c03      	adds	r3, r0, #0
 80065dc:	1c1c      	adds	r4, r3, #0
 80065de:	197b      	adds	r3, r7, r5
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	493e      	ldr	r1, [pc, #248]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 80065e4:	0013      	movs	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	189b      	adds	r3, r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	18cb      	adds	r3, r1, r3
 80065ee:	330c      	adds	r3, #12
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	197b      	adds	r3, r7, r5
 80065f4:	781a      	ldrb	r2, [r3, #0]
 80065f6:	4939      	ldr	r1, [pc, #228]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 80065f8:	0013      	movs	r3, r2
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	18cb      	adds	r3, r1, r3
 8006602:	3308      	adds	r3, #8
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	1c19      	adds	r1, r3, #0
 8006608:	f7fa fa2c 	bl	8000a64 <__aeabi_fdiv>
 800660c:	1c03      	adds	r3, r0, #0
 800660e:	1c19      	adds	r1, r3, #0
 8006610:	1c20      	adds	r0, r4, #0
 8006612:	f7fa fd3f 	bl	8001094 <__aeabi_fsub>
 8006616:	1c03      	adds	r3, r0, #0
 8006618:	1c19      	adds	r1, r3, #0
 800661a:	6838      	ldr	r0, [r7, #0]
 800661c:	f7f9 ff38 	bl	8000490 <__aeabi_fcmplt>
 8006620:	1e03      	subs	r3, r0, #0
 8006622:	d003      	beq.n	800662c <SpiritRadioGetdBm2Reg+0x18c>
      j=2;
 8006624:	230e      	movs	r3, #14
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	2202      	movs	r2, #2
 800662a:	701a      	strb	r2, [r3, #0]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 800662c:	250f      	movs	r5, #15
 800662e:	197b      	adds	r3, r7, r5
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	260e      	movs	r6, #14
 8006634:	19bb      	adds	r3, r7, r6
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	0058      	lsls	r0, r3, #1
 800663a:	4928      	ldr	r1, [pc, #160]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 800663c:	0013      	movs	r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	189b      	adds	r3, r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	181b      	adds	r3, r3, r0
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	585b      	ldr	r3, [r3, r1]
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	1c18      	adds	r0, r3, #0
 800664e:	f7fa fbd3 	bl	8000df8 <__aeabi_fmul>
 8006652:	1c03      	adds	r3, r0, #0
 8006654:	1c1c      	adds	r4, r3, #0
 8006656:	197b      	adds	r3, r7, r5
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	19bb      	adds	r3, r7, r6
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	1c58      	adds	r0, r3, #1
 8006662:	491e      	ldr	r1, [pc, #120]	; (80066dc <SpiritRadioGetdBm2Reg+0x23c>)
 8006664:	0013      	movs	r3, r2
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	189b      	adds	r3, r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	181b      	adds	r3, r3, r0
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	585b      	ldr	r3, [r3, r1]
 8006672:	1c19      	adds	r1, r3, #0
 8006674:	1c20      	adds	r0, r4, #0
 8006676:	f7fa f855 	bl	8000724 <__aeabi_fadd>
 800667a:	1c03      	adds	r3, r0, #0
 800667c:	60bb      	str	r3, [r7, #8]
  
  if(fReg<1)
 800667e:	21fe      	movs	r1, #254	; 0xfe
 8006680:	0589      	lsls	r1, r1, #22
 8006682:	68b8      	ldr	r0, [r7, #8]
 8006684:	f7f9 ff04 	bl	8000490 <__aeabi_fcmplt>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d003      	beq.n	8006694 <SpiritRadioGetdBm2Reg+0x1f4>
    fReg=1;
 800668c:	23fe      	movs	r3, #254	; 0xfe
 800668e:	059b      	lsls	r3, r3, #22
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	e007      	b.n	80066a4 <SpiritRadioGetdBm2Reg+0x204>
  else if(fReg>90) 
 8006694:	4914      	ldr	r1, [pc, #80]	; (80066e8 <SpiritRadioGetdBm2Reg+0x248>)
 8006696:	68b8      	ldr	r0, [r7, #8]
 8006698:	f7f9 ff0e 	bl	80004b8 <__aeabi_fcmpgt>
 800669c:	1e03      	subs	r3, r0, #0
 800669e:	d001      	beq.n	80066a4 <SpiritRadioGetdBm2Reg+0x204>
    fReg=90;
 80066a0:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <SpiritRadioGetdBm2Reg+0x248>)
 80066a2:	60bb      	str	r3, [r7, #8]
  
  return ((uint8_t)fReg);
 80066a4:	68b8      	ldr	r0, [r7, #8]
 80066a6:	f7f9 ff3b 	bl	8000520 <__aeabi_f2uiz>
 80066aa:	0003      	movs	r3, r0
 80066ac:	b2db      	uxtb	r3, r3
}
 80066ae:	0018      	movs	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b005      	add	sp, #20
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	2e5f567f 	.word	0x2e5f567f
 80066bc:	390c2fe0 	.word	0x390c2fe0
 80066c0:	35a4e8ff 	.word	0x35a4e8ff
 80066c4:	1701e47f 	.word	0x1701e47f
 80066c8:	1c146a60 	.word	0x1c146a60
 80066cc:	11d260bf 	.word	0x11d260bf
 80066d0:	14ced7e0 	.word	0x14ced7e0
 80066d4:	08e18f3f 	.word	0x08e18f3f
 80066d8:	0a6fd060 	.word	0x0a6fd060
 80066dc:	0800c138 	.word	0x0800c138
 80066e0:	41500000 	.word	0x41500000
 80066e4:	42200000 	.word	0x42200000
 80066e8:	42b40000 	.word	0x42b40000

080066ec <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	0002      	movs	r2, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80066fa:	f7ff fbcd 	bl	8005e98 <SpiritRadioGetFrequencyBase>
 80066fe:	0002      	movs	r2, r0
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	1c19      	adds	r1, r3, #0
 8006704:	0010      	movs	r0, r2
 8006706:	f7ff fecb 	bl	80064a0 <SpiritRadioGetdBm2Reg>
 800670a:	0003      	movs	r3, r0
 800670c:	001a      	movs	r2, r3
 800670e:	200e      	movs	r0, #14
 8006710:	183b      	adds	r3, r7, r0
 8006712:	701a      	strb	r2, [r3, #0]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8006714:	240f      	movs	r4, #15
 8006716:	193b      	adds	r3, r7, r4
 8006718:	1dfa      	adds	r2, r7, #7
 800671a:	7812      	ldrb	r2, [r2, #0]
 800671c:	2117      	movs	r1, #23
 800671e:	1a8a      	subs	r2, r1, r2
 8006720:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8006722:	183a      	adds	r2, r7, r0
 8006724:	193b      	adds	r3, r7, r4
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2101      	movs	r1, #1
 800672a:	0018      	movs	r0, r3
 800672c:	f000 fa1a 	bl	8006b64 <RadioSpiWriteRegisters>
 8006730:	1c03      	adds	r3, r0, #0
 8006732:	1c1a      	adds	r2, r3, #0
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <SpiritRadioSetPALeveldBm+0x60>)
 8006736:	b212      	sxth	r2, r2
 8006738:	1c11      	adds	r1, r2, #0
 800673a:	7019      	strb	r1, [r3, #0]
 800673c:	0412      	lsls	r2, r2, #16
 800673e:	0e12      	lsrs	r2, r2, #24
 8006740:	705a      	strb	r2, [r3, #1]
  
}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	46bd      	mov	sp, r7
 8006746:	b005      	add	sp, #20
 8006748:	bd90      	pop	{r4, r7, pc}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	20000300 	.word	0x20000300

08006750 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	0002      	movs	r2, r0
 8006758:	1dfb      	adds	r3, r7, #7
 800675a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800675c:	240f      	movs	r4, #15
 800675e:	193b      	adds	r3, r7, r4
 8006760:	001a      	movs	r2, r3
 8006762:	2101      	movs	r1, #1
 8006764:	2018      	movs	r0, #24
 8006766:	f000 fa5f 	bl	8006c28 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 800676a:	0021      	movs	r1, r4
 800676c:	187b      	adds	r3, r7, r1
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	223f      	movs	r2, #63	; 0x3f
 8006772:	4013      	ands	r3, r2
 8006774:	b2da      	uxtb	r2, r3
 8006776:	187b      	adds	r3, r7, r1
 8006778:	701a      	strb	r2, [r3, #0]
  tempRegValue |= xCLoad;
 800677a:	187b      	adds	r3, r7, r1
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	1dfb      	adds	r3, r7, #7
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	b2da      	uxtb	r2, r3
 8006786:	187b      	adds	r3, r7, r1
 8006788:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800678a:	187b      	adds	r3, r7, r1
 800678c:	001a      	movs	r2, r3
 800678e:	2101      	movs	r1, #1
 8006790:	2018      	movs	r0, #24
 8006792:	f000 f9e7 	bl	8006b64 <RadioSpiWriteRegisters>
 8006796:	1c03      	adds	r3, r0, #0
 8006798:	1c1a      	adds	r2, r3, #0
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <SpiritRadioSetPACwc+0x60>)
 800679c:	b212      	sxth	r2, r2
 800679e:	1c11      	adds	r1, r2, #0
 80067a0:	7019      	strb	r1, [r3, #0]
 80067a2:	0412      	lsls	r2, r2, #16
 80067a4:	0e12      	lsrs	r2, r2, #24
 80067a6:	705a      	strb	r2, [r3, #1]
  
}
 80067a8:	46c0      	nop			; (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b005      	add	sp, #20
 80067ae:	bd90      	pop	{r4, r7, pc}
 80067b0:	20000300 	.word	0x20000300

080067b4 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	0002      	movs	r2, r0
 80067bc:	1dfb      	adds	r3, r7, #7
 80067be:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80067c0:	240f      	movs	r4, #15
 80067c2:	193b      	adds	r3, r7, r4
 80067c4:	001a      	movs	r2, r3
 80067c6:	2101      	movs	r1, #1
 80067c8:	2018      	movs	r0, #24
 80067ca:	f000 fa2d 	bl	8006c28 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 80067ce:	0021      	movs	r1, r4
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2207      	movs	r2, #7
 80067d6:	4393      	bics	r3, r2
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	187b      	adds	r3, r7, r1
 80067dc:	701a      	strb	r2, [r3, #0]
  tempRegValue |= cIndex;
 80067de:	187b      	adds	r3, r7, r1
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	1dfb      	adds	r3, r7, #7
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	187b      	adds	r3, r7, r1
 80067ec:	701a      	strb	r2, [r3, #0]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80067ee:	187b      	adds	r3, r7, r1
 80067f0:	001a      	movs	r2, r3
 80067f2:	2101      	movs	r1, #1
 80067f4:	2018      	movs	r0, #24
 80067f6:	f000 f9b5 	bl	8006b64 <RadioSpiWriteRegisters>
 80067fa:	1c03      	adds	r3, r0, #0
 80067fc:	1c1a      	adds	r2, r3, #0
 80067fe:	4b05      	ldr	r3, [pc, #20]	; (8006814 <SpiritRadioSetPALevelMaxIndex+0x60>)
 8006800:	b212      	sxth	r2, r2
 8006802:	1c11      	adds	r1, r2, #0
 8006804:	7019      	strb	r1, [r3, #0]
 8006806:	0412      	lsls	r2, r2, #16
 8006808:	0e12      	lsrs	r2, r2, #24
 800680a:	705a      	strb	r2, [r3, #1]
  
}
 800680c:	46c0      	nop			; (mov r8, r8)
 800680e:	46bd      	mov	sp, r7
 8006810:	b005      	add	sp, #20
 8006812:	bd90      	pop	{r4, r7, pc}
 8006814:	20000300 	.word	0x20000300

08006818 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8006818:	b590      	push	{r4, r7, lr}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	0002      	movs	r2, r0
 8006820:	1dfb      	adds	r3, r7, #7
 8006822:	701a      	strb	r2, [r3, #0]
  uint8_t tempRegValue = 0x00;
 8006824:	240f      	movs	r4, #15
 8006826:	193b      	adds	r3, r7, r4
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 800682c:	193b      	adds	r3, r7, r4
 800682e:	001a      	movs	r2, r3
 8006830:	2101      	movs	r1, #1
 8006832:	201e      	movs	r0, #30
 8006834:	f000 f9f8 	bl	8006c28 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8006838:	1dfb      	adds	r3, r7, #7
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d109      	bne.n	8006854 <SpiritRadioAFCFreezeOnSync+0x3c>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8006840:	0021      	movs	r1, r4
 8006842:	187b      	adds	r3, r7, r1
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	4252      	negs	r2, r2
 800684a:	4313      	orrs	r3, r2
 800684c:	b2da      	uxtb	r2, r3
 800684e:	187b      	adds	r3, r7, r1
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e007      	b.n	8006864 <SpiritRadioAFCFreezeOnSync+0x4c>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8006854:	210f      	movs	r1, #15
 8006856:	187b      	adds	r3, r7, r1
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	227f      	movs	r2, #127	; 0x7f
 800685c:	4013      	ands	r3, r2
 800685e:	b2da      	uxtb	r2, r3
 8006860:	187b      	adds	r3, r7, r1
 8006862:	701a      	strb	r2, [r3, #0]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8006864:	230f      	movs	r3, #15
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	001a      	movs	r2, r3
 800686a:	2101      	movs	r1, #1
 800686c:	201e      	movs	r0, #30
 800686e:	f000 f979 	bl	8006b64 <RadioSpiWriteRegisters>
 8006872:	1c03      	adds	r3, r0, #0
 8006874:	1c1a      	adds	r2, r3, #0
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <SpiritRadioAFCFreezeOnSync+0x74>)
 8006878:	b212      	sxth	r2, r2
 800687a:	1c11      	adds	r1, r2, #0
 800687c:	7019      	strb	r1, [r3, #0]
 800687e:	0412      	lsls	r2, r2, #16
 8006880:	0e12      	lsrs	r2, r2, #24
 8006882:	705a      	strb	r2, [r3, #1]
  
}
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	46bd      	mov	sp, r7
 8006888:	b005      	add	sp, #20
 800688a:	bd90      	pop	{r4, r7, pc}
 800688c:	20000300 	.word	0x20000300

08006890 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	0002      	movs	r2, r0
 8006898:	1dfb      	adds	r3, r7, #7
 800689a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800689c:	240f      	movs	r4, #15
 800689e:	193b      	adds	r3, r7, r4
 80068a0:	001a      	movs	r2, r3
 80068a2:	2101      	movs	r1, #1
 80068a4:	209e      	movs	r0, #158	; 0x9e
 80068a6:	f000 f9bf 	bl	8006c28 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80068aa:	1dfb      	adds	r3, r7, #7
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d109      	bne.n	80068c6 <SpiritRadioSetRefDiv+0x36>
  {
    tempRegValue |= 0x80;
 80068b2:	0021      	movs	r1, r4
 80068b4:	187b      	adds	r3, r7, r1
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2280      	movs	r2, #128	; 0x80
 80068ba:	4252      	negs	r2, r2
 80068bc:	4313      	orrs	r3, r2
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	187b      	adds	r3, r7, r1
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e007      	b.n	80068d6 <SpiritRadioSetRefDiv+0x46>
  }
  else
  {
    tempRegValue &= 0x7F;
 80068c6:	210f      	movs	r1, #15
 80068c8:	187b      	adds	r3, r7, r1
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	227f      	movs	r2, #127	; 0x7f
 80068ce:	4013      	ands	r3, r2
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	187b      	adds	r3, r7, r1
 80068d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80068d6:	230f      	movs	r3, #15
 80068d8:	18fb      	adds	r3, r7, r3
 80068da:	001a      	movs	r2, r3
 80068dc:	2101      	movs	r1, #1
 80068de:	209e      	movs	r0, #158	; 0x9e
 80068e0:	f000 f940 	bl	8006b64 <RadioSpiWriteRegisters>
 80068e4:	1c03      	adds	r3, r0, #0
 80068e6:	1c1a      	adds	r2, r3, #0
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <SpiritRadioSetRefDiv+0x70>)
 80068ea:	b212      	sxth	r2, r2
 80068ec:	1c11      	adds	r1, r2, #0
 80068ee:	7019      	strb	r1, [r3, #0]
 80068f0:	0412      	lsls	r2, r2, #16
 80068f2:	0e12      	lsrs	r2, r2, #24
 80068f4:	705a      	strb	r2, [r3, #1]
  
}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b005      	add	sp, #20
 80068fc:	bd90      	pop	{r4, r7, pc}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	20000300 	.word	0x20000300

08006904 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800690a:	1dfb      	adds	r3, r7, #7
 800690c:	001a      	movs	r2, r3
 800690e:	2101      	movs	r1, #1
 8006910:	209e      	movs	r0, #158	; 0x9e
 8006912:	f000 f989 	bl	8006c28 <RadioSpiReadRegisters>
 8006916:	1c03      	adds	r3, r0, #0
 8006918:	1c1a      	adds	r2, r3, #0
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <SpiritRadioGetRefDiv+0x44>)
 800691c:	b212      	sxth	r2, r2
 800691e:	1c11      	adds	r1, r2, #0
 8006920:	7019      	strb	r1, [r3, #0]
 8006922:	0412      	lsls	r2, r2, #16
 8006924:	0e12      	lsrs	r2, r2, #24
 8006926:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8006928:	1dfb      	adds	r3, r7, #7
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	09db      	lsrs	r3, r3, #7
 800692e:	b2db      	uxtb	r3, r3
 8006930:	001a      	movs	r2, r3
 8006932:	2301      	movs	r3, #1
 8006934:	4013      	ands	r3, r2
 8006936:	d001      	beq.n	800693c <SpiritRadioGetRefDiv+0x38>
  {
    return S_ENABLE;
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <SpiritRadioGetRefDiv+0x3a>
  }
  else
  {
    return S_DISABLE;
 800693c:	2300      	movs	r3, #0
  }
  
}
 800693e:	0018      	movs	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	b002      	add	sp, #8
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	20000300 	.word	0x20000300

0800694c <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 800694c:	b590      	push	{r4, r7, lr}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	0002      	movs	r2, r0
 8006954:	1dfb      	adds	r3, r7, #7
 8006956:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8006958:	240f      	movs	r4, #15
 800695a:	193b      	adds	r3, r7, r4
 800695c:	001a      	movs	r2, r3
 800695e:	2101      	movs	r1, #1
 8006960:	20b4      	movs	r0, #180	; 0xb4
 8006962:	f000 f961 	bl	8006c28 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8006966:	1dfb      	adds	r3, r7, #7
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d108      	bne.n	8006980 <SpiritRadioSetDigDiv+0x34>
  {
    tempRegValue &= 0xf7;
 800696e:	0021      	movs	r1, r4
 8006970:	187b      	adds	r3, r7, r1
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2208      	movs	r2, #8
 8006976:	4393      	bics	r3, r2
 8006978:	b2da      	uxtb	r2, r3
 800697a:	187b      	adds	r3, r7, r1
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e007      	b.n	8006990 <SpiritRadioSetDigDiv+0x44>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8006980:	210f      	movs	r1, #15
 8006982:	187b      	adds	r3, r7, r1
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2208      	movs	r2, #8
 8006988:	4313      	orrs	r3, r2
 800698a:	b2da      	uxtb	r2, r3
 800698c:	187b      	adds	r3, r7, r1
 800698e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8006990:	230f      	movs	r3, #15
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	001a      	movs	r2, r3
 8006996:	2101      	movs	r1, #1
 8006998:	20b4      	movs	r0, #180	; 0xb4
 800699a:	f000 f8e3 	bl	8006b64 <RadioSpiWriteRegisters>
 800699e:	1c03      	adds	r3, r0, #0
 80069a0:	1c1a      	adds	r2, r3, #0
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <SpiritRadioSetDigDiv+0x6c>)
 80069a4:	b212      	sxth	r2, r2
 80069a6:	1c11      	adds	r1, r2, #0
 80069a8:	7019      	strb	r1, [r3, #0]
 80069aa:	0412      	lsls	r2, r2, #16
 80069ac:	0e12      	lsrs	r2, r2, #24
 80069ae:	705a      	strb	r2, [r3, #1]
  
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b005      	add	sp, #20
 80069b6:	bd90      	pop	{r4, r7, pc}
 80069b8:	20000300 	.word	0x20000300

080069bc <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80069c2:	1dfb      	adds	r3, r7, #7
 80069c4:	001a      	movs	r2, r3
 80069c6:	2101      	movs	r1, #1
 80069c8:	20b4      	movs	r0, #180	; 0xb4
 80069ca:	f000 f92d 	bl	8006c28 <RadioSpiReadRegisters>
 80069ce:	1c03      	adds	r3, r0, #0
 80069d0:	1c1a      	adds	r2, r3, #0
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <SpiritRadioGetDigDiv+0x44>)
 80069d4:	b212      	sxth	r2, r2
 80069d6:	1c11      	adds	r1, r2, #0
 80069d8:	7019      	strb	r1, [r3, #0]
 80069da:	0412      	lsls	r2, r2, #16
 80069dc:	0e12      	lsrs	r2, r2, #24
 80069de:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 80069e0:	1dfb      	adds	r3, r7, #7
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	08db      	lsrs	r3, r3, #3
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	001a      	movs	r2, r3
 80069ea:	2301      	movs	r3, #1
 80069ec:	4013      	ands	r3, r2
 80069ee:	d001      	beq.n	80069f4 <SpiritRadioGetDigDiv+0x38>
  {
    return S_DISABLE;
 80069f0:	2300      	movs	r3, #0
 80069f2:	e000      	b.n	80069f6 <SpiritRadioGetDigDiv+0x3a>
  }
  else
  {
    return S_ENABLE;
 80069f4:	2301      	movs	r3, #1
  }
  
}
 80069f6:	0018      	movs	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b002      	add	sp, #8
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	20000300 	.word	0x20000300

08006a04 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8006a08:	4b02      	ldr	r3, [pc, #8]	; (8006a14 <SpiritRadioGetXtalFrequency+0x10>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
}
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	200002fc 	.word	0x200002fc

08006a18 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8006a20:	4b03      	ldr	r3, [pc, #12]	; (8006a30 <SpiritRadioSetXtalFrequency+0x18>)
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b002      	add	sp, #8
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	200002fc 	.word	0x200002fc

08006a34 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	1dfb      	adds	r3, r7, #7
 8006a3e:	701a      	strb	r2, [r3, #0]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8006a40:	1dfb      	adds	r3, r7, #7
 8006a42:	001a      	movs	r2, r3
 8006a44:	2101      	movs	r1, #1
 8006a46:	2054      	movs	r0, #84	; 0x54
 8006a48:	f000 f88c 	bl	8006b64 <RadioSpiWriteRegisters>
 8006a4c:	1c03      	adds	r3, r0, #0
 8006a4e:	1c1a      	adds	r2, r3, #0
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <SpiritTimerSetRxTimeoutCounter+0x34>)
 8006a52:	b212      	sxth	r2, r2
 8006a54:	1c11      	adds	r1, r2, #0
 8006a56:	7019      	strb	r1, [r3, #0]
 8006a58:	0412      	lsls	r2, r2, #16
 8006a5a:	0e12      	lsrs	r2, r2, #24
 8006a5c:	705a      	strb	r2, [r3, #1]

}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b002      	add	sp, #8
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	20000300 	.word	0x20000300

08006a6c <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	0002      	movs	r2, r0
 8006a74:	1dfb      	adds	r3, r7, #7
 8006a76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8006a78:	240c      	movs	r4, #12
 8006a7a:	193b      	adds	r3, r7, r4
 8006a7c:	001a      	movs	r2, r3
 8006a7e:	2102      	movs	r1, #2
 8006a80:	204f      	movs	r0, #79	; 0x4f
 8006a82:	f000 f8d1 	bl	8006c28 <RadioSpiReadRegisters>
 8006a86:	1c03      	adds	r3, r0, #0
 8006a88:	1c1a      	adds	r2, r3, #0
 8006a8a:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <SpiritTimerSetRxTimeoutStopCondition+0xa8>)
 8006a8c:	b212      	sxth	r2, r2
 8006a8e:	1c11      	adds	r1, r2, #0
 8006a90:	7019      	strb	r1, [r3, #0]
 8006a92:	0412      	lsls	r2, r2, #16
 8006a94:	0e12      	lsrs	r2, r2, #24
 8006a96:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8006a98:	193b      	adds	r3, r7, r4
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2240      	movs	r2, #64	; 0x40
 8006a9e:	4393      	bics	r3, r2
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	193b      	adds	r3, r7, r4
 8006aa4:	701a      	strb	r2, [r3, #0]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8006aa6:	0020      	movs	r0, r4
 8006aa8:	193b      	adds	r3, r7, r4
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b25a      	sxtb	r2, r3
 8006aae:	1dfb      	adds	r3, r7, #7
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	2140      	movs	r1, #64	; 0x40
 8006ab8:	400b      	ands	r3, r1
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	4313      	orrs	r3, r2
 8006abe:	b25b      	sxtb	r3, r3
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	0001      	movs	r1, r0
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	701a      	strb	r2, [r3, #0]

  tempRegValue[1] &= 0x1F;
 8006ac8:	187b      	adds	r3, r7, r1
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	221f      	movs	r2, #31
 8006ace:	4013      	ands	r3, r2
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	705a      	strb	r2, [r3, #1]
  tempRegValue[1] |= (xStopCondition << 5);
 8006ad6:	187b      	adds	r3, r7, r1
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	b25a      	sxtb	r2, r3
 8006adc:	1dfb      	adds	r3, r7, #7
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	015b      	lsls	r3, r3, #5
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	187b      	adds	r3, r7, r1
 8006aec:	705a      	strb	r2, [r3, #1]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8006aee:	187b      	adds	r3, r7, r1
 8006af0:	001a      	movs	r2, r3
 8006af2:	2102      	movs	r1, #2
 8006af4:	204f      	movs	r0, #79	; 0x4f
 8006af6:	f000 f835 	bl	8006b64 <RadioSpiWriteRegisters>
 8006afa:	1c03      	adds	r3, r0, #0
 8006afc:	1c1a      	adds	r2, r3, #0
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <SpiritTimerSetRxTimeoutStopCondition+0xa8>)
 8006b00:	b212      	sxth	r2, r2
 8006b02:	1c11      	adds	r1, r2, #0
 8006b04:	7019      	strb	r1, [r3, #0]
 8006b06:	0412      	lsls	r2, r2, #16
 8006b08:	0e12      	lsrs	r2, r2, #24
 8006b0a:	705a      	strb	r2, [r3, #1]

}
 8006b0c:	46c0      	nop			; (mov r8, r8)
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b005      	add	sp, #20
 8006b12:	bd90      	pop	{r4, r7, pc}
 8006b14:	20000300 	.word	0x20000300

08006b18 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	001a      	movs	r2, r3
 8006b22:	2102      	movs	r1, #2
 8006b24:	20c0      	movs	r0, #192	; 0xc0
 8006b26:	f000 f87f 	bl	8006c28 <RadioSpiReadRegisters>
 8006b2a:	1c03      	adds	r3, r0, #0
 8006b2c:	1c1a      	adds	r2, r3, #0
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <SpiritRefreshStatus+0x44>)
 8006b30:	801a      	strh	r2, [r3, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <SpiritRefreshStatus+0x44>)
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d1ef      	bne.n	8006b1e <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8006b3e:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <SpiritRefreshStatus+0x48>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	001a      	movs	r2, r3
 8006b44:	230f      	movs	r3, #15
 8006b46:	4013      	ands	r3, r2
 8006b48:	1d3a      	adds	r2, r7, #4
 8006b4a:	7812      	ldrb	r2, [r2, #0]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d1e6      	bne.n	8006b1e <SpiritRefreshStatus+0x6>

}
 8006b50:	46c0      	nop			; (mov r8, r8)
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b002      	add	sp, #8
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	20000300 	.word	0x20000300
 8006b60:	20000301 	.word	0x20000301

08006b64 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8006b64:	b5b0      	push	{r4, r5, r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	603a      	str	r2, [r7, #0]
 8006b6c:	1dfb      	adds	r3, r7, #7
 8006b6e:	1c02      	adds	r2, r0, #0
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	1dbb      	adds	r3, r7, #6
 8006b74:	1c0a      	adds	r2, r1, #0
 8006b76:	701a      	strb	r2, [r3, #0]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8006b78:	2410      	movs	r4, #16
 8006b7a:	193b      	adds	r3, r7, r4
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	193b      	adds	r3, r7, r4
 8006b82:	1dfa      	adds	r2, r7, #7
 8006b84:	7812      	ldrb	r2, [r2, #0]
 8006b86:	705a      	strb	r2, [r3, #1]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8006b88:	2006      	movs	r0, #6
 8006b8a:	f000 fb30 	bl	80071ee <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8006b8e:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <RadioSpiWriteRegisters+0xb8>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	2140      	movs	r1, #64	; 0x40
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 fefd 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8006b9a:	4b21      	ldr	r3, [pc, #132]	; (8006c20 <RadioSpiWriteRegisters+0xbc>)
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	250c      	movs	r5, #12
 8006ba0:	197a      	adds	r2, r7, r5
 8006ba2:	1939      	adds	r1, r7, r4
 8006ba4:	23fa      	movs	r3, #250	; 0xfa
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	2302      	movs	r3, #2
 8006bac:	f002 ff50 	bl	8009a50 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8006bb0:	4b1b      	ldr	r3, [pc, #108]	; (8006c20 <RadioSpiWriteRegisters+0xbc>)
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	1dbb      	adds	r3, r7, #6
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	23fa      	movs	r3, #250	; 0xfa
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	f002 fca2 	bl	8009508 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8006bc4:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <RadioSpiWriteRegisters+0xb8>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	2140      	movs	r1, #64	; 0x40
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f000 fee2 	bl	8007994 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8006bd0:	2006      	movs	r0, #6
 8006bd2:	f000 fafc 	bl	80071ce <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8006bd6:	2108      	movs	r1, #8
 8006bd8:	187b      	adds	r3, r7, r1
 8006bda:	3301      	adds	r3, #1
 8006bdc:	197a      	adds	r2, r7, r5
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8006be2:	187b      	adds	r3, r7, r1
 8006be4:	197a      	adds	r2, r7, r5
 8006be6:	7852      	ldrb	r2, [r2, #1]
 8006be8:	701a      	strb	r2, [r3, #0]

  return status;
 8006bea:	2014      	movs	r0, #20
 8006bec:	183b      	adds	r3, r7, r0
 8006bee:	187a      	adds	r2, r7, r1
 8006bf0:	8812      	ldrh	r2, [r2, #0]
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	183a      	adds	r2, r7, r0
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	7811      	ldrb	r1, [r2, #0]
 8006bfa:	20ff      	movs	r0, #255	; 0xff
 8006bfc:	4001      	ands	r1, r0
 8006bfe:	20ff      	movs	r0, #255	; 0xff
 8006c00:	4383      	bics	r3, r0
 8006c02:	430b      	orrs	r3, r1
 8006c04:	7852      	ldrb	r2, [r2, #1]
 8006c06:	21ff      	movs	r1, #255	; 0xff
 8006c08:	400a      	ands	r2, r1
 8006c0a:	0212      	lsls	r2, r2, #8
 8006c0c:	4905      	ldr	r1, [pc, #20]	; (8006c24 <RadioSpiWriteRegisters+0xc0>)
 8006c0e:	400b      	ands	r3, r1
 8006c10:	4313      	orrs	r3, r2

}
 8006c12:	1c18      	adds	r0, r3, #0
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b006      	add	sp, #24
 8006c18:	bdb0      	pop	{r4, r5, r7, pc}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	50000400 	.word	0x50000400
 8006c20:	20000008 	.word	0x20000008
 8006c24:	ffff00ff 	.word	0xffff00ff

08006c28 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8006c28:	b5b0      	push	{r4, r5, r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	603a      	str	r2, [r7, #0]
 8006c30:	1dfb      	adds	r3, r7, #7
 8006c32:	1c02      	adds	r2, r0, #0
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	1dbb      	adds	r3, r7, #6
 8006c38:	1c0a      	adds	r2, r1, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8006c3c:	2410      	movs	r4, #16
 8006c3e:	193b      	adds	r3, r7, r4
 8006c40:	2201      	movs	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	193b      	adds	r3, r7, r4
 8006c46:	1dfa      	adds	r2, r7, #7
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	705a      	strb	r2, [r3, #1]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8006c4c:	2006      	movs	r0, #6
 8006c4e:	f000 face 	bl	80071ee <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8006c52:	4b23      	ldr	r3, [pc, #140]	; (8006ce0 <RadioSpiReadRegisters+0xb8>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	2140      	movs	r1, #64	; 0x40
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f000 fe9b 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <RadioSpiReadRegisters+0xbc>)
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	250c      	movs	r5, #12
 8006c64:	197a      	adds	r2, r7, r5
 8006c66:	1939      	adds	r1, r7, r4
 8006c68:	23fa      	movs	r3, #250	; 0xfa
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	2302      	movs	r3, #2
 8006c70:	f002 feee 	bl	8009a50 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8006c74:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <RadioSpiReadRegisters+0xbc>)
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	1dbb      	adds	r3, r7, #6
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	23fa      	movs	r3, #250	; 0xfa
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	f002 fd98 	bl	80097b8 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8006c88:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <RadioSpiReadRegisters+0xb8>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	2140      	movs	r1, #64	; 0x40
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 fe80 	bl	8007994 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8006c94:	2006      	movs	r0, #6
 8006c96:	f000 fa9a 	bl	80071ce <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8006c9a:	2108      	movs	r1, #8
 8006c9c:	187b      	adds	r3, r7, r1
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	197a      	adds	r2, r7, r5
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8006ca6:	187b      	adds	r3, r7, r1
 8006ca8:	197a      	adds	r2, r7, r5
 8006caa:	7852      	ldrb	r2, [r2, #1]
 8006cac:	701a      	strb	r2, [r3, #0]

  return status;
 8006cae:	2014      	movs	r0, #20
 8006cb0:	183b      	adds	r3, r7, r0
 8006cb2:	187a      	adds	r2, r7, r1
 8006cb4:	8812      	ldrh	r2, [r2, #0]
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	183a      	adds	r2, r7, r0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	7811      	ldrb	r1, [r2, #0]
 8006cbe:	20ff      	movs	r0, #255	; 0xff
 8006cc0:	4001      	ands	r1, r0
 8006cc2:	20ff      	movs	r0, #255	; 0xff
 8006cc4:	4383      	bics	r3, r0
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	7852      	ldrb	r2, [r2, #1]
 8006cca:	21ff      	movs	r1, #255	; 0xff
 8006ccc:	400a      	ands	r2, r1
 8006cce:	0212      	lsls	r2, r2, #8
 8006cd0:	4905      	ldr	r1, [pc, #20]	; (8006ce8 <RadioSpiReadRegisters+0xc0>)
 8006cd2:	400b      	ands	r3, r1
 8006cd4:	4313      	orrs	r3, r2
}
 8006cd6:	1c18      	adds	r0, r3, #0
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b006      	add	sp, #24
 8006cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	50000400 	.word	0x50000400
 8006ce4:	20000008 	.word	0x20000008
 8006ce8:	ffff00ff 	.word	0xffff00ff

08006cec <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8006cec:	b5b0      	push	{r4, r5, r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	0002      	movs	r2, r0
 8006cf4:	1dfb      	adds	r3, r7, #7
 8006cf6:	701a      	strb	r2, [r3, #0]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8006cf8:	2410      	movs	r4, #16
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	2280      	movs	r2, #128	; 0x80
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	193b      	adds	r3, r7, r4
 8006d02:	1dfa      	adds	r2, r7, #7
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	705a      	strb	r2, [r3, #1]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8006d08:	2006      	movs	r0, #6
 8006d0a:	f000 fa70 	bl	80071ee <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <RadioSpiCommandStrobes+0x9c>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	2140      	movs	r1, #64	; 0x40
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 fe3d 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8006d1a:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <RadioSpiCommandStrobes+0xa0>)
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	250c      	movs	r5, #12
 8006d20:	197a      	adds	r2, r7, r5
 8006d22:	1939      	adds	r1, r7, r4
 8006d24:	23fa      	movs	r3, #250	; 0xfa
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	f002 fe90 	bl	8009a50 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8006d30:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <RadioSpiCommandStrobes+0x9c>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	0018      	movs	r0, r3
 8006d38:	f000 fe2c 	bl	8007994 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8006d3c:	2006      	movs	r0, #6
 8006d3e:	f000 fa46 	bl	80071ce <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8006d42:	2108      	movs	r1, #8
 8006d44:	187b      	adds	r3, r7, r1
 8006d46:	3301      	adds	r3, #1
 8006d48:	197a      	adds	r2, r7, r5
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8006d4e:	187b      	adds	r3, r7, r1
 8006d50:	197a      	adds	r2, r7, r5
 8006d52:	7852      	ldrb	r2, [r2, #1]
 8006d54:	701a      	strb	r2, [r3, #0]

  return status;
 8006d56:	2014      	movs	r0, #20
 8006d58:	183b      	adds	r3, r7, r0
 8006d5a:	187a      	adds	r2, r7, r1
 8006d5c:	8812      	ldrh	r2, [r2, #0]
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	183a      	adds	r2, r7, r0
 8006d62:	2300      	movs	r3, #0
 8006d64:	7811      	ldrb	r1, [r2, #0]
 8006d66:	20ff      	movs	r0, #255	; 0xff
 8006d68:	4001      	ands	r1, r0
 8006d6a:	20ff      	movs	r0, #255	; 0xff
 8006d6c:	4383      	bics	r3, r0
 8006d6e:	430b      	orrs	r3, r1
 8006d70:	7852      	ldrb	r2, [r2, #1]
 8006d72:	21ff      	movs	r1, #255	; 0xff
 8006d74:	400a      	ands	r2, r1
 8006d76:	0212      	lsls	r2, r2, #8
 8006d78:	4905      	ldr	r1, [pc, #20]	; (8006d90 <RadioSpiCommandStrobes+0xa4>)
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	4313      	orrs	r3, r2
}
 8006d7e:	1c18      	adds	r0, r3, #0
 8006d80:	46bd      	mov	sp, r7
 8006d82:	b006      	add	sp, #24
 8006d84:	bdb0      	pop	{r4, r5, r7, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	50000400 	.word	0x50000400
 8006d8c:	20000008 	.word	0x20000008
 8006d90:	ffff00ff 	.word	0xffff00ff

08006d94 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8006d94:	b5b0      	push	{r4, r5, r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	6039      	str	r1, [r7, #0]
 8006d9e:	1dfb      	adds	r3, r7, #7
 8006da0:	701a      	strb	r2, [r3, #0]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8006da2:	2510      	movs	r5, #16
 8006da4:	197b      	adds	r3, r7, r5
 8006da6:	4a25      	ldr	r2, [pc, #148]	; (8006e3c <RadioSpiWriteFifo+0xa8>)
 8006da8:	801a      	strh	r2, [r3, #0]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8006daa:	2006      	movs	r0, #6
 8006dac:	f000 fa1f 	bl	80071ee <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8006db0:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <RadioSpiWriteFifo+0xac>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	2140      	movs	r1, #64	; 0x40
 8006db6:	0018      	movs	r0, r3
 8006db8:	f000 fdec 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8006dbc:	4b21      	ldr	r3, [pc, #132]	; (8006e44 <RadioSpiWriteFifo+0xb0>)
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	240c      	movs	r4, #12
 8006dc2:	193a      	adds	r2, r7, r4
 8006dc4:	1979      	adds	r1, r7, r5
 8006dc6:	23fa      	movs	r3, #250	; 0xfa
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f002 fe3f 	bl	8009a50 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8006dd2:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <RadioSpiWriteFifo+0xb0>)
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	1dfb      	adds	r3, r7, #7
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	23fa      	movs	r3, #250	; 0xfa
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	f002 fb91 	bl	8009508 <HAL_SPI_Transmit>
 // HAL_SPI_Transmit_DMA(radioSpi, pcBuffer, cNbBytes);
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8006de6:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <RadioSpiWriteFifo+0xac>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	2140      	movs	r1, #64	; 0x40
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 fdd1 	bl	8007994 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8006df2:	2006      	movs	r0, #6
 8006df4:	f000 f9eb 	bl	80071ce <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8006df8:	2108      	movs	r1, #8
 8006dfa:	187b      	adds	r3, r7, r1
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	193a      	adds	r2, r7, r4
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8006e04:	187b      	adds	r3, r7, r1
 8006e06:	193a      	adds	r2, r7, r4
 8006e08:	7852      	ldrb	r2, [r2, #1]
 8006e0a:	701a      	strb	r2, [r3, #0]

  return status;
 8006e0c:	2014      	movs	r0, #20
 8006e0e:	183b      	adds	r3, r7, r0
 8006e10:	187a      	adds	r2, r7, r1
 8006e12:	8812      	ldrh	r2, [r2, #0]
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	183a      	adds	r2, r7, r0
 8006e18:	2300      	movs	r3, #0
 8006e1a:	7811      	ldrb	r1, [r2, #0]
 8006e1c:	20ff      	movs	r0, #255	; 0xff
 8006e1e:	4001      	ands	r1, r0
 8006e20:	20ff      	movs	r0, #255	; 0xff
 8006e22:	4383      	bics	r3, r0
 8006e24:	430b      	orrs	r3, r1
 8006e26:	7852      	ldrb	r2, [r2, #1]
 8006e28:	21ff      	movs	r1, #255	; 0xff
 8006e2a:	400a      	ands	r2, r1
 8006e2c:	0212      	lsls	r2, r2, #8
 8006e2e:	4906      	ldr	r1, [pc, #24]	; (8006e48 <RadioSpiWriteFifo+0xb4>)
 8006e30:	400b      	ands	r3, r1
 8006e32:	4313      	orrs	r3, r2
}
 8006e34:	1c18      	adds	r0, r3, #0
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b006      	add	sp, #24
 8006e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e3c:	ffffff00 	.word	0xffffff00
 8006e40:	50000400 	.word	0x50000400
 8006e44:	20000008 	.word	0x20000008
 8006e48:	ffff00ff 	.word	0xffff00ff

08006e4c <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	00d9      	lsls	r1, r3, #3
 8006e54:	23a0      	movs	r3, #160	; 0xa0
 8006e56:	05db      	lsls	r3, r3, #23
 8006e58:	2201      	movs	r2, #1
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f000 fd9a 	bl	8007994 <HAL_GPIO_WritePin>
}
 8006e60:	46c0      	nop			; (mov r8, r8)
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8006e6a:	2380      	movs	r3, #128	; 0x80
 8006e6c:	00d9      	lsls	r1, r3, #3
 8006e6e:	23a0      	movs	r3, #160	; 0xa0
 8006e70:	05db      	lsls	r3, r3, #23
 8006e72:	2200      	movs	r2, #0
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 fd8d 	bl	8007994 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f000 f88a 	bl	8006f94 <HAL_Delay>
}
 8006e80:	46c0      	nop			; (mov r8, r8)
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006e8e:	1dfb      	adds	r3, r7, #7
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_Init+0x3c>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <HAL_Init+0x3c>)
 8006e9a:	2180      	movs	r1, #128	; 0x80
 8006e9c:	0049      	lsls	r1, r1, #1
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	f000 f810 	bl	8006ec8 <HAL_InitTick>
 8006ea8:	1e03      	subs	r3, r0, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006eac:	1dfb      	adds	r3, r7, #7
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e001      	b.n	8006eb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006eb4:	f7fd f974 	bl	80041a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006eb8:	1dfb      	adds	r3, r7, #7
 8006eba:	781b      	ldrb	r3, [r3, #0]
}
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40022000 	.word	0x40022000

08006ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006ed0:	230f      	movs	r3, #15
 8006ed2:	18fb      	adds	r3, r7, r3
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <HAL_InitTick+0x88>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d02b      	beq.n	8006f38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006ee0:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <HAL_InitTick+0x8c>)
 8006ee2:	681c      	ldr	r4, [r3, #0]
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <HAL_InitTick+0x88>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	0019      	movs	r1, r3
 8006eea:	23fa      	movs	r3, #250	; 0xfa
 8006eec:	0098      	lsls	r0, r3, #2
 8006eee:	f7f9 f909 	bl	8000104 <__udivsi3>
 8006ef2:	0003      	movs	r3, r0
 8006ef4:	0019      	movs	r1, r3
 8006ef6:	0020      	movs	r0, r4
 8006ef8:	f7f9 f904 	bl	8000104 <__udivsi3>
 8006efc:	0003      	movs	r3, r0
 8006efe:	0018      	movs	r0, r3
 8006f00:	f000 f985 	bl	800720e <HAL_SYSTICK_Config>
 8006f04:	1e03      	subs	r3, r0, #0
 8006f06:	d112      	bne.n	8006f2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d80a      	bhi.n	8006f24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	2301      	movs	r3, #1
 8006f12:	425b      	negs	r3, r3
 8006f14:	2200      	movs	r2, #0
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 f944 	bl	80071a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <HAL_InitTick+0x90>)
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e00d      	b.n	8006f40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006f24:	230f      	movs	r3, #15
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	2201      	movs	r2, #1
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	e008      	b.n	8006f40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006f2e:	230f      	movs	r3, #15
 8006f30:	18fb      	adds	r3, r7, r3
 8006f32:	2201      	movs	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	e003      	b.n	8006f40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006f38:	230f      	movs	r3, #15
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006f40:	230f      	movs	r3, #15
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	781b      	ldrb	r3, [r3, #0]
}
 8006f46:	0018      	movs	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b005      	add	sp, #20
 8006f4c:	bd90      	pop	{r4, r7, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	20000010 	.word	0x20000010
 8006f54:	20000000 	.word	0x20000000
 8006f58:	2000000c 	.word	0x2000000c

08006f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_IncTick+0x1c>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	001a      	movs	r2, r3
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <HAL_IncTick+0x20>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	18d2      	adds	r2, r2, r3
 8006f6c:	4b03      	ldr	r3, [pc, #12]	; (8006f7c <HAL_IncTick+0x20>)
 8006f6e:	601a      	str	r2, [r3, #0]
}
 8006f70:	46c0      	nop			; (mov r8, r8)
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	20000010 	.word	0x20000010
 8006f7c:	20000304 	.word	0x20000304

08006f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  return uwTick;
 8006f84:	4b02      	ldr	r3, [pc, #8]	; (8006f90 <HAL_GetTick+0x10>)
 8006f86:	681b      	ldr	r3, [r3, #0]
}
 8006f88:	0018      	movs	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	20000304 	.word	0x20000304

08006f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f9c:	f7ff fff0 	bl	8006f80 <HAL_GetTick>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3301      	adds	r3, #1
 8006fac:	d005      	beq.n	8006fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <HAL_Delay+0x44>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	189b      	adds	r3, r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	f7ff ffe0 	bl	8006f80 <HAL_GetTick>
 8006fc0:	0002      	movs	r2, r0
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d8f7      	bhi.n	8006fbc <HAL_Delay+0x28>
  {
  }
}
 8006fcc:	46c0      	nop			; (mov r8, r8)
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b004      	add	sp, #16
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	20000010 	.word	0x20000010

08006fdc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a06      	ldr	r2, [pc, #24]	; (8007004 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8006fea:	4013      	ands	r3, r2
 8006fec:	0019      	movs	r1, r3
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	b002      	add	sp, #8
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	40010000 	.word	0x40010000
 8007004:	fffff9ff 	.word	0xfffff9ff

08007008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	0002      	movs	r2, r0
 8007010:	1dfb      	adds	r3, r7, #7
 8007012:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007014:	1dfb      	adds	r3, r7, #7
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b7f      	cmp	r3, #127	; 0x7f
 800701a:	d809      	bhi.n	8007030 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800701c:	1dfb      	adds	r3, r7, #7
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	001a      	movs	r2, r3
 8007022:	231f      	movs	r3, #31
 8007024:	401a      	ands	r2, r3
 8007026:	4b04      	ldr	r3, [pc, #16]	; (8007038 <__NVIC_EnableIRQ+0x30>)
 8007028:	2101      	movs	r1, #1
 800702a:	4091      	lsls	r1, r2
 800702c:	000a      	movs	r2, r1
 800702e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007030:	46c0      	nop			; (mov r8, r8)
 8007032:	46bd      	mov	sp, r7
 8007034:	b002      	add	sp, #8
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000e100 	.word	0xe000e100

0800703c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	0002      	movs	r2, r0
 8007044:	1dfb      	adds	r3, r7, #7
 8007046:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007048:	1dfb      	adds	r3, r7, #7
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b7f      	cmp	r3, #127	; 0x7f
 800704e:	d810      	bhi.n	8007072 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007050:	1dfb      	adds	r3, r7, #7
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	001a      	movs	r2, r3
 8007056:	231f      	movs	r3, #31
 8007058:	4013      	ands	r3, r2
 800705a:	4908      	ldr	r1, [pc, #32]	; (800707c <__NVIC_DisableIRQ+0x40>)
 800705c:	2201      	movs	r2, #1
 800705e:	409a      	lsls	r2, r3
 8007060:	0013      	movs	r3, r2
 8007062:	2280      	movs	r2, #128	; 0x80
 8007064:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007066:	f3bf 8f4f 	dsb	sy
}
 800706a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800706c:	f3bf 8f6f 	isb	sy
}
 8007070:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	46bd      	mov	sp, r7
 8007076:	b002      	add	sp, #8
 8007078:	bd80      	pop	{r7, pc}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	e000e100 	.word	0xe000e100

08007080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	0002      	movs	r2, r0
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	1dfb      	adds	r3, r7, #7
 800708c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800708e:	1dfb      	adds	r3, r7, #7
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b7f      	cmp	r3, #127	; 0x7f
 8007094:	d828      	bhi.n	80070e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007096:	4a2f      	ldr	r2, [pc, #188]	; (8007154 <__NVIC_SetPriority+0xd4>)
 8007098:	1dfb      	adds	r3, r7, #7
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b25b      	sxtb	r3, r3
 800709e:	089b      	lsrs	r3, r3, #2
 80070a0:	33c0      	adds	r3, #192	; 0xc0
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	589b      	ldr	r3, [r3, r2]
 80070a6:	1dfa      	adds	r2, r7, #7
 80070a8:	7812      	ldrb	r2, [r2, #0]
 80070aa:	0011      	movs	r1, r2
 80070ac:	2203      	movs	r2, #3
 80070ae:	400a      	ands	r2, r1
 80070b0:	00d2      	lsls	r2, r2, #3
 80070b2:	21ff      	movs	r1, #255	; 0xff
 80070b4:	4091      	lsls	r1, r2
 80070b6:	000a      	movs	r2, r1
 80070b8:	43d2      	mvns	r2, r2
 80070ba:	401a      	ands	r2, r3
 80070bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	019b      	lsls	r3, r3, #6
 80070c2:	22ff      	movs	r2, #255	; 0xff
 80070c4:	401a      	ands	r2, r3
 80070c6:	1dfb      	adds	r3, r7, #7
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	0018      	movs	r0, r3
 80070cc:	2303      	movs	r3, #3
 80070ce:	4003      	ands	r3, r0
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070d4:	481f      	ldr	r0, [pc, #124]	; (8007154 <__NVIC_SetPriority+0xd4>)
 80070d6:	1dfb      	adds	r3, r7, #7
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b25b      	sxtb	r3, r3
 80070dc:	089b      	lsrs	r3, r3, #2
 80070de:	430a      	orrs	r2, r1
 80070e0:	33c0      	adds	r3, #192	; 0xc0
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80070e6:	e031      	b.n	800714c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070e8:	4a1b      	ldr	r2, [pc, #108]	; (8007158 <__NVIC_SetPriority+0xd8>)
 80070ea:	1dfb      	adds	r3, r7, #7
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	0019      	movs	r1, r3
 80070f0:	230f      	movs	r3, #15
 80070f2:	400b      	ands	r3, r1
 80070f4:	3b08      	subs	r3, #8
 80070f6:	089b      	lsrs	r3, r3, #2
 80070f8:	3306      	adds	r3, #6
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	18d3      	adds	r3, r2, r3
 80070fe:	3304      	adds	r3, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	1dfa      	adds	r2, r7, #7
 8007104:	7812      	ldrb	r2, [r2, #0]
 8007106:	0011      	movs	r1, r2
 8007108:	2203      	movs	r2, #3
 800710a:	400a      	ands	r2, r1
 800710c:	00d2      	lsls	r2, r2, #3
 800710e:	21ff      	movs	r1, #255	; 0xff
 8007110:	4091      	lsls	r1, r2
 8007112:	000a      	movs	r2, r1
 8007114:	43d2      	mvns	r2, r2
 8007116:	401a      	ands	r2, r3
 8007118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	019b      	lsls	r3, r3, #6
 800711e:	22ff      	movs	r2, #255	; 0xff
 8007120:	401a      	ands	r2, r3
 8007122:	1dfb      	adds	r3, r7, #7
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	0018      	movs	r0, r3
 8007128:	2303      	movs	r3, #3
 800712a:	4003      	ands	r3, r0
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007130:	4809      	ldr	r0, [pc, #36]	; (8007158 <__NVIC_SetPriority+0xd8>)
 8007132:	1dfb      	adds	r3, r7, #7
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	001c      	movs	r4, r3
 8007138:	230f      	movs	r3, #15
 800713a:	4023      	ands	r3, r4
 800713c:	3b08      	subs	r3, #8
 800713e:	089b      	lsrs	r3, r3, #2
 8007140:	430a      	orrs	r2, r1
 8007142:	3306      	adds	r3, #6
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	18c3      	adds	r3, r0, r3
 8007148:	3304      	adds	r3, #4
 800714a:	601a      	str	r2, [r3, #0]
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b003      	add	sp, #12
 8007152:	bd90      	pop	{r4, r7, pc}
 8007154:	e000e100 	.word	0xe000e100
 8007158:	e000ed00 	.word	0xe000ed00

0800715c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	1e5a      	subs	r2, r3, #1
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	045b      	lsls	r3, r3, #17
 800716c:	429a      	cmp	r2, r3
 800716e:	d301      	bcc.n	8007174 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007170:	2301      	movs	r3, #1
 8007172:	e010      	b.n	8007196 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007174:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <SysTick_Config+0x44>)
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	3a01      	subs	r2, #1
 800717a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800717c:	2301      	movs	r3, #1
 800717e:	425b      	negs	r3, r3
 8007180:	2103      	movs	r1, #3
 8007182:	0018      	movs	r0, r3
 8007184:	f7ff ff7c 	bl	8007080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <SysTick_Config+0x44>)
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800718e:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <SysTick_Config+0x44>)
 8007190:	2207      	movs	r2, #7
 8007192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007194:	2300      	movs	r3, #0
}
 8007196:	0018      	movs	r0, r3
 8007198:	46bd      	mov	sp, r7
 800719a:	b002      	add	sp, #8
 800719c:	bd80      	pop	{r7, pc}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	e000e010 	.word	0xe000e010

080071a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	210f      	movs	r1, #15
 80071b0:	187b      	adds	r3, r7, r1
 80071b2:	1c02      	adds	r2, r0, #0
 80071b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	187b      	adds	r3, r7, r1
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	b25b      	sxtb	r3, r3
 80071be:	0011      	movs	r1, r2
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7ff ff5d 	bl	8007080 <__NVIC_SetPriority>
}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b004      	add	sp, #16
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	0002      	movs	r2, r0
 80071d6:	1dfb      	adds	r3, r7, #7
 80071d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071da:	1dfb      	adds	r3, r7, #7
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	b25b      	sxtb	r3, r3
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7ff ff11 	bl	8007008 <__NVIC_EnableIRQ>
}
 80071e6:	46c0      	nop			; (mov r8, r8)
 80071e8:	46bd      	mov	sp, r7
 80071ea:	b002      	add	sp, #8
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	0002      	movs	r2, r0
 80071f6:	1dfb      	adds	r3, r7, #7
 80071f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80071fa:	1dfb      	adds	r3, r7, #7
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	b25b      	sxtb	r3, r3
 8007200:	0018      	movs	r0, r3
 8007202:	f7ff ff1b 	bl	800703c <__NVIC_DisableIRQ>
}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	46bd      	mov	sp, r7
 800720a:	b002      	add	sp, #8
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	0018      	movs	r0, r3
 800721a:	f7ff ff9f 	bl	800715c <SysTick_Config>
 800721e:	0003      	movs	r3, r0
}
 8007220:	0018      	movs	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	b002      	add	sp, #8
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e077      	b.n	800732a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a3d      	ldr	r2, [pc, #244]	; (8007334 <HAL_DMA_Init+0x10c>)
 8007240:	4694      	mov	ip, r2
 8007242:	4463      	add	r3, ip
 8007244:	2114      	movs	r1, #20
 8007246:	0018      	movs	r0, r3
 8007248:	f7f8 ff5c 	bl	8000104 <__udivsi3>
 800724c:	0003      	movs	r3, r0
 800724e:	009a      	lsls	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2225      	movs	r2, #37	; 0x25
 8007258:	2102      	movs	r1, #2
 800725a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4934      	ldr	r1, [pc, #208]	; (8007338 <HAL_DMA_Init+0x110>)
 8007268:	400a      	ands	r2, r1
 800726a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	431a      	orrs	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	0018      	movs	r0, r3
 80072a6:	f000 f9c1 	bl	800762c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	2380      	movs	r3, #128	; 0x80
 80072b0:	01db      	lsls	r3, r3, #7
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d102      	bne.n	80072bc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c4:	213f      	movs	r1, #63	; 0x3f
 80072c6:	400a      	ands	r2, r1
 80072c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80072d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d011      	beq.n	8007300 <HAL_DMA_Init+0xd8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d80d      	bhi.n	8007300 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 f9cc 	bl	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	e008      	b.n	8007312 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2225      	movs	r2, #37	; 0x25
 800731c:	2101      	movs	r1, #1
 800731e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2224      	movs	r2, #36	; 0x24
 8007324:	2100      	movs	r1, #0
 8007326:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	0018      	movs	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	b002      	add	sp, #8
 8007330:	bd80      	pop	{r7, pc}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	bffdfff8 	.word	0xbffdfff8
 8007338:	ffff800f 	.word	0xffff800f

0800733c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800734a:	2317      	movs	r3, #23
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2224      	movs	r2, #36	; 0x24
 8007356:	5c9b      	ldrb	r3, [r3, r2]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_DMA_Start_IT+0x24>
 800735c:	2302      	movs	r3, #2
 800735e:	e06f      	b.n	8007440 <HAL_DMA_Start_IT+0x104>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2224      	movs	r2, #36	; 0x24
 8007364:	2101      	movs	r1, #1
 8007366:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2225      	movs	r2, #37	; 0x25
 800736c:	5c9b      	ldrb	r3, [r3, r2]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d157      	bne.n	8007424 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2225      	movs	r2, #37	; 0x25
 8007378:	2102      	movs	r1, #2
 800737a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2101      	movs	r1, #1
 800738e:	438a      	bics	r2, r1
 8007390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f907 	bl	80075ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	210e      	movs	r1, #14
 80073b2:	430a      	orrs	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e00f      	b.n	80073d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2104      	movs	r1, #4
 80073c4:	438a      	bics	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	210a      	movs	r1, #10
 80073d4:	430a      	orrs	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	2380      	movs	r3, #128	; 0x80
 80073e0:	025b      	lsls	r3, r3, #9
 80073e2:	4013      	ands	r3, r2
 80073e4:	d008      	beq.n	80073f8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f0:	2180      	movs	r1, #128	; 0x80
 80073f2:	0049      	lsls	r1, r1, #1
 80073f4:	430a      	orrs	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d008      	beq.n	8007412 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	0049      	lsls	r1, r1, #1
 800740e:	430a      	orrs	r2, r1
 8007410:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2101      	movs	r1, #1
 800741e:	430a      	orrs	r2, r1
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	e00a      	b.n	800743a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2280      	movs	r2, #128	; 0x80
 8007428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2224      	movs	r2, #36	; 0x24
 800742e:	2100      	movs	r1, #0
 8007430:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007432:	2317      	movs	r3, #23
 8007434:	18fb      	adds	r3, r7, r3
 8007436:	2201      	movs	r2, #1
 8007438:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800743a:	2317      	movs	r3, #23
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	781b      	ldrb	r3, [r3, #0]
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b006      	add	sp, #24
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007450:	4b55      	ldr	r3, [pc, #340]	; (80075a8 <HAL_DMA_IRQHandler+0x160>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	221c      	movs	r2, #28
 8007464:	4013      	ands	r3, r2
 8007466:	2204      	movs	r2, #4
 8007468:	409a      	lsls	r2, r3
 800746a:	0013      	movs	r3, r2
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4013      	ands	r3, r2
 8007470:	d027      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x7a>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2204      	movs	r2, #4
 8007476:	4013      	ands	r3, r2
 8007478:	d023      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2220      	movs	r2, #32
 8007482:	4013      	ands	r3, r2
 8007484:	d107      	bne.n	8007496 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2104      	movs	r1, #4
 8007492:	438a      	bics	r2, r1
 8007494:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007496:	4b44      	ldr	r3, [pc, #272]	; (80075a8 <HAL_DMA_IRQHandler+0x160>)
 8007498:	6859      	ldr	r1, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	221c      	movs	r2, #28
 80074a0:	4013      	ands	r3, r2
 80074a2:	2204      	movs	r2, #4
 80074a4:	409a      	lsls	r2, r3
 80074a6:	4b40      	ldr	r3, [pc, #256]	; (80075a8 <HAL_DMA_IRQHandler+0x160>)
 80074a8:	430a      	orrs	r2, r1
 80074aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d100      	bne.n	80074b6 <HAL_DMA_IRQHandler+0x6e>
 80074b4:	e073      	b.n	800759e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	0010      	movs	r0, r2
 80074be:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80074c0:	e06d      	b.n	800759e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	221c      	movs	r2, #28
 80074c8:	4013      	ands	r3, r2
 80074ca:	2202      	movs	r2, #2
 80074cc:	409a      	lsls	r2, r3
 80074ce:	0013      	movs	r3, r2
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4013      	ands	r3, r2
 80074d4:	d02e      	beq.n	8007534 <HAL_DMA_IRQHandler+0xec>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2202      	movs	r2, #2
 80074da:	4013      	ands	r3, r2
 80074dc:	d02a      	beq.n	8007534 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2220      	movs	r2, #32
 80074e6:	4013      	ands	r3, r2
 80074e8:	d10b      	bne.n	8007502 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	210a      	movs	r1, #10
 80074f6:	438a      	bics	r2, r1
 80074f8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2225      	movs	r2, #37	; 0x25
 80074fe:	2101      	movs	r1, #1
 8007500:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007502:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <HAL_DMA_IRQHandler+0x160>)
 8007504:	6859      	ldr	r1, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	221c      	movs	r2, #28
 800750c:	4013      	ands	r3, r2
 800750e:	2202      	movs	r2, #2
 8007510:	409a      	lsls	r2, r3
 8007512:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <HAL_DMA_IRQHandler+0x160>)
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2224      	movs	r2, #36	; 0x24
 800751c:	2100      	movs	r1, #0
 800751e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d03a      	beq.n	800759e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	0010      	movs	r0, r2
 8007530:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007532:	e034      	b.n	800759e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	221c      	movs	r2, #28
 800753a:	4013      	ands	r3, r2
 800753c:	2208      	movs	r2, #8
 800753e:	409a      	lsls	r2, r3
 8007540:	0013      	movs	r3, r2
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4013      	ands	r3, r2
 8007546:	d02b      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x158>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2208      	movs	r2, #8
 800754c:	4013      	ands	r3, r2
 800754e:	d027      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	210e      	movs	r1, #14
 800755c:	438a      	bics	r2, r1
 800755e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007560:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <HAL_DMA_IRQHandler+0x160>)
 8007562:	6859      	ldr	r1, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	221c      	movs	r2, #28
 800756a:	4013      	ands	r3, r2
 800756c:	2201      	movs	r2, #1
 800756e:	409a      	lsls	r2, r3
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <HAL_DMA_IRQHandler+0x160>)
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2225      	movs	r2, #37	; 0x25
 8007580:	2101      	movs	r1, #1
 8007582:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2224      	movs	r2, #36	; 0x24
 8007588:	2100      	movs	r1, #0
 800758a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	0010      	movs	r0, r2
 800759c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	46c0      	nop			; (mov r8, r8)
}
 80075a2:	46bd      	mov	sp, r7
 80075a4:	b004      	add	sp, #16
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40020000 	.word	0x40020000

080075ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80075c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80075d4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <DMA_SetConfig+0x7c>)
 80075d8:	6859      	ldr	r1, [r3, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	221c      	movs	r2, #28
 80075e0:	4013      	ands	r3, r2
 80075e2:	2201      	movs	r2, #1
 80075e4:	409a      	lsls	r2, r3
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <DMA_SetConfig+0x7c>)
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b10      	cmp	r3, #16
 80075fa:	d108      	bne.n	800760e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800760c:	e007      	b.n	800761e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	60da      	str	r2, [r3, #12]
}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	b004      	add	sp, #16
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	40020000 	.word	0x40020000

0800762c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	089b      	lsrs	r3, r3, #2
 800763a:	4a10      	ldr	r2, [pc, #64]	; (800767c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800763c:	4694      	mov	ip, r2
 800763e:	4463      	add	r3, ip
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	001a      	movs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	001a      	movs	r2, r3
 800764e:	23ff      	movs	r3, #255	; 0xff
 8007650:	4013      	ands	r3, r2
 8007652:	3b08      	subs	r3, #8
 8007654:	2114      	movs	r1, #20
 8007656:	0018      	movs	r0, r3
 8007658:	f7f8 fd54 	bl	8000104 <__udivsi3>
 800765c:	0003      	movs	r3, r0
 800765e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a07      	ldr	r2, [pc, #28]	; (8007680 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007664:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	221f      	movs	r2, #31
 800766a:	4013      	ands	r3, r2
 800766c:	2201      	movs	r2, #1
 800766e:	409a      	lsls	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007674:	46c0      	nop			; (mov r8, r8)
 8007676:	46bd      	mov	sp, r7
 8007678:	b004      	add	sp, #16
 800767a:	bd80      	pop	{r7, pc}
 800767c:	10008200 	.word	0x10008200
 8007680:	40020880 	.word	0x40020880

08007684 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	223f      	movs	r2, #63	; 0x3f
 8007692:	4013      	ands	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4a0a      	ldr	r2, [pc, #40]	; (80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800769a:	4694      	mov	ip, r2
 800769c:	4463      	add	r3, ip
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	001a      	movs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a07      	ldr	r2, [pc, #28]	; (80076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	2203      	movs	r2, #3
 80076b2:	4013      	ands	r3, r2
 80076b4:	2201      	movs	r2, #1
 80076b6:	409a      	lsls	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	659a      	str	r2, [r3, #88]	; 0x58
}
 80076bc:	46c0      	nop			; (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	b004      	add	sp, #16
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	1000823f 	.word	0x1000823f
 80076c8:	40020940 	.word	0x40020940

080076cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076da:	e147      	b.n	800796c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2101      	movs	r1, #1
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4091      	lsls	r1, r2
 80076e6:	000a      	movs	r2, r1
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d100      	bne.n	80076f4 <HAL_GPIO_Init+0x28>
 80076f2:	e138      	b.n	8007966 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2203      	movs	r2, #3
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d005      	beq.n	800770c <HAL_GPIO_Init+0x40>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2203      	movs	r2, #3
 8007706:	4013      	ands	r3, r2
 8007708:	2b02      	cmp	r3, #2
 800770a:	d130      	bne.n	800776e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	2203      	movs	r2, #3
 8007718:	409a      	lsls	r2, r3
 800771a:	0013      	movs	r3, r2
 800771c:	43da      	mvns	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4013      	ands	r3, r2
 8007722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	409a      	lsls	r2, r3
 800772e:	0013      	movs	r3, r2
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007742:	2201      	movs	r2, #1
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	409a      	lsls	r2, r3
 8007748:	0013      	movs	r3, r2
 800774a:	43da      	mvns	r2, r3
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	4013      	ands	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	091b      	lsrs	r3, r3, #4
 8007758:	2201      	movs	r2, #1
 800775a:	401a      	ands	r2, r3
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	409a      	lsls	r2, r3
 8007760:	0013      	movs	r3, r2
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2203      	movs	r2, #3
 8007774:	4013      	ands	r3, r2
 8007776:	2b03      	cmp	r3, #3
 8007778:	d017      	beq.n	80077aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	2203      	movs	r2, #3
 8007786:	409a      	lsls	r2, r3
 8007788:	0013      	movs	r3, r2
 800778a:	43da      	mvns	r2, r3
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	4013      	ands	r3, r2
 8007790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	409a      	lsls	r2, r3
 800779c:	0013      	movs	r3, r2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2203      	movs	r2, #3
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d123      	bne.n	80077fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	08da      	lsrs	r2, r3, #3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3208      	adds	r2, #8
 80077be:	0092      	lsls	r2, r2, #2
 80077c0:	58d3      	ldr	r3, [r2, r3]
 80077c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2207      	movs	r2, #7
 80077c8:	4013      	ands	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	220f      	movs	r2, #15
 80077ce:	409a      	lsls	r2, r3
 80077d0:	0013      	movs	r3, r2
 80077d2:	43da      	mvns	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4013      	ands	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	691a      	ldr	r2, [r3, #16]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2107      	movs	r1, #7
 80077e2:	400b      	ands	r3, r1
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	409a      	lsls	r2, r3
 80077e8:	0013      	movs	r3, r2
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	08da      	lsrs	r2, r3, #3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3208      	adds	r2, #8
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	6939      	ldr	r1, [r7, #16]
 80077fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	2203      	movs	r2, #3
 800780a:	409a      	lsls	r2, r3
 800780c:	0013      	movs	r3, r2
 800780e:	43da      	mvns	r2, r3
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	4013      	ands	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2203      	movs	r2, #3
 800781c:	401a      	ands	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	409a      	lsls	r2, r3
 8007824:	0013      	movs	r3, r2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	23c0      	movs	r3, #192	; 0xc0
 8007838:	029b      	lsls	r3, r3, #10
 800783a:	4013      	ands	r3, r2
 800783c:	d100      	bne.n	8007840 <HAL_GPIO_Init+0x174>
 800783e:	e092      	b.n	8007966 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007840:	4a50      	ldr	r2, [pc, #320]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	089b      	lsrs	r3, r3, #2
 8007846:	3318      	adds	r3, #24
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	589b      	ldr	r3, [r3, r2]
 800784c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2203      	movs	r2, #3
 8007852:	4013      	ands	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	220f      	movs	r2, #15
 8007858:	409a      	lsls	r2, r3
 800785a:	0013      	movs	r3, r2
 800785c:	43da      	mvns	r2, r3
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4013      	ands	r3, r2
 8007862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	23a0      	movs	r3, #160	; 0xa0
 8007868:	05db      	lsls	r3, r3, #23
 800786a:	429a      	cmp	r2, r3
 800786c:	d013      	beq.n	8007896 <HAL_GPIO_Init+0x1ca>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a45      	ldr	r2, [pc, #276]	; (8007988 <HAL_GPIO_Init+0x2bc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00d      	beq.n	8007892 <HAL_GPIO_Init+0x1c6>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a44      	ldr	r2, [pc, #272]	; (800798c <HAL_GPIO_Init+0x2c0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d007      	beq.n	800788e <HAL_GPIO_Init+0x1c2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a43      	ldr	r2, [pc, #268]	; (8007990 <HAL_GPIO_Init+0x2c4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d101      	bne.n	800788a <HAL_GPIO_Init+0x1be>
 8007886:	2303      	movs	r3, #3
 8007888:	e006      	b.n	8007898 <HAL_GPIO_Init+0x1cc>
 800788a:	2305      	movs	r3, #5
 800788c:	e004      	b.n	8007898 <HAL_GPIO_Init+0x1cc>
 800788e:	2302      	movs	r3, #2
 8007890:	e002      	b.n	8007898 <HAL_GPIO_Init+0x1cc>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <HAL_GPIO_Init+0x1cc>
 8007896:	2300      	movs	r3, #0
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	2103      	movs	r1, #3
 800789c:	400a      	ands	r2, r1
 800789e:	00d2      	lsls	r2, r2, #3
 80078a0:	4093      	lsls	r3, r2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80078a8:	4936      	ldr	r1, [pc, #216]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	089b      	lsrs	r3, r3, #2
 80078ae:	3318      	adds	r3, #24
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078b6:	4b33      	ldr	r3, [pc, #204]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	43da      	mvns	r2, r3
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4013      	ands	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	2380      	movs	r3, #128	; 0x80
 80078cc:	035b      	lsls	r3, r3, #13
 80078ce:	4013      	ands	r3, r2
 80078d0:	d003      	beq.n	80078da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078da:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80078e0:	4b28      	ldr	r3, [pc, #160]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	43da      	mvns	r2, r3
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	4013      	ands	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	039b      	lsls	r3, r3, #14
 80078f8:	4013      	ands	r3, r2
 80078fa:	d003      	beq.n	8007904 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007904:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800790a:	4a1e      	ldr	r2, [pc, #120]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 800790c:	2384      	movs	r3, #132	; 0x84
 800790e:	58d3      	ldr	r3, [r2, r3]
 8007910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	43da      	mvns	r2, r3
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	4013      	ands	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	029b      	lsls	r3, r3, #10
 8007924:	4013      	ands	r3, r2
 8007926:	d003      	beq.n	8007930 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007930:	4914      	ldr	r1, [pc, #80]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 8007932:	2284      	movs	r2, #132	; 0x84
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007938:	4a12      	ldr	r2, [pc, #72]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 800793a:	2380      	movs	r3, #128	; 0x80
 800793c:	58d3      	ldr	r3, [r2, r3]
 800793e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	43da      	mvns	r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	4013      	ands	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	2380      	movs	r3, #128	; 0x80
 8007950:	025b      	lsls	r3, r3, #9
 8007952:	4013      	ands	r3, r2
 8007954:	d003      	beq.n	800795e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800795e:	4909      	ldr	r1, [pc, #36]	; (8007984 <HAL_GPIO_Init+0x2b8>)
 8007960:	2280      	movs	r2, #128	; 0x80
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	3301      	adds	r3, #1
 800796a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	40da      	lsrs	r2, r3
 8007974:	1e13      	subs	r3, r2, #0
 8007976:	d000      	beq.n	800797a <HAL_GPIO_Init+0x2ae>
 8007978:	e6b0      	b.n	80076dc <HAL_GPIO_Init+0x10>
  }
}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b006      	add	sp, #24
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40021800 	.word	0x40021800
 8007988:	50000400 	.word	0x50000400
 800798c:	50000800 	.word	0x50000800
 8007990:	50000c00 	.word	0x50000c00

08007994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	0008      	movs	r0, r1
 800799e:	0011      	movs	r1, r2
 80079a0:	1cbb      	adds	r3, r7, #2
 80079a2:	1c02      	adds	r2, r0, #0
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	1c7b      	adds	r3, r7, #1
 80079a8:	1c0a      	adds	r2, r1, #0
 80079aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079ac:	1c7b      	adds	r3, r7, #1
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079b4:	1cbb      	adds	r3, r7, #2
 80079b6:	881a      	ldrh	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079bc:	e003      	b.n	80079c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079be:	1cbb      	adds	r3, r7, #2
 80079c0:	881a      	ldrh	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	46bd      	mov	sp, r7
 80079ca:	b002      	add	sp, #8
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	000a      	movs	r2, r1
 80079d8:	1cbb      	adds	r3, r7, #2
 80079da:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80079e2:	1cbb      	adds	r3, r7, #2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4013      	ands	r3, r2
 80079ea:	041a      	lsls	r2, r3, #16
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	43db      	mvns	r3, r3
 80079f0:	1cb9      	adds	r1, r7, #2
 80079f2:	8809      	ldrh	r1, [r1, #0]
 80079f4:	400b      	ands	r3, r1
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	619a      	str	r2, [r3, #24]
}
 80079fc:	46c0      	nop			; (mov r8, r8)
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b004      	add	sp, #16
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	0002      	movs	r2, r0
 8007a0c:	1dbb      	adds	r3, r7, #6
 8007a0e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007a10:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	1dba      	adds	r2, r7, #6
 8007a16:	8812      	ldrh	r2, [r2, #0]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d008      	beq.n	8007a2e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a1e:	1dba      	adds	r2, r7, #6
 8007a20:	8812      	ldrh	r2, [r2, #0]
 8007a22:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007a24:	1dbb      	adds	r3, r7, #6
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f000 f815 	bl	8007a58 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	1dba      	adds	r2, r7, #6
 8007a34:	8812      	ldrh	r2, [r2, #0]
 8007a36:	4013      	ands	r3, r2
 8007a38:	d008      	beq.n	8007a4c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a3c:	1dba      	adds	r2, r7, #6
 8007a3e:	8812      	ldrh	r2, [r2, #0]
 8007a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007a42:	1dbb      	adds	r3, r7, #6
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7fc f826 	bl	8003a98 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40021800 	.word	0x40021800

08007a58 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	0002      	movs	r2, r0
 8007a60:	1dbb      	adds	r3, r7, #6
 8007a62:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007a64:	46c0      	nop			; (mov r8, r8)
 8007a66:	46bd      	mov	sp, r7
 8007a68:	b002      	add	sp, #8
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e082      	b.n	8007b84 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2241      	movs	r2, #65	; 0x41
 8007a82:	5c9b      	ldrb	r3, [r3, r2]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2240      	movs	r2, #64	; 0x40
 8007a8e:	2100      	movs	r1, #0
 8007a90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f7fb fcd7 	bl	8003448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2241      	movs	r2, #65	; 0x41
 8007a9e:	2124      	movs	r1, #36	; 0x24
 8007aa0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2101      	movs	r1, #1
 8007aae:	438a      	bics	r2, r1
 8007ab0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4934      	ldr	r1, [pc, #208]	; (8007b8c <HAL_I2C_Init+0x120>)
 8007abc:	400a      	ands	r2, r1
 8007abe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4931      	ldr	r1, [pc, #196]	; (8007b90 <HAL_I2C_Init+0x124>)
 8007acc:	400a      	ands	r2, r1
 8007ace:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d108      	bne.n	8007aea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2180      	movs	r1, #128	; 0x80
 8007ae2:	0209      	lsls	r1, r1, #8
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]
 8007ae8:	e007      	b.n	8007afa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2184      	movs	r1, #132	; 0x84
 8007af4:	0209      	lsls	r1, r1, #8
 8007af6:	430a      	orrs	r2, r1
 8007af8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d104      	bne.n	8007b0c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2280      	movs	r2, #128	; 0x80
 8007b08:	0112      	lsls	r2, r2, #4
 8007b0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	491f      	ldr	r1, [pc, #124]	; (8007b94 <HAL_I2C_Init+0x128>)
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	491a      	ldr	r1, [pc, #104]	; (8007b90 <HAL_I2C_Init+0x124>)
 8007b28:	400a      	ands	r2, r1
 8007b2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691a      	ldr	r2, [r3, #16]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	431a      	orrs	r2, r3
 8007b36:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69d9      	ldr	r1, [r3, #28]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1a      	ldr	r2, [r3, #32]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2101      	movs	r1, #1
 8007b62:	430a      	orrs	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2241      	movs	r2, #65	; 0x41
 8007b70:	2120      	movs	r1, #32
 8007b72:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2242      	movs	r2, #66	; 0x42
 8007b7e:	2100      	movs	r1, #0
 8007b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	0018      	movs	r0, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b002      	add	sp, #8
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	f0ffffff 	.word	0xf0ffffff
 8007b90:	ffff7fff 	.word	0xffff7fff
 8007b94:	02008000 	.word	0x02008000

08007b98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b98:	b590      	push	{r4, r7, lr}
 8007b9a:	b089      	sub	sp, #36	; 0x24
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	0008      	movs	r0, r1
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	0019      	movs	r1, r3
 8007ba6:	230a      	movs	r3, #10
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	1c02      	adds	r2, r0, #0
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	2308      	movs	r3, #8
 8007bb0:	18fb      	adds	r3, r7, r3
 8007bb2:	1c0a      	adds	r2, r1, #0
 8007bb4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2241      	movs	r2, #65	; 0x41
 8007bba:	5c9b      	ldrb	r3, [r3, r2]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d000      	beq.n	8007bc4 <HAL_I2C_Master_Transmit+0x2c>
 8007bc2:	e0e7      	b.n	8007d94 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2240      	movs	r2, #64	; 0x40
 8007bc8:	5c9b      	ldrb	r3, [r3, r2]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_I2C_Master_Transmit+0x3a>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e0e1      	b.n	8007d96 <HAL_I2C_Master_Transmit+0x1fe>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2240      	movs	r2, #64	; 0x40
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bda:	f7ff f9d1 	bl	8006f80 <HAL_GetTick>
 8007bde:	0003      	movs	r3, r0
 8007be0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007be2:	2380      	movs	r3, #128	; 0x80
 8007be4:	0219      	lsls	r1, r3, #8
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2319      	movs	r3, #25
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f000 fa04 	bl	8007ffc <I2C_WaitOnFlagUntilTimeout>
 8007bf4:	1e03      	subs	r3, r0, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0cc      	b.n	8007d96 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2241      	movs	r2, #65	; 0x41
 8007c00:	2121      	movs	r1, #33	; 0x21
 8007c02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2242      	movs	r2, #66	; 0x42
 8007c08:	2110      	movs	r1, #16
 8007c0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2208      	movs	r2, #8
 8007c1c:	18ba      	adds	r2, r7, r2
 8007c1e:	8812      	ldrh	r2, [r2, #0]
 8007c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2bff      	cmp	r3, #255	; 0xff
 8007c30:	d911      	bls.n	8007c56 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	22ff      	movs	r2, #255	; 0xff
 8007c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	2380      	movs	r3, #128	; 0x80
 8007c40:	045c      	lsls	r4, r3, #17
 8007c42:	230a      	movs	r3, #10
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	8819      	ldrh	r1, [r3, #0]
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	4b55      	ldr	r3, [pc, #340]	; (8007da0 <HAL_I2C_Master_Transmit+0x208>)
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	0023      	movs	r3, r4
 8007c50:	f000 fc08 	bl	8008464 <I2C_TransferConfig>
 8007c54:	e075      	b.n	8007d42 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	049c      	lsls	r4, r3, #18
 8007c6a:	230a      	movs	r3, #10
 8007c6c:	18fb      	adds	r3, r7, r3
 8007c6e:	8819      	ldrh	r1, [r3, #0]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	4b4b      	ldr	r3, [pc, #300]	; (8007da0 <HAL_I2C_Master_Transmit+0x208>)
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	0023      	movs	r3, r4
 8007c78:	f000 fbf4 	bl	8008464 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007c7c:	e061      	b.n	8007d42 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	0018      	movs	r0, r3
 8007c86:	f000 f9f8 	bl	800807a <I2C_WaitOnTXISFlagUntilTimeout>
 8007c8a:	1e03      	subs	r3, r0, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e081      	b.n	8007d96 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d03a      	beq.n	8007d42 <HAL_I2C_Master_Transmit+0x1aa>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d136      	bne.n	8007d42 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	0013      	movs	r3, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2180      	movs	r1, #128	; 0x80
 8007ce2:	f000 f98b 	bl	8007ffc <I2C_WaitOnFlagUntilTimeout>
 8007ce6:	1e03      	subs	r3, r0, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e053      	b.n	8007d96 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2bff      	cmp	r3, #255	; 0xff
 8007cf6:	d911      	bls.n	8007d1c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	22ff      	movs	r2, #255	; 0xff
 8007cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	045c      	lsls	r4, r3, #17
 8007d08:	230a      	movs	r3, #10
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	8819      	ldrh	r1, [r3, #0]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	0023      	movs	r3, r4
 8007d16:	f000 fba5 	bl	8008464 <I2C_TransferConfig>
 8007d1a:	e012      	b.n	8007d42 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	2380      	movs	r3, #128	; 0x80
 8007d2e:	049c      	lsls	r4, r3, #18
 8007d30:	230a      	movs	r3, #10
 8007d32:	18fb      	adds	r3, r7, r3
 8007d34:	8819      	ldrh	r1, [r3, #0]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	0023      	movs	r3, r4
 8007d3e:	f000 fb91 	bl	8008464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d198      	bne.n	8007c7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	0018      	movs	r0, r3
 8007d54:	f000 f9d0 	bl	80080f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d58:	1e03      	subs	r3, r0, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e01a      	b.n	8007d96 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2220      	movs	r2, #32
 8007d66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	490c      	ldr	r1, [pc, #48]	; (8007da4 <HAL_I2C_Master_Transmit+0x20c>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2241      	movs	r2, #65	; 0x41
 8007d7c:	2120      	movs	r1, #32
 8007d7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2242      	movs	r2, #66	; 0x42
 8007d84:	2100      	movs	r1, #0
 8007d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2240      	movs	r2, #64	; 0x40
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e000      	b.n	8007d96 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	0018      	movs	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	b007      	add	sp, #28
 8007d9c:	bd90      	pop	{r4, r7, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	80002000 	.word	0x80002000
 8007da4:	fe00e800 	.word	0xfe00e800

08007da8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007da8:	b590      	push	{r4, r7, lr}
 8007daa:	b089      	sub	sp, #36	; 0x24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	0008      	movs	r0, r1
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	0019      	movs	r1, r3
 8007db6:	230a      	movs	r3, #10
 8007db8:	18fb      	adds	r3, r7, r3
 8007dba:	1c02      	adds	r2, r0, #0
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	2308      	movs	r3, #8
 8007dc0:	18fb      	adds	r3, r7, r3
 8007dc2:	1c0a      	adds	r2, r1, #0
 8007dc4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2241      	movs	r2, #65	; 0x41
 8007dca:	5c9b      	ldrb	r3, [r3, r2]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d000      	beq.n	8007dd4 <HAL_I2C_Master_Receive+0x2c>
 8007dd2:	e0e8      	b.n	8007fa6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2240      	movs	r2, #64	; 0x40
 8007dd8:	5c9b      	ldrb	r3, [r3, r2]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_I2C_Master_Receive+0x3a>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e0e2      	b.n	8007fa8 <HAL_I2C_Master_Receive+0x200>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2240      	movs	r2, #64	; 0x40
 8007de6:	2101      	movs	r1, #1
 8007de8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dea:	f7ff f8c9 	bl	8006f80 <HAL_GetTick>
 8007dee:	0003      	movs	r3, r0
 8007df0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007df2:	2380      	movs	r3, #128	; 0x80
 8007df4:	0219      	lsls	r1, r3, #8
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2319      	movs	r3, #25
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f000 f8fc 	bl	8007ffc <I2C_WaitOnFlagUntilTimeout>
 8007e04:	1e03      	subs	r3, r0, #0
 8007e06:	d001      	beq.n	8007e0c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e0cd      	b.n	8007fa8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2241      	movs	r2, #65	; 0x41
 8007e10:	2122      	movs	r1, #34	; 0x22
 8007e12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2242      	movs	r2, #66	; 0x42
 8007e18:	2110      	movs	r1, #16
 8007e1a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	18ba      	adds	r2, r7, r2
 8007e2e:	8812      	ldrh	r2, [r2, #0]
 8007e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2bff      	cmp	r3, #255	; 0xff
 8007e40:	d911      	bls.n	8007e66 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	2380      	movs	r3, #128	; 0x80
 8007e50:	045c      	lsls	r4, r3, #17
 8007e52:	230a      	movs	r3, #10
 8007e54:	18fb      	adds	r3, r7, r3
 8007e56:	8819      	ldrh	r1, [r3, #0]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	4b55      	ldr	r3, [pc, #340]	; (8007fb0 <HAL_I2C_Master_Receive+0x208>)
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	0023      	movs	r3, r4
 8007e60:	f000 fb00 	bl	8008464 <I2C_TransferConfig>
 8007e64:	e076      	b.n	8007f54 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	2380      	movs	r3, #128	; 0x80
 8007e78:	049c      	lsls	r4, r3, #18
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	18fb      	adds	r3, r7, r3
 8007e7e:	8819      	ldrh	r1, [r3, #0]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <HAL_I2C_Master_Receive+0x208>)
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	0023      	movs	r3, r4
 8007e88:	f000 faec 	bl	8008464 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007e8c:	e062      	b.n	8007f54 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	0018      	movs	r0, r3
 8007e96:	f000 f96b 	bl	8008170 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e9a:	1e03      	subs	r3, r0, #0
 8007e9c:	d001      	beq.n	8007ea2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e082      	b.n	8007fa8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d03a      	beq.n	8007f54 <HAL_I2C_Master_Receive+0x1ac>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d136      	bne.n	8007f54 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	0013      	movs	r3, r2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2180      	movs	r1, #128	; 0x80
 8007ef4:	f000 f882 	bl	8007ffc <I2C_WaitOnFlagUntilTimeout>
 8007ef8:	1e03      	subs	r3, r0, #0
 8007efa:	d001      	beq.n	8007f00 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e053      	b.n	8007fa8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2bff      	cmp	r3, #255	; 0xff
 8007f08:	d911      	bls.n	8007f2e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	22ff      	movs	r2, #255	; 0xff
 8007f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	2380      	movs	r3, #128	; 0x80
 8007f18:	045c      	lsls	r4, r3, #17
 8007f1a:	230a      	movs	r3, #10
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	8819      	ldrh	r1, [r3, #0]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	2300      	movs	r3, #0
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	0023      	movs	r3, r4
 8007f28:	f000 fa9c 	bl	8008464 <I2C_TransferConfig>
 8007f2c:	e012      	b.n	8007f54 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	2380      	movs	r3, #128	; 0x80
 8007f40:	049c      	lsls	r4, r3, #18
 8007f42:	230a      	movs	r3, #10
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	8819      	ldrh	r1, [r3, #0]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	0023      	movs	r3, r4
 8007f50:	f000 fa88 	bl	8008464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d197      	bne.n	8007e8e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	0018      	movs	r0, r3
 8007f66:	f000 f8c7 	bl	80080f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f6a:	1e03      	subs	r3, r0, #0
 8007f6c:	d001      	beq.n	8007f72 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e01a      	b.n	8007fa8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2220      	movs	r2, #32
 8007f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	490b      	ldr	r1, [pc, #44]	; (8007fb4 <HAL_I2C_Master_Receive+0x20c>)
 8007f86:	400a      	ands	r2, r1
 8007f88:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2241      	movs	r2, #65	; 0x41
 8007f8e:	2120      	movs	r1, #32
 8007f90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2242      	movs	r2, #66	; 0x42
 8007f96:	2100      	movs	r1, #0
 8007f98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2240      	movs	r2, #64	; 0x40
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e000      	b.n	8007fa8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8007fa6:	2302      	movs	r3, #2
  }
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b007      	add	sp, #28
 8007fae:	bd90      	pop	{r4, r7, pc}
 8007fb0:	80002400 	.word	0x80002400
 8007fb4:	fe00e800 	.word	0xfe00e800

08007fb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d103      	bne.n	8007fd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4013      	ands	r3, r2
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d007      	beq.n	8007ff4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2101      	movs	r1, #1
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	619a      	str	r2, [r3, #24]
  }
}
 8007ff4:	46c0      	nop			; (mov r8, r8)
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	b002      	add	sp, #8
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	1dfb      	adds	r3, r7, #7
 800800a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800800c:	e021      	b.n	8008052 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	d01e      	beq.n	8008052 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008014:	f7fe ffb4 	bl	8006f80 <HAL_GetTick>
 8008018:	0002      	movs	r2, r0
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d302      	bcc.n	800802a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d113      	bne.n	8008052 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	2220      	movs	r2, #32
 8008030:	431a      	orrs	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2241      	movs	r2, #65	; 0x41
 800803a:	2120      	movs	r1, #32
 800803c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2242      	movs	r2, #66	; 0x42
 8008042:	2100      	movs	r1, #0
 8008044:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2240      	movs	r2, #64	; 0x40
 800804a:	2100      	movs	r1, #0
 800804c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e00f      	b.n	8008072 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	4013      	ands	r3, r2
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	425a      	negs	r2, r3
 8008062:	4153      	adcs	r3, r2
 8008064:	b2db      	uxtb	r3, r3
 8008066:	001a      	movs	r2, r3
 8008068:	1dfb      	adds	r3, r7, #7
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d0ce      	beq.n	800800e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	0018      	movs	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	b004      	add	sp, #16
 8008078:	bd80      	pop	{r7, pc}

0800807a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008086:	e02b      	b.n	80080e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	0018      	movs	r0, r3
 8008090:	f000 f8e8 	bl	8008264 <I2C_IsErrorOccurred>
 8008094:	1e03      	subs	r3, r0, #0
 8008096:	d001      	beq.n	800809c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e029      	b.n	80080f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	3301      	adds	r3, #1
 80080a0:	d01e      	beq.n	80080e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a2:	f7fe ff6d 	bl	8006f80 <HAL_GetTick>
 80080a6:	0002      	movs	r2, r0
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d302      	bcc.n	80080b8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d113      	bne.n	80080e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080bc:	2220      	movs	r2, #32
 80080be:	431a      	orrs	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2241      	movs	r2, #65	; 0x41
 80080c8:	2120      	movs	r1, #32
 80080ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2242      	movs	r2, #66	; 0x42
 80080d0:	2100      	movs	r1, #0
 80080d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2240      	movs	r2, #64	; 0x40
 80080d8:	2100      	movs	r1, #0
 80080da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e007      	b.n	80080f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	2202      	movs	r2, #2
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d1cc      	bne.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	0018      	movs	r0, r3
 80080f2:	46bd      	mov	sp, r7
 80080f4:	b004      	add	sp, #16
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008104:	e028      	b.n	8008158 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	0018      	movs	r0, r3
 800810e:	f000 f8a9 	bl	8008264 <I2C_IsErrorOccurred>
 8008112:	1e03      	subs	r3, r0, #0
 8008114:	d001      	beq.n	800811a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e026      	b.n	8008168 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811a:	f7fe ff31 	bl	8006f80 <HAL_GetTick>
 800811e:	0002      	movs	r2, r0
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	d302      	bcc.n	8008130 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d113      	bne.n	8008158 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008134:	2220      	movs	r2, #32
 8008136:	431a      	orrs	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2241      	movs	r2, #65	; 0x41
 8008140:	2120      	movs	r1, #32
 8008142:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2242      	movs	r2, #66	; 0x42
 8008148:	2100      	movs	r1, #0
 800814a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2240      	movs	r2, #64	; 0x40
 8008150:	2100      	movs	r1, #0
 8008152:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e007      	b.n	8008168 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	2220      	movs	r2, #32
 8008160:	4013      	ands	r3, r2
 8008162:	2b20      	cmp	r3, #32
 8008164:	d1cf      	bne.n	8008106 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	0018      	movs	r0, r3
 800816a:	46bd      	mov	sp, r7
 800816c:	b004      	add	sp, #16
 800816e:	bd80      	pop	{r7, pc}

08008170 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800817c:	e064      	b.n	8008248 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	0018      	movs	r0, r3
 8008186:	f000 f86d 	bl	8008264 <I2C_IsErrorOccurred>
 800818a:	1e03      	subs	r3, r0, #0
 800818c:	d001      	beq.n	8008192 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e062      	b.n	8008258 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2220      	movs	r2, #32
 800819a:	4013      	ands	r3, r2
 800819c:	2b20      	cmp	r3, #32
 800819e:	d138      	bne.n	8008212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	2204      	movs	r2, #4
 80081a8:	4013      	ands	r3, r2
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	d105      	bne.n	80081ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e04e      	b.n	8008258 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2210      	movs	r2, #16
 80081c2:	4013      	ands	r3, r2
 80081c4:	2b10      	cmp	r3, #16
 80081c6:	d107      	bne.n	80081d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2210      	movs	r2, #16
 80081ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2204      	movs	r2, #4
 80081d4:	645a      	str	r2, [r3, #68]	; 0x44
 80081d6:	e002      	b.n	80081de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2220      	movs	r2, #32
 80081e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	491b      	ldr	r1, [pc, #108]	; (8008260 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80081f2:	400a      	ands	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2241      	movs	r2, #65	; 0x41
 80081fa:	2120      	movs	r1, #32
 80081fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2242      	movs	r2, #66	; 0x42
 8008202:	2100      	movs	r1, #0
 8008204:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	2100      	movs	r1, #0
 800820c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e022      	b.n	8008258 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008212:	f7fe feb5 	bl	8006f80 <HAL_GetTick>
 8008216:	0002      	movs	r2, r0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	429a      	cmp	r2, r3
 8008220:	d302      	bcc.n	8008228 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822c:	2220      	movs	r2, #32
 800822e:	431a      	orrs	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2241      	movs	r2, #65	; 0x41
 8008238:	2120      	movs	r1, #32
 800823a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2240      	movs	r2, #64	; 0x40
 8008240:	2100      	movs	r1, #0
 8008242:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e007      	b.n	8008258 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	2204      	movs	r2, #4
 8008250:	4013      	ands	r3, r2
 8008252:	2b04      	cmp	r3, #4
 8008254:	d193      	bne.n	800817e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	0018      	movs	r0, r3
 800825a:	46bd      	mov	sp, r7
 800825c:	b004      	add	sp, #16
 800825e:	bd80      	pop	{r7, pc}
 8008260:	fe00e800 	.word	0xfe00e800

08008264 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b08b      	sub	sp, #44	; 0x2c
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008270:	2327      	movs	r3, #39	; 0x27
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2210      	movs	r2, #16
 800828c:	4013      	ands	r3, r2
 800828e:	d100      	bne.n	8008292 <I2C_IsErrorOccurred+0x2e>
 8008290:	e082      	b.n	8008398 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2210      	movs	r2, #16
 8008298:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800829a:	e060      	b.n	800835e <I2C_IsErrorOccurred+0xfa>
 800829c:	2427      	movs	r4, #39	; 0x27
 800829e:	193b      	adds	r3, r7, r4
 80082a0:	193a      	adds	r2, r7, r4
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	3301      	adds	r3, #1
 80082aa:	d058      	beq.n	800835e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80082ac:	f7fe fe68 	bl	8006f80 <HAL_GetTick>
 80082b0:	0002      	movs	r2, r0
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d306      	bcc.n	80082ca <I2C_IsErrorOccurred+0x66>
 80082bc:	193b      	adds	r3, r7, r4
 80082be:	193a      	adds	r2, r7, r4
 80082c0:	7812      	ldrb	r2, [r2, #0]
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d149      	bne.n	800835e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	2380      	movs	r3, #128	; 0x80
 80082d2:	01db      	lsls	r3, r3, #7
 80082d4:	4013      	ands	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80082d8:	2013      	movs	r0, #19
 80082da:	183b      	adds	r3, r7, r0
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	2142      	movs	r1, #66	; 0x42
 80082e0:	5c52      	ldrb	r2, [r2, r1]
 80082e2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	2380      	movs	r3, #128	; 0x80
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	401a      	ands	r2, r3
 80082f0:	2380      	movs	r3, #128	; 0x80
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d126      	bne.n	8008346 <I2C_IsErrorOccurred+0xe2>
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	01db      	lsls	r3, r3, #7
 80082fe:	429a      	cmp	r2, r3
 8008300:	d021      	beq.n	8008346 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8008302:	183b      	adds	r3, r7, r0
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b20      	cmp	r3, #32
 8008308:	d01d      	beq.n	8008346 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2180      	movs	r1, #128	; 0x80
 8008316:	01c9      	lsls	r1, r1, #7
 8008318:	430a      	orrs	r2, r1
 800831a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800831c:	f7fe fe30 	bl	8006f80 <HAL_GetTick>
 8008320:	0003      	movs	r3, r0
 8008322:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008324:	e00f      	b.n	8008346 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008326:	f7fe fe2b 	bl	8006f80 <HAL_GetTick>
 800832a:	0002      	movs	r2, r0
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b19      	cmp	r3, #25
 8008332:	d908      	bls.n	8008346 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2220      	movs	r2, #32
 8008338:	4313      	orrs	r3, r2
 800833a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800833c:	2327      	movs	r3, #39	; 0x27
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	2201      	movs	r2, #1
 8008342:	701a      	strb	r2, [r3, #0]

              break;
 8008344:	e00b      	b.n	800835e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	2220      	movs	r2, #32
 800834e:	4013      	ands	r3, r2
 8008350:	2127      	movs	r1, #39	; 0x27
 8008352:	187a      	adds	r2, r7, r1
 8008354:	1879      	adds	r1, r7, r1
 8008356:	7809      	ldrb	r1, [r1, #0]
 8008358:	7011      	strb	r1, [r2, #0]
 800835a:	2b20      	cmp	r3, #32
 800835c:	d1e3      	bne.n	8008326 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2220      	movs	r2, #32
 8008366:	4013      	ands	r3, r2
 8008368:	2b20      	cmp	r3, #32
 800836a:	d004      	beq.n	8008376 <I2C_IsErrorOccurred+0x112>
 800836c:	2327      	movs	r3, #39	; 0x27
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d092      	beq.n	800829c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008376:	2327      	movs	r3, #39	; 0x27
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d103      	bne.n	8008388 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2220      	movs	r2, #32
 8008386:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	2204      	movs	r2, #4
 800838c:	4313      	orrs	r3, r2
 800838e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008390:	2327      	movs	r3, #39	; 0x27
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	2201      	movs	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	2380      	movs	r3, #128	; 0x80
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4013      	ands	r3, r2
 80083a8:	d00c      	beq.n	80083c4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	2201      	movs	r2, #1
 80083ae:	4313      	orrs	r3, r2
 80083b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2280      	movs	r2, #128	; 0x80
 80083b8:	0052      	lsls	r2, r2, #1
 80083ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083bc:	2327      	movs	r3, #39	; 0x27
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	2201      	movs	r2, #1
 80083c2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	2380      	movs	r3, #128	; 0x80
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	4013      	ands	r3, r2
 80083cc:	d00c      	beq.n	80083e8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	2208      	movs	r2, #8
 80083d2:	4313      	orrs	r3, r2
 80083d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2280      	movs	r2, #128	; 0x80
 80083dc:	00d2      	lsls	r2, r2, #3
 80083de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083e0:	2327      	movs	r3, #39	; 0x27
 80083e2:	18fb      	adds	r3, r7, r3
 80083e4:	2201      	movs	r2, #1
 80083e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	2380      	movs	r3, #128	; 0x80
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4013      	ands	r3, r2
 80083f0:	d00c      	beq.n	800840c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	2202      	movs	r2, #2
 80083f6:	4313      	orrs	r3, r2
 80083f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2280      	movs	r2, #128	; 0x80
 8008400:	0092      	lsls	r2, r2, #2
 8008402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008404:	2327      	movs	r3, #39	; 0x27
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800840c:	2327      	movs	r3, #39	; 0x27
 800840e:	18fb      	adds	r3, r7, r3
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d01d      	beq.n	8008452 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	0018      	movs	r0, r3
 800841a:	f7ff fdcd 	bl	8007fb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	490d      	ldr	r1, [pc, #52]	; (8008460 <I2C_IsErrorOccurred+0x1fc>)
 800842a:	400a      	ands	r2, r1
 800842c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	431a      	orrs	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2241      	movs	r2, #65	; 0x41
 800843e:	2120      	movs	r1, #32
 8008440:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2242      	movs	r2, #66	; 0x42
 8008446:	2100      	movs	r1, #0
 8008448:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2240      	movs	r2, #64	; 0x40
 800844e:	2100      	movs	r1, #0
 8008450:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008452:	2327      	movs	r3, #39	; 0x27
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	781b      	ldrb	r3, [r3, #0]
}
 8008458:	0018      	movs	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	b00b      	add	sp, #44	; 0x2c
 800845e:	bd90      	pop	{r4, r7, pc}
 8008460:	fe00e800 	.word	0xfe00e800

08008464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	0008      	movs	r0, r1
 800846e:	0011      	movs	r1, r2
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	240a      	movs	r4, #10
 8008474:	193b      	adds	r3, r7, r4
 8008476:	1c02      	adds	r2, r0, #0
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	2009      	movs	r0, #9
 800847c:	183b      	adds	r3, r7, r0
 800847e:	1c0a      	adds	r2, r1, #0
 8008480:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008482:	193b      	adds	r3, r7, r4
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	059b      	lsls	r3, r3, #22
 8008488:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800848a:	183b      	adds	r3, r7, r0
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	0419      	lsls	r1, r3, #16
 8008490:	23ff      	movs	r3, #255	; 0xff
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008496:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	4313      	orrs	r3, r2
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	085b      	lsrs	r3, r3, #1
 80084a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ae:	0d51      	lsrs	r1, r2, #21
 80084b0:	2280      	movs	r2, #128	; 0x80
 80084b2:	00d2      	lsls	r2, r2, #3
 80084b4:	400a      	ands	r2, r1
 80084b6:	4907      	ldr	r1, [pc, #28]	; (80084d4 <I2C_TransferConfig+0x70>)
 80084b8:	430a      	orrs	r2, r1
 80084ba:	43d2      	mvns	r2, r2
 80084bc:	401a      	ands	r2, r3
 80084be:	0011      	movs	r1, r2
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	46bd      	mov	sp, r7
 80084ce:	b007      	add	sp, #28
 80084d0:	bd90      	pop	{r4, r7, pc}
 80084d2:	46c0      	nop			; (mov r8, r8)
 80084d4:	03ff63ff 	.word	0x03ff63ff

080084d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2241      	movs	r2, #65	; 0x41
 80084e6:	5c9b      	ldrb	r3, [r3, r2]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d138      	bne.n	8008560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2240      	movs	r2, #64	; 0x40
 80084f2:	5c9b      	ldrb	r3, [r3, r2]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e032      	b.n	8008562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2240      	movs	r2, #64	; 0x40
 8008500:	2101      	movs	r1, #1
 8008502:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2241      	movs	r2, #65	; 0x41
 8008508:	2124      	movs	r1, #36	; 0x24
 800850a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2101      	movs	r1, #1
 8008518:	438a      	bics	r2, r1
 800851a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4911      	ldr	r1, [pc, #68]	; (800856c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008528:	400a      	ands	r2, r1
 800852a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2101      	movs	r1, #1
 8008548:	430a      	orrs	r2, r1
 800854a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2241      	movs	r2, #65	; 0x41
 8008550:	2120      	movs	r1, #32
 8008552:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2240      	movs	r2, #64	; 0x40
 8008558:	2100      	movs	r1, #0
 800855a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	e000      	b.n	8008562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008560:	2302      	movs	r3, #2
  }
}
 8008562:	0018      	movs	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	b002      	add	sp, #8
 8008568:	bd80      	pop	{r7, pc}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	ffffefff 	.word	0xffffefff

08008570 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2241      	movs	r2, #65	; 0x41
 800857e:	5c9b      	ldrb	r3, [r3, r2]
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b20      	cmp	r3, #32
 8008584:	d139      	bne.n	80085fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2240      	movs	r2, #64	; 0x40
 800858a:	5c9b      	ldrb	r3, [r3, r2]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008590:	2302      	movs	r3, #2
 8008592:	e033      	b.n	80085fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2240      	movs	r2, #64	; 0x40
 8008598:	2101      	movs	r1, #1
 800859a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2241      	movs	r2, #65	; 0x41
 80085a0:	2124      	movs	r1, #36	; 0x24
 80085a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2101      	movs	r1, #1
 80085b0:	438a      	bics	r2, r1
 80085b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a11      	ldr	r2, [pc, #68]	; (8008604 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2101      	movs	r1, #1
 80085e2:	430a      	orrs	r2, r1
 80085e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2241      	movs	r2, #65	; 0x41
 80085ea:	2120      	movs	r1, #32
 80085ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2240      	movs	r2, #64	; 0x40
 80085f2:	2100      	movs	r1, #0
 80085f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	e000      	b.n	80085fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085fa:	2302      	movs	r3, #2
  }
}
 80085fc:	0018      	movs	r0, r3
 80085fe:	46bd      	mov	sp, r7
 8008600:	b004      	add	sp, #16
 8008602:	bd80      	pop	{r7, pc}
 8008604:	fffff0ff 	.word	0xfffff0ff

08008608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008610:	4b19      	ldr	r3, [pc, #100]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a19      	ldr	r2, [pc, #100]	; (800867c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008616:	4013      	ands	r3, r2
 8008618:	0019      	movs	r1, r3
 800861a:	4b17      	ldr	r3, [pc, #92]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	430a      	orrs	r2, r1
 8008620:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	429a      	cmp	r2, r3
 800862a:	d11f      	bne.n	800866c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800862c:	4b14      	ldr	r3, [pc, #80]	; (8008680 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	0013      	movs	r3, r2
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	189b      	adds	r3, r3, r2
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	4912      	ldr	r1, [pc, #72]	; (8008684 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800863a:	0018      	movs	r0, r3
 800863c:	f7f7 fd62 	bl	8000104 <__udivsi3>
 8008640:	0003      	movs	r3, r0
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008646:	e008      	b.n	800865a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3b01      	subs	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e001      	b.n	800865a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e009      	b.n	800866e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800865c:	695a      	ldr	r2, [r3, #20]
 800865e:	2380      	movs	r3, #128	; 0x80
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	401a      	ands	r2, r3
 8008664:	2380      	movs	r3, #128	; 0x80
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	429a      	cmp	r2, r3
 800866a:	d0ed      	beq.n	8008648 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	0018      	movs	r0, r3
 8008670:	46bd      	mov	sp, r7
 8008672:	b004      	add	sp, #16
 8008674:	bd80      	pop	{r7, pc}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	40007000 	.word	0x40007000
 800867c:	fffff9ff 	.word	0xfffff9ff
 8008680:	20000000 	.word	0x20000000
 8008684:	000f4240 	.word	0x000f4240

08008688 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800868c:	4b03      	ldr	r3, [pc, #12]	; (800869c <LL_RCC_GetAPB1Prescaler+0x14>)
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	23e0      	movs	r3, #224	; 0xe0
 8008692:	01db      	lsls	r3, r3, #7
 8008694:	4013      	ands	r3, r2
}
 8008696:	0018      	movs	r0, r3
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40021000 	.word	0x40021000

080086a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e2fe      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2201      	movs	r2, #1
 80086b8:	4013      	ands	r3, r2
 80086ba:	d100      	bne.n	80086be <HAL_RCC_OscConfig+0x1e>
 80086bc:	e07c      	b.n	80087b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086be:	4bc3      	ldr	r3, [pc, #780]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2238      	movs	r2, #56	; 0x38
 80086c4:	4013      	ands	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086c8:	4bc0      	ldr	r3, [pc, #768]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2203      	movs	r2, #3
 80086ce:	4013      	ands	r3, r2
 80086d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	2b10      	cmp	r3, #16
 80086d6:	d102      	bne.n	80086de <HAL_RCC_OscConfig+0x3e>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d002      	beq.n	80086e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d10b      	bne.n	80086fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e4:	4bb9      	ldr	r3, [pc, #740]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	2380      	movs	r3, #128	; 0x80
 80086ea:	029b      	lsls	r3, r3, #10
 80086ec:	4013      	ands	r3, r2
 80086ee:	d062      	beq.n	80087b6 <HAL_RCC_OscConfig+0x116>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d15e      	bne.n	80087b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e2d9      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	2380      	movs	r3, #128	; 0x80
 8008702:	025b      	lsls	r3, r3, #9
 8008704:	429a      	cmp	r2, r3
 8008706:	d107      	bne.n	8008718 <HAL_RCC_OscConfig+0x78>
 8008708:	4bb0      	ldr	r3, [pc, #704]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4baf      	ldr	r3, [pc, #700]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800870e:	2180      	movs	r1, #128	; 0x80
 8008710:	0249      	lsls	r1, r1, #9
 8008712:	430a      	orrs	r2, r1
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	e020      	b.n	800875a <HAL_RCC_OscConfig+0xba>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	23a0      	movs	r3, #160	; 0xa0
 800871e:	02db      	lsls	r3, r3, #11
 8008720:	429a      	cmp	r2, r3
 8008722:	d10e      	bne.n	8008742 <HAL_RCC_OscConfig+0xa2>
 8008724:	4ba9      	ldr	r3, [pc, #676]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	4ba8      	ldr	r3, [pc, #672]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800872a:	2180      	movs	r1, #128	; 0x80
 800872c:	02c9      	lsls	r1, r1, #11
 800872e:	430a      	orrs	r2, r1
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	4ba6      	ldr	r3, [pc, #664]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4ba5      	ldr	r3, [pc, #660]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008738:	2180      	movs	r1, #128	; 0x80
 800873a:	0249      	lsls	r1, r1, #9
 800873c:	430a      	orrs	r2, r1
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e00b      	b.n	800875a <HAL_RCC_OscConfig+0xba>
 8008742:	4ba2      	ldr	r3, [pc, #648]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4ba1      	ldr	r3, [pc, #644]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008748:	49a1      	ldr	r1, [pc, #644]	; (80089d0 <HAL_RCC_OscConfig+0x330>)
 800874a:	400a      	ands	r2, r1
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	4b9f      	ldr	r3, [pc, #636]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b9e      	ldr	r3, [pc, #632]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008754:	499f      	ldr	r1, [pc, #636]	; (80089d4 <HAL_RCC_OscConfig+0x334>)
 8008756:	400a      	ands	r2, r1
 8008758:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d014      	beq.n	800878c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008762:	f7fe fc0d 	bl	8006f80 <HAL_GetTick>
 8008766:	0003      	movs	r3, r0
 8008768:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800876c:	f7fe fc08 	bl	8006f80 <HAL_GetTick>
 8008770:	0002      	movs	r2, r0
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b64      	cmp	r3, #100	; 0x64
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e298      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800877e:	4b93      	ldr	r3, [pc, #588]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	2380      	movs	r3, #128	; 0x80
 8008784:	029b      	lsls	r3, r3, #10
 8008786:	4013      	ands	r3, r2
 8008788:	d0f0      	beq.n	800876c <HAL_RCC_OscConfig+0xcc>
 800878a:	e015      	b.n	80087b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878c:	f7fe fbf8 	bl	8006f80 <HAL_GetTick>
 8008790:	0003      	movs	r3, r0
 8008792:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008796:	f7fe fbf3 	bl	8006f80 <HAL_GetTick>
 800879a:	0002      	movs	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b64      	cmp	r3, #100	; 0x64
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e283      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087a8:	4b88      	ldr	r3, [pc, #544]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	029b      	lsls	r3, r3, #10
 80087b0:	4013      	ands	r3, r2
 80087b2:	d1f0      	bne.n	8008796 <HAL_RCC_OscConfig+0xf6>
 80087b4:	e000      	b.n	80087b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2202      	movs	r2, #2
 80087be:	4013      	ands	r3, r2
 80087c0:	d100      	bne.n	80087c4 <HAL_RCC_OscConfig+0x124>
 80087c2:	e099      	b.n	80088f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087c4:	4b81      	ldr	r3, [pc, #516]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2238      	movs	r2, #56	; 0x38
 80087ca:	4013      	ands	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087ce:	4b7f      	ldr	r3, [pc, #508]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	2203      	movs	r2, #3
 80087d4:	4013      	ands	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d102      	bne.n	80087e4 <HAL_RCC_OscConfig+0x144>
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d002      	beq.n	80087ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d135      	bne.n	8008856 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ea:	4b78      	ldr	r3, [pc, #480]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	2380      	movs	r3, #128	; 0x80
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	4013      	ands	r3, r2
 80087f4:	d005      	beq.n	8008802 <HAL_RCC_OscConfig+0x162>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e256      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008802:	4b72      	ldr	r3, [pc, #456]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	4a74      	ldr	r2, [pc, #464]	; (80089d8 <HAL_RCC_OscConfig+0x338>)
 8008808:	4013      	ands	r3, r2
 800880a:	0019      	movs	r1, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	021a      	lsls	r2, r3, #8
 8008812:	4b6e      	ldr	r3, [pc, #440]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008814:	430a      	orrs	r2, r1
 8008816:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d112      	bne.n	8008844 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800881e:	4b6b      	ldr	r3, [pc, #428]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a6e      	ldr	r2, [pc, #440]	; (80089dc <HAL_RCC_OscConfig+0x33c>)
 8008824:	4013      	ands	r3, r2
 8008826:	0019      	movs	r1, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	4b67      	ldr	r3, [pc, #412]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800882e:	430a      	orrs	r2, r1
 8008830:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008832:	4b66      	ldr	r3, [pc, #408]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	0adb      	lsrs	r3, r3, #11
 8008838:	2207      	movs	r2, #7
 800883a:	4013      	ands	r3, r2
 800883c:	4a68      	ldr	r2, [pc, #416]	; (80089e0 <HAL_RCC_OscConfig+0x340>)
 800883e:	40da      	lsrs	r2, r3
 8008840:	4b68      	ldr	r3, [pc, #416]	; (80089e4 <HAL_RCC_OscConfig+0x344>)
 8008842:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008844:	4b68      	ldr	r3, [pc, #416]	; (80089e8 <HAL_RCC_OscConfig+0x348>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	0018      	movs	r0, r3
 800884a:	f7fe fb3d 	bl	8006ec8 <HAL_InitTick>
 800884e:	1e03      	subs	r3, r0, #0
 8008850:	d051      	beq.n	80088f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e22c      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d030      	beq.n	80088c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800885e:	4b5b      	ldr	r3, [pc, #364]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a5e      	ldr	r2, [pc, #376]	; (80089dc <HAL_RCC_OscConfig+0x33c>)
 8008864:	4013      	ands	r3, r2
 8008866:	0019      	movs	r1, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	4b57      	ldr	r3, [pc, #348]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800886e:	430a      	orrs	r2, r1
 8008870:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008872:	4b56      	ldr	r3, [pc, #344]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	4b55      	ldr	r3, [pc, #340]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	0049      	lsls	r1, r1, #1
 800887c:	430a      	orrs	r2, r1
 800887e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fe fb7e 	bl	8006f80 <HAL_GetTick>
 8008884:	0003      	movs	r3, r0
 8008886:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800888a:	f7fe fb79 	bl	8006f80 <HAL_GetTick>
 800888e:	0002      	movs	r2, r0
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e209      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800889c:	4b4b      	ldr	r3, [pc, #300]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4013      	ands	r3, r2
 80088a6:	d0f0      	beq.n	800888a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088a8:	4b48      	ldr	r3, [pc, #288]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	4a4a      	ldr	r2, [pc, #296]	; (80089d8 <HAL_RCC_OscConfig+0x338>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	0019      	movs	r1, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	021a      	lsls	r2, r3, #8
 80088b8:	4b44      	ldr	r3, [pc, #272]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]
 80088be:	e01b      	b.n	80088f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80088c0:	4b42      	ldr	r3, [pc, #264]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	4b41      	ldr	r3, [pc, #260]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80088c6:	4949      	ldr	r1, [pc, #292]	; (80089ec <HAL_RCC_OscConfig+0x34c>)
 80088c8:	400a      	ands	r2, r1
 80088ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088cc:	f7fe fb58 	bl	8006f80 <HAL_GetTick>
 80088d0:	0003      	movs	r3, r0
 80088d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088d4:	e008      	b.n	80088e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088d6:	f7fe fb53 	bl	8006f80 <HAL_GetTick>
 80088da:	0002      	movs	r2, r0
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d901      	bls.n	80088e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e1e3      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088e8:	4b38      	ldr	r3, [pc, #224]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	2380      	movs	r3, #128	; 0x80
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	4013      	ands	r3, r2
 80088f2:	d1f0      	bne.n	80088d6 <HAL_RCC_OscConfig+0x236>
 80088f4:	e000      	b.n	80088f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2208      	movs	r2, #8
 80088fe:	4013      	ands	r3, r2
 8008900:	d047      	beq.n	8008992 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008902:	4b32      	ldr	r3, [pc, #200]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	2238      	movs	r2, #56	; 0x38
 8008908:	4013      	ands	r3, r2
 800890a:	2b18      	cmp	r3, #24
 800890c:	d10a      	bne.n	8008924 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800890e:	4b2f      	ldr	r3, [pc, #188]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	2202      	movs	r2, #2
 8008914:	4013      	ands	r3, r2
 8008916:	d03c      	beq.n	8008992 <HAL_RCC_OscConfig+0x2f2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d138      	bne.n	8008992 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e1c5      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d019      	beq.n	8008960 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800892c:	4b27      	ldr	r3, [pc, #156]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800892e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008930:	4b26      	ldr	r3, [pc, #152]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008932:	2101      	movs	r1, #1
 8008934:	430a      	orrs	r2, r1
 8008936:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008938:	f7fe fb22 	bl	8006f80 <HAL_GetTick>
 800893c:	0003      	movs	r3, r0
 800893e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008940:	e008      	b.n	8008954 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008942:	f7fe fb1d 	bl	8006f80 <HAL_GetTick>
 8008946:	0002      	movs	r2, r0
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b02      	cmp	r3, #2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e1ad      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008954:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008958:	2202      	movs	r2, #2
 800895a:	4013      	ands	r3, r2
 800895c:	d0f1      	beq.n	8008942 <HAL_RCC_OscConfig+0x2a2>
 800895e:	e018      	b.n	8008992 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008960:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008962:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008964:	4b19      	ldr	r3, [pc, #100]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 8008966:	2101      	movs	r1, #1
 8008968:	438a      	bics	r2, r1
 800896a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896c:	f7fe fb08 	bl	8006f80 <HAL_GetTick>
 8008970:	0003      	movs	r3, r0
 8008972:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008976:	f7fe fb03 	bl	8006f80 <HAL_GetTick>
 800897a:	0002      	movs	r2, r0
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e193      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008988:	4b10      	ldr	r3, [pc, #64]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 800898a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898c:	2202      	movs	r2, #2
 800898e:	4013      	ands	r3, r2
 8008990:	d1f1      	bne.n	8008976 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2204      	movs	r2, #4
 8008998:	4013      	ands	r3, r2
 800899a:	d100      	bne.n	800899e <HAL_RCC_OscConfig+0x2fe>
 800899c:	e0c6      	b.n	8008b2c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800899e:	231f      	movs	r3, #31
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	2200      	movs	r2, #0
 80089a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80089a6:	4b09      	ldr	r3, [pc, #36]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2238      	movs	r2, #56	; 0x38
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d11e      	bne.n	80089f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80089b2:	4b06      	ldr	r3, [pc, #24]	; (80089cc <HAL_RCC_OscConfig+0x32c>)
 80089b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b6:	2202      	movs	r2, #2
 80089b8:	4013      	ands	r3, r2
 80089ba:	d100      	bne.n	80089be <HAL_RCC_OscConfig+0x31e>
 80089bc:	e0b6      	b.n	8008b2c <HAL_RCC_OscConfig+0x48c>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d000      	beq.n	80089c8 <HAL_RCC_OscConfig+0x328>
 80089c6:	e0b1      	b.n	8008b2c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e171      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
 80089cc:	40021000 	.word	0x40021000
 80089d0:	fffeffff 	.word	0xfffeffff
 80089d4:	fffbffff 	.word	0xfffbffff
 80089d8:	ffff80ff 	.word	0xffff80ff
 80089dc:	ffffc7ff 	.word	0xffffc7ff
 80089e0:	00f42400 	.word	0x00f42400
 80089e4:	20000000 	.word	0x20000000
 80089e8:	2000000c 	.word	0x2000000c
 80089ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80089f0:	4bb1      	ldr	r3, [pc, #708]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 80089f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f4:	2380      	movs	r3, #128	; 0x80
 80089f6:	055b      	lsls	r3, r3, #21
 80089f8:	4013      	ands	r3, r2
 80089fa:	d101      	bne.n	8008a00 <HAL_RCC_OscConfig+0x360>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <HAL_RCC_OscConfig+0x362>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d011      	beq.n	8008a2a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008a06:	4bac      	ldr	r3, [pc, #688]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a0a:	4bab      	ldr	r3, [pc, #684]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	0549      	lsls	r1, r1, #21
 8008a10:	430a      	orrs	r2, r1
 8008a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a14:	4ba8      	ldr	r3, [pc, #672]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a18:	2380      	movs	r3, #128	; 0x80
 8008a1a:	055b      	lsls	r3, r3, #21
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008a22:	231f      	movs	r3, #31
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	2201      	movs	r2, #1
 8008a28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a2a:	4ba4      	ldr	r3, [pc, #656]	; (8008cbc <HAL_RCC_OscConfig+0x61c>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	2380      	movs	r3, #128	; 0x80
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	4013      	ands	r3, r2
 8008a34:	d11a      	bne.n	8008a6c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a36:	4ba1      	ldr	r3, [pc, #644]	; (8008cbc <HAL_RCC_OscConfig+0x61c>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4ba0      	ldr	r3, [pc, #640]	; (8008cbc <HAL_RCC_OscConfig+0x61c>)
 8008a3c:	2180      	movs	r1, #128	; 0x80
 8008a3e:	0049      	lsls	r1, r1, #1
 8008a40:	430a      	orrs	r2, r1
 8008a42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008a44:	f7fe fa9c 	bl	8006f80 <HAL_GetTick>
 8008a48:	0003      	movs	r3, r0
 8008a4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a4c:	e008      	b.n	8008a60 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a4e:	f7fe fa97 	bl	8006f80 <HAL_GetTick>
 8008a52:	0002      	movs	r2, r0
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e127      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a60:	4b96      	ldr	r3, [pc, #600]	; (8008cbc <HAL_RCC_OscConfig+0x61c>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	2380      	movs	r3, #128	; 0x80
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	4013      	ands	r3, r2
 8008a6a:	d0f0      	beq.n	8008a4e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d106      	bne.n	8008a82 <HAL_RCC_OscConfig+0x3e2>
 8008a74:	4b90      	ldr	r3, [pc, #576]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a78:	4b8f      	ldr	r3, [pc, #572]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a80:	e01c      	b.n	8008abc <HAL_RCC_OscConfig+0x41c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	d10c      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x404>
 8008a8a:	4b8b      	ldr	r3, [pc, #556]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a8e:	4b8a      	ldr	r3, [pc, #552]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a90:	2104      	movs	r1, #4
 8008a92:	430a      	orrs	r2, r1
 8008a94:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a96:	4b88      	ldr	r3, [pc, #544]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a9a:	4b87      	ldr	r3, [pc, #540]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8008aa2:	e00b      	b.n	8008abc <HAL_RCC_OscConfig+0x41c>
 8008aa4:	4b84      	ldr	r3, [pc, #528]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aa8:	4b83      	ldr	r3, [pc, #524]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008aaa:	2101      	movs	r1, #1
 8008aac:	438a      	bics	r2, r1
 8008aae:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ab0:	4b81      	ldr	r3, [pc, #516]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008ab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ab4:	4b80      	ldr	r3, [pc, #512]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008ab6:	2104      	movs	r1, #4
 8008ab8:	438a      	bics	r2, r1
 8008aba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d014      	beq.n	8008aee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac4:	f7fe fa5c 	bl	8006f80 <HAL_GetTick>
 8008ac8:	0003      	movs	r3, r0
 8008aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008acc:	e009      	b.n	8008ae2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ace:	f7fe fa57 	bl	8006f80 <HAL_GetTick>
 8008ad2:	0002      	movs	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	4a79      	ldr	r2, [pc, #484]	; (8008cc0 <HAL_RCC_OscConfig+0x620>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e0e6      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ae2:	4b75      	ldr	r3, [pc, #468]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	4013      	ands	r3, r2
 8008aea:	d0f0      	beq.n	8008ace <HAL_RCC_OscConfig+0x42e>
 8008aec:	e013      	b.n	8008b16 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aee:	f7fe fa47 	bl	8006f80 <HAL_GetTick>
 8008af2:	0003      	movs	r3, r0
 8008af4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008af6:	e009      	b.n	8008b0c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008af8:	f7fe fa42 	bl	8006f80 <HAL_GetTick>
 8008afc:	0002      	movs	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	4a6f      	ldr	r2, [pc, #444]	; (8008cc0 <HAL_RCC_OscConfig+0x620>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e0d1      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b0c:	4b6a      	ldr	r3, [pc, #424]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b10:	2202      	movs	r2, #2
 8008b12:	4013      	ands	r3, r2
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008b16:	231f      	movs	r3, #31
 8008b18:	18fb      	adds	r3, r7, r3
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d105      	bne.n	8008b2c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008b20:	4b65      	ldr	r3, [pc, #404]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b24:	4b64      	ldr	r3, [pc, #400]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b26:	4967      	ldr	r1, [pc, #412]	; (8008cc4 <HAL_RCC_OscConfig+0x624>)
 8008b28:	400a      	ands	r2, r1
 8008b2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d100      	bne.n	8008b36 <HAL_RCC_OscConfig+0x496>
 8008b34:	e0bb      	b.n	8008cae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b36:	4b60      	ldr	r3, [pc, #384]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2238      	movs	r2, #56	; 0x38
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	2b10      	cmp	r3, #16
 8008b40:	d100      	bne.n	8008b44 <HAL_RCC_OscConfig+0x4a4>
 8008b42:	e07b      	b.n	8008c3c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d156      	bne.n	8008bfa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4c:	4b5a      	ldr	r3, [pc, #360]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	4b59      	ldr	r3, [pc, #356]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b52:	495d      	ldr	r1, [pc, #372]	; (8008cc8 <HAL_RCC_OscConfig+0x628>)
 8008b54:	400a      	ands	r2, r1
 8008b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b58:	f7fe fa12 	bl	8006f80 <HAL_GetTick>
 8008b5c:	0003      	movs	r3, r0
 8008b5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b60:	e008      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b62:	f7fe fa0d 	bl	8006f80 <HAL_GetTick>
 8008b66:	0002      	movs	r2, r0
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d901      	bls.n	8008b74 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e09d      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b74:	4b50      	ldr	r3, [pc, #320]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	2380      	movs	r3, #128	; 0x80
 8008b7a:	049b      	lsls	r3, r3, #18
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d1f0      	bne.n	8008b62 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b80:	4b4d      	ldr	r3, [pc, #308]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	4a51      	ldr	r2, [pc, #324]	; (8008ccc <HAL_RCC_OscConfig+0x62c>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	0019      	movs	r1, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	021b      	lsls	r3, r3, #8
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bac:	431a      	orrs	r2, r3
 8008bae:	4b42      	ldr	r3, [pc, #264]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bb4:	4b40      	ldr	r3, [pc, #256]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	4b3f      	ldr	r3, [pc, #252]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008bba:	2180      	movs	r1, #128	; 0x80
 8008bbc:	0449      	lsls	r1, r1, #17
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008bc2:	4b3d      	ldr	r3, [pc, #244]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	4b3c      	ldr	r3, [pc, #240]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008bc8:	2180      	movs	r1, #128	; 0x80
 8008bca:	0549      	lsls	r1, r1, #21
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd0:	f7fe f9d6 	bl	8006f80 <HAL_GetTick>
 8008bd4:	0003      	movs	r3, r0
 8008bd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bd8:	e008      	b.n	8008bec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bda:	f7fe f9d1 	bl	8006f80 <HAL_GetTick>
 8008bde:	0002      	movs	r2, r0
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e061      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bec:	4b32      	ldr	r3, [pc, #200]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	049b      	lsls	r3, r3, #18
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	d0f0      	beq.n	8008bda <HAL_RCC_OscConfig+0x53a>
 8008bf8:	e059      	b.n	8008cae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bfa:	4b2f      	ldr	r3, [pc, #188]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b2e      	ldr	r3, [pc, #184]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008c00:	4931      	ldr	r1, [pc, #196]	; (8008cc8 <HAL_RCC_OscConfig+0x628>)
 8008c02:	400a      	ands	r2, r1
 8008c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c06:	f7fe f9bb 	bl	8006f80 <HAL_GetTick>
 8008c0a:	0003      	movs	r3, r0
 8008c0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c10:	f7fe f9b6 	bl	8006f80 <HAL_GetTick>
 8008c14:	0002      	movs	r2, r0
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e046      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c22:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	049b      	lsls	r3, r3, #18
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	d1f0      	bne.n	8008c10 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008c2e:	4b22      	ldr	r3, [pc, #136]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	4b21      	ldr	r3, [pc, #132]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008c34:	4926      	ldr	r1, [pc, #152]	; (8008cd0 <HAL_RCC_OscConfig+0x630>)
 8008c36:	400a      	ands	r2, r1
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	e038      	b.n	8008cae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e033      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008c48:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <HAL_RCC_OscConfig+0x618>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2203      	movs	r2, #3
 8008c52:	401a      	ands	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d126      	bne.n	8008caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2270      	movs	r2, #112	; 0x70
 8008c60:	401a      	ands	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d11f      	bne.n	8008caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	23fe      	movs	r3, #254	; 0xfe
 8008c6e:	01db      	lsls	r3, r3, #7
 8008c70:	401a      	ands	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d116      	bne.n	8008caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	23f8      	movs	r3, #248	; 0xf8
 8008c80:	039b      	lsls	r3, r3, #14
 8008c82:	401a      	ands	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d10e      	bne.n	8008caa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	23e0      	movs	r3, #224	; 0xe0
 8008c90:	051b      	lsls	r3, r3, #20
 8008c92:	401a      	ands	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d106      	bne.n	8008caa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	0f5b      	lsrs	r3, r3, #29
 8008ca0:	075a      	lsls	r2, r3, #29
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d001      	beq.n	8008cae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	b008      	add	sp, #32
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	40021000 	.word	0x40021000
 8008cbc:	40007000 	.word	0x40007000
 8008cc0:	00001388 	.word	0x00001388
 8008cc4:	efffffff 	.word	0xefffffff
 8008cc8:	feffffff 	.word	0xfeffffff
 8008ccc:	11c1808c 	.word	0x11c1808c
 8008cd0:	eefefffc 	.word	0xeefefffc

08008cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0e9      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ce8:	4b76      	ldr	r3, [pc, #472]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2207      	movs	r2, #7
 8008cee:	4013      	ands	r3, r2
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d91e      	bls.n	8008d34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cf6:	4b73      	ldr	r3, [pc, #460]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2207      	movs	r2, #7
 8008cfc:	4393      	bics	r3, r2
 8008cfe:	0019      	movs	r1, r3
 8008d00:	4b70      	ldr	r3, [pc, #448]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d08:	f7fe f93a 	bl	8006f80 <HAL_GetTick>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d10:	e009      	b.n	8008d26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d12:	f7fe f935 	bl	8006f80 <HAL_GetTick>
 8008d16:	0002      	movs	r2, r0
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	4a6a      	ldr	r2, [pc, #424]	; (8008ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e0ca      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d26:	4b67      	ldr	r3, [pc, #412]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2207      	movs	r2, #7
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d1ee      	bne.n	8008d12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d015      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2204      	movs	r2, #4
 8008d44:	4013      	ands	r3, r2
 8008d46:	d006      	beq.n	8008d56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008d48:	4b60      	ldr	r3, [pc, #384]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	4b5f      	ldr	r3, [pc, #380]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008d4e:	21e0      	movs	r1, #224	; 0xe0
 8008d50:	01c9      	lsls	r1, r1, #7
 8008d52:	430a      	orrs	r2, r1
 8008d54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d56:	4b5d      	ldr	r3, [pc, #372]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	4a5d      	ldr	r2, [pc, #372]	; (8008ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	0019      	movs	r1, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	4b59      	ldr	r3, [pc, #356]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008d66:	430a      	orrs	r2, r1
 8008d68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4013      	ands	r3, r2
 8008d72:	d057      	beq.n	8008e24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d7c:	4b53      	ldr	r3, [pc, #332]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	2380      	movs	r3, #128	; 0x80
 8008d82:	029b      	lsls	r3, r3, #10
 8008d84:	4013      	ands	r3, r2
 8008d86:	d12b      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e097      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d107      	bne.n	8008da4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d94:	4b4d      	ldr	r3, [pc, #308]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	049b      	lsls	r3, r3, #18
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d11f      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e08b      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d107      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dac:	4b47      	ldr	r3, [pc, #284]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	4013      	ands	r3, r2
 8008db6:	d113      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e07f      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d106      	bne.n	8008dd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dc4:	4b41      	ldr	r3, [pc, #260]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc8:	2202      	movs	r2, #2
 8008dca:	4013      	ands	r3, r2
 8008dcc:	d108      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e074      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dd2:	4b3e      	ldr	r3, [pc, #248]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	4013      	ands	r3, r2
 8008dda:	d101      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e06d      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008de0:	4b3a      	ldr	r3, [pc, #232]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	2207      	movs	r2, #7
 8008de6:	4393      	bics	r3, r2
 8008de8:	0019      	movs	r1, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	4b37      	ldr	r3, [pc, #220]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008df0:	430a      	orrs	r2, r1
 8008df2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df4:	f7fe f8c4 	bl	8006f80 <HAL_GetTick>
 8008df8:	0003      	movs	r3, r0
 8008dfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dfc:	e009      	b.n	8008e12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dfe:	f7fe f8bf 	bl	8006f80 <HAL_GetTick>
 8008e02:	0002      	movs	r2, r0
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	4a2f      	ldr	r2, [pc, #188]	; (8008ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e054      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e12:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2238      	movs	r2, #56	; 0x38
 8008e18:	401a      	ands	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d1ec      	bne.n	8008dfe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e24:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2207      	movs	r2, #7
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d21e      	bcs.n	8008e70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e32:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2207      	movs	r2, #7
 8008e38:	4393      	bics	r3, r2
 8008e3a:	0019      	movs	r1, r3
 8008e3c:	4b21      	ldr	r3, [pc, #132]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e44:	f7fe f89c 	bl	8006f80 <HAL_GetTick>
 8008e48:	0003      	movs	r3, r0
 8008e4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e4c:	e009      	b.n	8008e62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e4e:	f7fe f897 	bl	8006f80 <HAL_GetTick>
 8008e52:	0002      	movs	r2, r0
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	4a1b      	ldr	r2, [pc, #108]	; (8008ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d901      	bls.n	8008e62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e02c      	b.n	8008ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2207      	movs	r2, #7
 8008e68:	4013      	ands	r3, r2
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d1ee      	bne.n	8008e4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2204      	movs	r2, #4
 8008e76:	4013      	ands	r3, r2
 8008e78:	d009      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008e7a:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	4a15      	ldr	r2, [pc, #84]	; (8008ed4 <HAL_RCC_ClockConfig+0x200>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	0019      	movs	r1, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008e8e:	f000 f829 	bl	8008ee4 <HAL_RCC_GetSysClockFreq>
 8008e92:	0001      	movs	r1, r0
 8008e94:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <HAL_RCC_ClockConfig+0x1f8>)
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	0a1b      	lsrs	r3, r3, #8
 8008e9a:	220f      	movs	r2, #15
 8008e9c:	401a      	ands	r2, r3
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <HAL_RCC_ClockConfig+0x204>)
 8008ea0:	0092      	lsls	r2, r2, #2
 8008ea2:	58d3      	ldr	r3, [r2, r3]
 8008ea4:	221f      	movs	r2, #31
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	000a      	movs	r2, r1
 8008eaa:	40da      	lsrs	r2, r3
 8008eac:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <HAL_RCC_ClockConfig+0x208>)
 8008eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <HAL_RCC_ClockConfig+0x20c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7fe f807 	bl	8006ec8 <HAL_InitTick>
 8008eba:	0003      	movs	r3, r0
}
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b004      	add	sp, #16
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40022000 	.word	0x40022000
 8008ec8:	00001388 	.word	0x00001388
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	fffff0ff 	.word	0xfffff0ff
 8008ed4:	ffff8fff 	.word	0xffff8fff
 8008ed8:	0800bff4 	.word	0x0800bff4
 8008edc:	20000000 	.word	0x20000000
 8008ee0:	2000000c 	.word	0x2000000c

08008ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008eea:	4b3c      	ldr	r3, [pc, #240]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	2238      	movs	r2, #56	; 0x38
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	d10f      	bne.n	8008f14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008ef4:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	0adb      	lsrs	r3, r3, #11
 8008efa:	2207      	movs	r2, #7
 8008efc:	4013      	ands	r3, r2
 8008efe:	2201      	movs	r2, #1
 8008f00:	409a      	lsls	r2, r3
 8008f02:	0013      	movs	r3, r2
 8008f04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	4835      	ldr	r0, [pc, #212]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008f0a:	f7f7 f8fb 	bl	8000104 <__udivsi3>
 8008f0e:	0003      	movs	r3, r0
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	e05d      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f14:	4b31      	ldr	r3, [pc, #196]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	2238      	movs	r2, #56	; 0x38
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d102      	bne.n	8008f26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f20:	4b30      	ldr	r3, [pc, #192]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	e054      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f26:	4b2d      	ldr	r3, [pc, #180]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	2238      	movs	r2, #56	; 0x38
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d138      	bne.n	8008fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008f32:	4b2a      	ldr	r3, [pc, #168]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	2203      	movs	r2, #3
 8008f38:	4013      	ands	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f3c:	4b27      	ldr	r3, [pc, #156]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	2207      	movs	r2, #7
 8008f44:	4013      	ands	r3, r2
 8008f46:	3301      	adds	r3, #1
 8008f48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d10d      	bne.n	8008f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	4824      	ldr	r0, [pc, #144]	; (8008fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8008f54:	f7f7 f8d6 	bl	8000104 <__udivsi3>
 8008f58:	0003      	movs	r3, r0
 8008f5a:	0019      	movs	r1, r3
 8008f5c:	4b1f      	ldr	r3, [pc, #124]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	0a1b      	lsrs	r3, r3, #8
 8008f62:	227f      	movs	r2, #127	; 0x7f
 8008f64:	4013      	ands	r3, r2
 8008f66:	434b      	muls	r3, r1
 8008f68:	617b      	str	r3, [r7, #20]
        break;
 8008f6a:	e00d      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008f6c:	68b9      	ldr	r1, [r7, #8]
 8008f6e:	481c      	ldr	r0, [pc, #112]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008f70:	f7f7 f8c8 	bl	8000104 <__udivsi3>
 8008f74:	0003      	movs	r3, r0
 8008f76:	0019      	movs	r1, r3
 8008f78:	4b18      	ldr	r3, [pc, #96]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	0a1b      	lsrs	r3, r3, #8
 8008f7e:	227f      	movs	r2, #127	; 0x7f
 8008f80:	4013      	ands	r3, r2
 8008f82:	434b      	muls	r3, r1
 8008f84:	617b      	str	r3, [r7, #20]
        break;
 8008f86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008f88:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	0f5b      	lsrs	r3, r3, #29
 8008f8e:	2207      	movs	r2, #7
 8008f90:	4013      	ands	r3, r2
 8008f92:	3301      	adds	r3, #1
 8008f94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	6978      	ldr	r0, [r7, #20]
 8008f9a:	f7f7 f8b3 	bl	8000104 <__udivsi3>
 8008f9e:	0003      	movs	r3, r0
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	e015      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2238      	movs	r2, #56	; 0x38
 8008faa:	4013      	ands	r3, r2
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d103      	bne.n	8008fb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	e00b      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008fb8:	4b08      	ldr	r3, [pc, #32]	; (8008fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	2238      	movs	r2, #56	; 0x38
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	2b18      	cmp	r3, #24
 8008fc2:	d103      	bne.n	8008fcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008fc4:	23fa      	movs	r3, #250	; 0xfa
 8008fc6:	01db      	lsls	r3, r3, #7
 8008fc8:	613b      	str	r3, [r7, #16]
 8008fca:	e001      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008fd0:	693b      	ldr	r3, [r7, #16]
}
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	b006      	add	sp, #24
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	40021000 	.word	0x40021000
 8008fe0:	00f42400 	.word	0x00f42400
 8008fe4:	007a1200 	.word	0x007a1200

08008fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fec:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8008fee:	681b      	ldr	r3, [r3, #0]
}
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	20000000 	.word	0x20000000

08008ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ffc:	b5b0      	push	{r4, r5, r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009000:	f7ff fff2 	bl	8008fe8 <HAL_RCC_GetHCLKFreq>
 8009004:	0004      	movs	r4, r0
 8009006:	f7ff fb3f 	bl	8008688 <LL_RCC_GetAPB1Prescaler>
 800900a:	0003      	movs	r3, r0
 800900c:	0b1a      	lsrs	r2, r3, #12
 800900e:	4b05      	ldr	r3, [pc, #20]	; (8009024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009010:	0092      	lsls	r2, r2, #2
 8009012:	58d3      	ldr	r3, [r2, r3]
 8009014:	221f      	movs	r2, #31
 8009016:	4013      	ands	r3, r2
 8009018:	40dc      	lsrs	r4, r3
 800901a:	0023      	movs	r3, r4
}
 800901c:	0018      	movs	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	bdb0      	pop	{r4, r5, r7, pc}
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	0800c034 	.word	0x0800c034

08009028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009030:	2313      	movs	r3, #19
 8009032:	18fb      	adds	r3, r7, r3
 8009034:	2200      	movs	r2, #0
 8009036:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009038:	2312      	movs	r3, #18
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	2200      	movs	r2, #0
 800903e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	029b      	lsls	r3, r3, #10
 8009048:	4013      	ands	r3, r2
 800904a:	d100      	bne.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800904c:	e0a3      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800904e:	2011      	movs	r0, #17
 8009050:	183b      	adds	r3, r7, r0
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009056:	4bc3      	ldr	r3, [pc, #780]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800905a:	2380      	movs	r3, #128	; 0x80
 800905c:	055b      	lsls	r3, r3, #21
 800905e:	4013      	ands	r3, r2
 8009060:	d110      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009062:	4bc0      	ldr	r3, [pc, #768]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009066:	4bbf      	ldr	r3, [pc, #764]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009068:	2180      	movs	r1, #128	; 0x80
 800906a:	0549      	lsls	r1, r1, #21
 800906c:	430a      	orrs	r2, r1
 800906e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009070:	4bbc      	ldr	r3, [pc, #752]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009074:	2380      	movs	r3, #128	; 0x80
 8009076:	055b      	lsls	r3, r3, #21
 8009078:	4013      	ands	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800907e:	183b      	adds	r3, r7, r0
 8009080:	2201      	movs	r2, #1
 8009082:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009084:	4bb8      	ldr	r3, [pc, #736]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	4bb7      	ldr	r3, [pc, #732]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	0049      	lsls	r1, r1, #1
 800908e:	430a      	orrs	r2, r1
 8009090:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009092:	f7fd ff75 	bl	8006f80 <HAL_GetTick>
 8009096:	0003      	movs	r3, r0
 8009098:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800909a:	e00b      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800909c:	f7fd ff70 	bl	8006f80 <HAL_GetTick>
 80090a0:	0002      	movs	r2, r0
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d904      	bls.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80090aa:	2313      	movs	r3, #19
 80090ac:	18fb      	adds	r3, r7, r3
 80090ae:	2203      	movs	r2, #3
 80090b0:	701a      	strb	r2, [r3, #0]
        break;
 80090b2:	e005      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090b4:	4bac      	ldr	r3, [pc, #688]	; (8009368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	4013      	ands	r3, r2
 80090be:	d0ed      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80090c0:	2313      	movs	r3, #19
 80090c2:	18fb      	adds	r3, r7, r3
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d154      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80090ca:	4ba6      	ldr	r3, [pc, #664]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090ce:	23c0      	movs	r3, #192	; 0xc0
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4013      	ands	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d019      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d014      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090e6:	4b9f      	ldr	r3, [pc, #636]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ea:	4aa0      	ldr	r2, [pc, #640]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80090ec:	4013      	ands	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090f0:	4b9c      	ldr	r3, [pc, #624]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090f4:	4b9b      	ldr	r3, [pc, #620]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090f6:	2180      	movs	r1, #128	; 0x80
 80090f8:	0249      	lsls	r1, r1, #9
 80090fa:	430a      	orrs	r2, r1
 80090fc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090fe:	4b99      	ldr	r3, [pc, #612]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009102:	4b98      	ldr	r3, [pc, #608]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009104:	499a      	ldr	r1, [pc, #616]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8009106:	400a      	ands	r2, r1
 8009108:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800910a:	4b96      	ldr	r3, [pc, #600]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2201      	movs	r2, #1
 8009114:	4013      	ands	r3, r2
 8009116:	d016      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009118:	f7fd ff32 	bl	8006f80 <HAL_GetTick>
 800911c:	0003      	movs	r3, r0
 800911e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009120:	e00c      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009122:	f7fd ff2d 	bl	8006f80 <HAL_GetTick>
 8009126:	0002      	movs	r2, r0
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	4a91      	ldr	r2, [pc, #580]	; (8009374 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d904      	bls.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009132:	2313      	movs	r3, #19
 8009134:	18fb      	adds	r3, r7, r3
 8009136:	2203      	movs	r2, #3
 8009138:	701a      	strb	r2, [r3, #0]
            break;
 800913a:	e004      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800913c:	4b89      	ldr	r3, [pc, #548]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800913e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009140:	2202      	movs	r2, #2
 8009142:	4013      	ands	r3, r2
 8009144:	d0ed      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009146:	2313      	movs	r3, #19
 8009148:	18fb      	adds	r3, r7, r3
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009150:	4b84      	ldr	r3, [pc, #528]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009154:	4a85      	ldr	r2, [pc, #532]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8009156:	4013      	ands	r3, r2
 8009158:	0019      	movs	r1, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800915e:	4b81      	ldr	r3, [pc, #516]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009160:	430a      	orrs	r2, r1
 8009162:	65da      	str	r2, [r3, #92]	; 0x5c
 8009164:	e00c      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009166:	2312      	movs	r3, #18
 8009168:	18fb      	adds	r3, r7, r3
 800916a:	2213      	movs	r2, #19
 800916c:	18ba      	adds	r2, r7, r2
 800916e:	7812      	ldrb	r2, [r2, #0]
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	e005      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009174:	2312      	movs	r3, #18
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	2213      	movs	r2, #19
 800917a:	18ba      	adds	r2, r7, r2
 800917c:	7812      	ldrb	r2, [r2, #0]
 800917e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009180:	2311      	movs	r3, #17
 8009182:	18fb      	adds	r3, r7, r3
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d105      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800918a:	4b76      	ldr	r3, [pc, #472]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800918c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800918e:	4b75      	ldr	r3, [pc, #468]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009190:	4979      	ldr	r1, [pc, #484]	; (8009378 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8009192:	400a      	ands	r2, r1
 8009194:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2201      	movs	r2, #1
 800919c:	4013      	ands	r3, r2
 800919e:	d009      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091a0:	4b70      	ldr	r3, [pc, #448]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a4:	2203      	movs	r2, #3
 80091a6:	4393      	bics	r3, r2
 80091a8:	0019      	movs	r1, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	4b6d      	ldr	r3, [pc, #436]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091b0:	430a      	orrs	r2, r1
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2202      	movs	r2, #2
 80091ba:	4013      	ands	r3, r2
 80091bc:	d009      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091be:	4b69      	ldr	r3, [pc, #420]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c2:	220c      	movs	r2, #12
 80091c4:	4393      	bics	r3, r2
 80091c6:	0019      	movs	r1, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	4b65      	ldr	r3, [pc, #404]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091ce:	430a      	orrs	r2, r1
 80091d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2210      	movs	r2, #16
 80091d8:	4013      	ands	r3, r2
 80091da:	d009      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091dc:	4b61      	ldr	r3, [pc, #388]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	4a66      	ldr	r2, [pc, #408]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80091e2:	4013      	ands	r3, r2
 80091e4:	0019      	movs	r1, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	4b5e      	ldr	r3, [pc, #376]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091ec:	430a      	orrs	r2, r1
 80091ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	2380      	movs	r3, #128	; 0x80
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4013      	ands	r3, r2
 80091fa:	d009      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091fc:	4b59      	ldr	r3, [pc, #356]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009200:	4a5f      	ldr	r2, [pc, #380]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8009202:	4013      	ands	r3, r2
 8009204:	0019      	movs	r1, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	4b56      	ldr	r3, [pc, #344]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800920c:	430a      	orrs	r2, r1
 800920e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	2380      	movs	r3, #128	; 0x80
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4013      	ands	r3, r2
 800921a:	d009      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800921c:	4b51      	ldr	r3, [pc, #324]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800921e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009220:	4a58      	ldr	r2, [pc, #352]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009222:	4013      	ands	r3, r2
 8009224:	0019      	movs	r1, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	69da      	ldr	r2, [r3, #28]
 800922a:	4b4e      	ldr	r3, [pc, #312]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800922c:	430a      	orrs	r2, r1
 800922e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2220      	movs	r2, #32
 8009236:	4013      	ands	r3, r2
 8009238:	d009      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800923a:	4b4a      	ldr	r3, [pc, #296]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800923c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923e:	4a52      	ldr	r2, [pc, #328]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8009240:	4013      	ands	r3, r2
 8009242:	0019      	movs	r1, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	4b46      	ldr	r3, [pc, #280]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800924a:	430a      	orrs	r2, r1
 800924c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	2380      	movs	r3, #128	; 0x80
 8009254:	01db      	lsls	r3, r3, #7
 8009256:	4013      	ands	r3, r2
 8009258:	d015      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800925a:	4b42      	ldr	r3, [pc, #264]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800925c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	0899      	lsrs	r1, r3, #2
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	4b3f      	ldr	r3, [pc, #252]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009268:	430a      	orrs	r2, r1
 800926a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1a      	ldr	r2, [r3, #32]
 8009270:	2380      	movs	r3, #128	; 0x80
 8009272:	05db      	lsls	r3, r3, #23
 8009274:	429a      	cmp	r2, r3
 8009276:	d106      	bne.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009278:	4b3a      	ldr	r3, [pc, #232]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	4b39      	ldr	r3, [pc, #228]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800927e:	2180      	movs	r1, #128	; 0x80
 8009280:	0249      	lsls	r1, r1, #9
 8009282:	430a      	orrs	r2, r1
 8009284:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	2380      	movs	r3, #128	; 0x80
 800928c:	031b      	lsls	r3, r3, #12
 800928e:	4013      	ands	r3, r2
 8009290:	d009      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009292:	4b34      	ldr	r3, [pc, #208]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009296:	2240      	movs	r2, #64	; 0x40
 8009298:	4393      	bics	r3, r2
 800929a:	0019      	movs	r1, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092a0:	4b30      	ldr	r3, [pc, #192]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092a2:	430a      	orrs	r2, r1
 80092a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	2380      	movs	r3, #128	; 0x80
 80092ac:	039b      	lsls	r3, r3, #14
 80092ae:	4013      	ands	r3, r2
 80092b0:	d016      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80092b2:	4b2c      	ldr	r3, [pc, #176]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b6:	4a35      	ldr	r2, [pc, #212]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	0019      	movs	r1, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092c0:	4b28      	ldr	r3, [pc, #160]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092c2:	430a      	orrs	r2, r1
 80092c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ca:	2380      	movs	r3, #128	; 0x80
 80092cc:	03db      	lsls	r3, r3, #15
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d106      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80092d2:	4b24      	ldr	r3, [pc, #144]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	4b23      	ldr	r3, [pc, #140]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092d8:	2180      	movs	r1, #128	; 0x80
 80092da:	0449      	lsls	r1, r1, #17
 80092dc:	430a      	orrs	r2, r1
 80092de:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	2380      	movs	r3, #128	; 0x80
 80092e6:	03db      	lsls	r3, r3, #15
 80092e8:	4013      	ands	r3, r2
 80092ea:	d016      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80092ec:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f0:	4a27      	ldr	r2, [pc, #156]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	0019      	movs	r1, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fa:	4b1a      	ldr	r3, [pc, #104]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092fc:	430a      	orrs	r2, r1
 80092fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	045b      	lsls	r3, r3, #17
 8009308:	429a      	cmp	r2, r3
 800930a:	d106      	bne.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800930c:	4b15      	ldr	r3, [pc, #84]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	4b14      	ldr	r3, [pc, #80]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009312:	2180      	movs	r1, #128	; 0x80
 8009314:	0449      	lsls	r1, r1, #17
 8009316:	430a      	orrs	r2, r1
 8009318:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	2380      	movs	r3, #128	; 0x80
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	4013      	ands	r3, r2
 8009324:	d016      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009326:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	4a1a      	ldr	r2, [pc, #104]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800932c:	4013      	ands	r3, r2
 800932e:	0019      	movs	r1, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	695a      	ldr	r2, [r3, #20]
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009336:	430a      	orrs	r2, r1
 8009338:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	2380      	movs	r3, #128	; 0x80
 8009340:	01db      	lsls	r3, r3, #7
 8009342:	429a      	cmp	r2, r3
 8009344:	d106      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009346:	4b07      	ldr	r3, [pc, #28]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	4b06      	ldr	r3, [pc, #24]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800934c:	2180      	movs	r1, #128	; 0x80
 800934e:	0249      	lsls	r1, r1, #9
 8009350:	430a      	orrs	r2, r1
 8009352:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009354:	2312      	movs	r3, #18
 8009356:	18fb      	adds	r3, r7, r3
 8009358:	781b      	ldrb	r3, [r3, #0]
}
 800935a:	0018      	movs	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	b006      	add	sp, #24
 8009360:	bd80      	pop	{r7, pc}
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	40021000 	.word	0x40021000
 8009368:	40007000 	.word	0x40007000
 800936c:	fffffcff 	.word	0xfffffcff
 8009370:	fffeffff 	.word	0xfffeffff
 8009374:	00001388 	.word	0x00001388
 8009378:	efffffff 	.word	0xefffffff
 800937c:	fffff3ff 	.word	0xfffff3ff
 8009380:	fff3ffff 	.word	0xfff3ffff
 8009384:	ffcfffff 	.word	0xffcfffff
 8009388:	ffffcfff 	.word	0xffffcfff
 800938c:	ffbfffff 	.word	0xffbfffff
 8009390:	feffffff 	.word	0xfeffffff
 8009394:	ffff3fff 	.word	0xffff3fff

08009398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e0a8      	b.n	80094fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	2382      	movs	r3, #130	; 0x82
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d009      	beq.n	80093d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	61da      	str	r2, [r3, #28]
 80093c4:	e005      	b.n	80093d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	225d      	movs	r2, #93	; 0x5d
 80093dc:	5c9b      	ldrb	r3, [r3, r2]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d107      	bne.n	80093f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	225c      	movs	r2, #92	; 0x5c
 80093e8:	2100      	movs	r1, #0
 80093ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	0018      	movs	r0, r3
 80093f0:	f7fa fda6 	bl	8003f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	225d      	movs	r2, #93	; 0x5d
 80093f8:	2102      	movs	r1, #2
 80093fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2140      	movs	r1, #64	; 0x40
 8009408:	438a      	bics	r2, r1
 800940a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	23e0      	movs	r3, #224	; 0xe0
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	429a      	cmp	r2, r3
 8009416:	d902      	bls.n	800941e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	e002      	b.n	8009424 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800941e:	2380      	movs	r3, #128	; 0x80
 8009420:	015b      	lsls	r3, r3, #5
 8009422:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	23f0      	movs	r3, #240	; 0xf0
 800942a:	011b      	lsls	r3, r3, #4
 800942c:	429a      	cmp	r2, r3
 800942e:	d008      	beq.n	8009442 <HAL_SPI_Init+0xaa>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	23e0      	movs	r3, #224	; 0xe0
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	429a      	cmp	r2, r3
 800943a:	d002      	beq.n	8009442 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	2382      	movs	r3, #130	; 0x82
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	401a      	ands	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6899      	ldr	r1, [r3, #8]
 8009450:	2384      	movs	r3, #132	; 0x84
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	400b      	ands	r3, r1
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	2102      	movs	r1, #2
 800945e:	400b      	ands	r3, r1
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	2101      	movs	r1, #1
 8009468:	400b      	ands	r3, r1
 800946a:	431a      	orrs	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6999      	ldr	r1, [r3, #24]
 8009470:	2380      	movs	r3, #128	; 0x80
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	400b      	ands	r3, r1
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	2138      	movs	r1, #56	; 0x38
 800947e:	400b      	ands	r3, r1
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	2180      	movs	r1, #128	; 0x80
 8009488:	400b      	ands	r3, r1
 800948a:	431a      	orrs	r2, r3
 800948c:	0011      	movs	r1, r2
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009492:	2380      	movs	r3, #128	; 0x80
 8009494:	019b      	lsls	r3, r3, #6
 8009496:	401a      	ands	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	0c1b      	lsrs	r3, r3, #16
 80094a6:	2204      	movs	r2, #4
 80094a8:	401a      	ands	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2110      	movs	r1, #16
 80094b0:	400b      	ands	r3, r1
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b8:	2108      	movs	r1, #8
 80094ba:	400b      	ands	r3, r1
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68d9      	ldr	r1, [r3, #12]
 80094c2:	23f0      	movs	r3, #240	; 0xf0
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	400b      	ands	r3, r1
 80094c8:	431a      	orrs	r2, r3
 80094ca:	0011      	movs	r1, r2
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	2380      	movs	r3, #128	; 0x80
 80094d0:	015b      	lsls	r3, r3, #5
 80094d2:	401a      	ands	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	430a      	orrs	r2, r1
 80094da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69da      	ldr	r2, [r3, #28]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4907      	ldr	r1, [pc, #28]	; (8009504 <HAL_SPI_Init+0x16c>)
 80094e8:	400a      	ands	r2, r1
 80094ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	225d      	movs	r2, #93	; 0x5d
 80094f6:	2101      	movs	r1, #1
 80094f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	0018      	movs	r0, r3
 80094fe:	46bd      	mov	sp, r7
 8009500:	b004      	add	sp, #16
 8009502:	bd80      	pop	{r7, pc}
 8009504:	fffff7ff 	.word	0xfffff7ff

08009508 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	603b      	str	r3, [r7, #0]
 8009514:	1dbb      	adds	r3, r7, #6
 8009516:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009518:	231f      	movs	r3, #31
 800951a:	18fb      	adds	r3, r7, r3
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	225c      	movs	r2, #92	; 0x5c
 8009524:	5c9b      	ldrb	r3, [r3, r2]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_SPI_Transmit+0x26>
 800952a:	2302      	movs	r3, #2
 800952c:	e140      	b.n	80097b0 <HAL_SPI_Transmit+0x2a8>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	225c      	movs	r2, #92	; 0x5c
 8009532:	2101      	movs	r1, #1
 8009534:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009536:	f7fd fd23 	bl	8006f80 <HAL_GetTick>
 800953a:	0003      	movs	r3, r0
 800953c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800953e:	2316      	movs	r3, #22
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	1dba      	adds	r2, r7, #6
 8009544:	8812      	ldrh	r2, [r2, #0]
 8009546:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	225d      	movs	r2, #93	; 0x5d
 800954c:	5c9b      	ldrb	r3, [r3, r2]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b01      	cmp	r3, #1
 8009552:	d004      	beq.n	800955e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009554:	231f      	movs	r3, #31
 8009556:	18fb      	adds	r3, r7, r3
 8009558:	2202      	movs	r2, #2
 800955a:	701a      	strb	r2, [r3, #0]
    goto error;
 800955c:	e11d      	b.n	800979a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_SPI_Transmit+0x64>
 8009564:	1dbb      	adds	r3, r7, #6
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d104      	bne.n	8009576 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800956c:	231f      	movs	r3, #31
 800956e:	18fb      	adds	r3, r7, r3
 8009570:	2201      	movs	r2, #1
 8009572:	701a      	strb	r2, [r3, #0]
    goto error;
 8009574:	e111      	b.n	800979a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	225d      	movs	r2, #93	; 0x5d
 800957a:	2103      	movs	r1, #3
 800957c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1dba      	adds	r2, r7, #6
 800958e:	8812      	ldrh	r2, [r2, #0]
 8009590:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	1dba      	adds	r2, r7, #6
 8009596:	8812      	ldrh	r2, [r2, #0]
 8009598:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2244      	movs	r2, #68	; 0x44
 80095a4:	2100      	movs	r1, #0
 80095a6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2246      	movs	r2, #70	; 0x46
 80095ac:	2100      	movs	r1, #0
 80095ae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	2380      	movs	r3, #128	; 0x80
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d110      	bne.n	80095ea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2140      	movs	r1, #64	; 0x40
 80095d4:	438a      	bics	r2, r1
 80095d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2180      	movs	r1, #128	; 0x80
 80095e4:	01c9      	lsls	r1, r1, #7
 80095e6:	430a      	orrs	r2, r1
 80095e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2240      	movs	r2, #64	; 0x40
 80095f2:	4013      	ands	r3, r2
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d007      	beq.n	8009608 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2140      	movs	r1, #64	; 0x40
 8009604:	430a      	orrs	r2, r1
 8009606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	23e0      	movs	r3, #224	; 0xe0
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	429a      	cmp	r2, r3
 8009612:	d94e      	bls.n	80096b2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <HAL_SPI_Transmit+0x11e>
 800961c:	2316      	movs	r3, #22
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d13f      	bne.n	80096a6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962a:	881a      	ldrh	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009636:	1c9a      	adds	r2, r3, #2
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800964a:	e02c      	b.n	80096a6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2202      	movs	r2, #2
 8009654:	4013      	ands	r3, r2
 8009656:	2b02      	cmp	r3, #2
 8009658:	d112      	bne.n	8009680 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965e:	881a      	ldrh	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966a:	1c9a      	adds	r2, r3, #2
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009674:	b29b      	uxth	r3, r3
 8009676:	3b01      	subs	r3, #1
 8009678:	b29a      	uxth	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800967e:	e012      	b.n	80096a6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009680:	f7fd fc7e 	bl	8006f80 <HAL_GetTick>
 8009684:	0002      	movs	r2, r0
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	d802      	bhi.n	8009696 <HAL_SPI_Transmit+0x18e>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	d102      	bne.n	800969c <HAL_SPI_Transmit+0x194>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800969c:	231f      	movs	r3, #31
 800969e:	18fb      	adds	r3, r7, r3
 80096a0:	2203      	movs	r2, #3
 80096a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80096a4:	e079      	b.n	800979a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1cd      	bne.n	800964c <HAL_SPI_Transmit+0x144>
 80096b0:	e04f      	b.n	8009752 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d004      	beq.n	80096c4 <HAL_SPI_Transmit+0x1bc>
 80096ba:	2316      	movs	r3, #22
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d141      	bne.n	8009748 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80096ea:	e02d      	b.n	8009748 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	2202      	movs	r2, #2
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d113      	bne.n	8009722 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	330c      	adds	r3, #12
 8009704:	7812      	ldrb	r2, [r2, #0]
 8009706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009720:	e012      	b.n	8009748 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009722:	f7fd fc2d 	bl	8006f80 <HAL_GetTick>
 8009726:	0002      	movs	r2, r0
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d802      	bhi.n	8009738 <HAL_SPI_Transmit+0x230>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	d102      	bne.n	800973e <HAL_SPI_Transmit+0x236>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d104      	bne.n	8009748 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800973e:	231f      	movs	r3, #31
 8009740:	18fb      	adds	r3, r7, r3
 8009742:	2203      	movs	r2, #3
 8009744:	701a      	strb	r2, [r3, #0]
          goto error;
 8009746:	e028      	b.n	800979a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1cc      	bne.n	80096ec <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	0018      	movs	r0, r3
 800975a:	f000 ff95 	bl	800a688 <SPI_EndRxTxTransaction>
 800975e:	1e03      	subs	r3, r0, #0
 8009760:	d002      	beq.n	8009768 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2220      	movs	r2, #32
 8009766:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009770:	2300      	movs	r3, #0
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	613b      	str	r3, [r7, #16]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	613b      	str	r3, [r7, #16]
 8009784:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800978e:	231f      	movs	r3, #31
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	2201      	movs	r2, #1
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	e000      	b.n	800979a <HAL_SPI_Transmit+0x292>
  }

error:
 8009798:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	225d      	movs	r2, #93	; 0x5d
 800979e:	2101      	movs	r1, #1
 80097a0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	225c      	movs	r2, #92	; 0x5c
 80097a6:	2100      	movs	r1, #0
 80097a8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80097aa:	231f      	movs	r3, #31
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	781b      	ldrb	r3, [r3, #0]
}
 80097b0:	0018      	movs	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b008      	add	sp, #32
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097b8:	b590      	push	{r4, r7, lr}
 80097ba:	b089      	sub	sp, #36	; 0x24
 80097bc:	af02      	add	r7, sp, #8
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	1dbb      	adds	r3, r7, #6
 80097c6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097c8:	2317      	movs	r3, #23
 80097ca:	18fb      	adds	r3, r7, r3
 80097cc:	2200      	movs	r2, #0
 80097ce:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	2382      	movs	r3, #130	; 0x82
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	429a      	cmp	r2, r3
 80097da:	d113      	bne.n	8009804 <HAL_SPI_Receive+0x4c>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10f      	bne.n	8009804 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	225d      	movs	r2, #93	; 0x5d
 80097e8:	2104      	movs	r1, #4
 80097ea:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097ec:	1dbb      	adds	r3, r7, #6
 80097ee:	881c      	ldrh	r4, [r3, #0]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	0023      	movs	r3, r4
 80097fc:	f000 f928 	bl	8009a50 <HAL_SPI_TransmitReceive>
 8009800:	0003      	movs	r3, r0
 8009802:	e11c      	b.n	8009a3e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	225c      	movs	r2, #92	; 0x5c
 8009808:	5c9b      	ldrb	r3, [r3, r2]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d101      	bne.n	8009812 <HAL_SPI_Receive+0x5a>
 800980e:	2302      	movs	r3, #2
 8009810:	e115      	b.n	8009a3e <HAL_SPI_Receive+0x286>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	225c      	movs	r2, #92	; 0x5c
 8009816:	2101      	movs	r1, #1
 8009818:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800981a:	f7fd fbb1 	bl	8006f80 <HAL_GetTick>
 800981e:	0003      	movs	r3, r0
 8009820:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	225d      	movs	r2, #93	; 0x5d
 8009826:	5c9b      	ldrb	r3, [r3, r2]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b01      	cmp	r3, #1
 800982c:	d004      	beq.n	8009838 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800982e:	2317      	movs	r3, #23
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	2202      	movs	r2, #2
 8009834:	701a      	strb	r2, [r3, #0]
    goto error;
 8009836:	e0f7      	b.n	8009a28 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <HAL_SPI_Receive+0x8e>
 800983e:	1dbb      	adds	r3, r7, #6
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d104      	bne.n	8009850 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8009846:	2317      	movs	r3, #23
 8009848:	18fb      	adds	r3, r7, r3
 800984a:	2201      	movs	r2, #1
 800984c:	701a      	strb	r2, [r3, #0]
    goto error;
 800984e:	e0eb      	b.n	8009a28 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	225d      	movs	r2, #93	; 0x5d
 8009854:	2104      	movs	r1, #4
 8009856:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	1dba      	adds	r2, r7, #6
 8009868:	2144      	movs	r1, #68	; 0x44
 800986a:	8812      	ldrh	r2, [r2, #0]
 800986c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1dba      	adds	r2, r7, #6
 8009872:	2146      	movs	r1, #70	; 0x46
 8009874:	8812      	ldrh	r2, [r2, #0]
 8009876:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	68da      	ldr	r2, [r3, #12]
 800989a:	23e0      	movs	r3, #224	; 0xe0
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	429a      	cmp	r2, r3
 80098a0:	d908      	bls.n	80098b4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4966      	ldr	r1, [pc, #408]	; (8009a48 <HAL_SPI_Receive+0x290>)
 80098ae:	400a      	ands	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
 80098b2:	e008      	b.n	80098c6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2180      	movs	r1, #128	; 0x80
 80098c0:	0149      	lsls	r1, r1, #5
 80098c2:	430a      	orrs	r2, r1
 80098c4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	2380      	movs	r3, #128	; 0x80
 80098cc:	021b      	lsls	r3, r3, #8
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d10f      	bne.n	80098f2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2140      	movs	r1, #64	; 0x40
 80098de:	438a      	bics	r2, r1
 80098e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4957      	ldr	r1, [pc, #348]	; (8009a4c <HAL_SPI_Receive+0x294>)
 80098ee:	400a      	ands	r2, r1
 80098f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2240      	movs	r2, #64	; 0x40
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b40      	cmp	r3, #64	; 0x40
 80098fe:	d007      	beq.n	8009910 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2140      	movs	r1, #64	; 0x40
 800990c:	430a      	orrs	r2, r1
 800990e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	23e0      	movs	r3, #224	; 0xe0
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	429a      	cmp	r2, r3
 800991a:	d900      	bls.n	800991e <HAL_SPI_Receive+0x166>
 800991c:	e069      	b.n	80099f2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800991e:	e031      	b.n	8009984 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	2201      	movs	r2, #1
 8009928:	4013      	ands	r3, r2
 800992a:	2b01      	cmp	r3, #1
 800992c:	d117      	bne.n	800995e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	330c      	adds	r3, #12
 8009934:	001a      	movs	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993a:	7812      	ldrb	r2, [r2, #0]
 800993c:	b2d2      	uxtb	r2, r2
 800993e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2246      	movs	r2, #70	; 0x46
 800994e:	5a9b      	ldrh	r3, [r3, r2]
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	b299      	uxth	r1, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2246      	movs	r2, #70	; 0x46
 800995a:	5299      	strh	r1, [r3, r2]
 800995c:	e012      	b.n	8009984 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800995e:	f7fd fb0f 	bl	8006f80 <HAL_GetTick>
 8009962:	0002      	movs	r2, r0
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	429a      	cmp	r2, r3
 800996c:	d802      	bhi.n	8009974 <HAL_SPI_Receive+0x1bc>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	3301      	adds	r3, #1
 8009972:	d102      	bne.n	800997a <HAL_SPI_Receive+0x1c2>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d104      	bne.n	8009984 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800997a:	2317      	movs	r3, #23
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	2203      	movs	r2, #3
 8009980:	701a      	strb	r2, [r3, #0]
          goto error;
 8009982:	e051      	b.n	8009a28 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2246      	movs	r2, #70	; 0x46
 8009988:	5a9b      	ldrh	r3, [r3, r2]
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1c7      	bne.n	8009920 <HAL_SPI_Receive+0x168>
 8009990:	e035      	b.n	80099fe <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2201      	movs	r2, #1
 800999a:	4013      	ands	r3, r2
 800999c:	2b01      	cmp	r3, #1
 800999e:	d115      	bne.n	80099cc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	b292      	uxth	r2, r2
 80099ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	1c9a      	adds	r2, r3, #2
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2246      	movs	r2, #70	; 0x46
 80099bc:	5a9b      	ldrh	r3, [r3, r2]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b299      	uxth	r1, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2246      	movs	r2, #70	; 0x46
 80099c8:	5299      	strh	r1, [r3, r2]
 80099ca:	e012      	b.n	80099f2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099cc:	f7fd fad8 	bl	8006f80 <HAL_GetTick>
 80099d0:	0002      	movs	r2, r0
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d802      	bhi.n	80099e2 <HAL_SPI_Receive+0x22a>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	3301      	adds	r3, #1
 80099e0:	d102      	bne.n	80099e8 <HAL_SPI_Receive+0x230>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80099e8:	2317      	movs	r3, #23
 80099ea:	18fb      	adds	r3, r7, r3
 80099ec:	2203      	movs	r2, #3
 80099ee:	701a      	strb	r2, [r3, #0]
          goto error;
 80099f0:	e01a      	b.n	8009a28 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2246      	movs	r2, #70	; 0x46
 80099f6:	5a9b      	ldrh	r3, [r3, r2]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1c9      	bne.n	8009992 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	0018      	movs	r0, r3
 8009a06:	f000 fde1 	bl	800a5cc <SPI_EndRxTransaction>
 8009a0a:	1e03      	subs	r3, r0, #0
 8009a0c:	d002      	beq.n	8009a14 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2220      	movs	r2, #32
 8009a12:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d004      	beq.n	8009a26 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009a1c:	2317      	movs	r3, #23
 8009a1e:	18fb      	adds	r3, r7, r3
 8009a20:	2201      	movs	r2, #1
 8009a22:	701a      	strb	r2, [r3, #0]
 8009a24:	e000      	b.n	8009a28 <HAL_SPI_Receive+0x270>
  }

error :
 8009a26:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	225d      	movs	r2, #93	; 0x5d
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	225c      	movs	r2, #92	; 0x5c
 8009a34:	2100      	movs	r1, #0
 8009a36:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009a38:	2317      	movs	r3, #23
 8009a3a:	18fb      	adds	r3, r7, r3
 8009a3c:	781b      	ldrb	r3, [r3, #0]
}
 8009a3e:	0018      	movs	r0, r3
 8009a40:	46bd      	mov	sp, r7
 8009a42:	b007      	add	sp, #28
 8009a44:	bd90      	pop	{r4, r7, pc}
 8009a46:	46c0      	nop			; (mov r8, r8)
 8009a48:	ffffefff 	.word	0xffffefff
 8009a4c:	ffffbfff 	.word	0xffffbfff

08009a50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	001a      	movs	r2, r3
 8009a5e:	1cbb      	adds	r3, r7, #2
 8009a60:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009a62:	2301      	movs	r3, #1
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009a66:	2323      	movs	r3, #35	; 0x23
 8009a68:	18fb      	adds	r3, r7, r3
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	225c      	movs	r2, #92	; 0x5c
 8009a72:	5c9b      	ldrb	r3, [r3, r2]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d101      	bne.n	8009a7c <HAL_SPI_TransmitReceive+0x2c>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e1b5      	b.n	8009de8 <HAL_SPI_TransmitReceive+0x398>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	225c      	movs	r2, #92	; 0x5c
 8009a80:	2101      	movs	r1, #1
 8009a82:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a84:	f7fd fa7c 	bl	8006f80 <HAL_GetTick>
 8009a88:	0003      	movs	r3, r0
 8009a8a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a8c:	201b      	movs	r0, #27
 8009a8e:	183b      	adds	r3, r7, r0
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	215d      	movs	r1, #93	; 0x5d
 8009a94:	5c52      	ldrb	r2, [r2, r1]
 8009a96:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009a9e:	2312      	movs	r3, #18
 8009aa0:	18fb      	adds	r3, r7, r3
 8009aa2:	1cba      	adds	r2, r7, #2
 8009aa4:	8812      	ldrh	r2, [r2, #0]
 8009aa6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009aa8:	183b      	adds	r3, r7, r0
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d011      	beq.n	8009ad4 <HAL_SPI_TransmitReceive+0x84>
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	2382      	movs	r3, #130	; 0x82
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d107      	bne.n	8009aca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d103      	bne.n	8009aca <HAL_SPI_TransmitReceive+0x7a>
 8009ac2:	183b      	adds	r3, r7, r0
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d004      	beq.n	8009ad4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009aca:	2323      	movs	r3, #35	; 0x23
 8009acc:	18fb      	adds	r3, r7, r3
 8009ace:	2202      	movs	r2, #2
 8009ad0:	701a      	strb	r2, [r3, #0]
    goto error;
 8009ad2:	e17e      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d006      	beq.n	8009ae8 <HAL_SPI_TransmitReceive+0x98>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <HAL_SPI_TransmitReceive+0x98>
 8009ae0:	1cbb      	adds	r3, r7, #2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009ae8:	2323      	movs	r3, #35	; 0x23
 8009aea:	18fb      	adds	r3, r7, r3
 8009aec:	2201      	movs	r2, #1
 8009aee:	701a      	strb	r2, [r3, #0]
    goto error;
 8009af0:	e16f      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	225d      	movs	r2, #93	; 0x5d
 8009af6:	5c9b      	ldrb	r3, [r3, r2]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d003      	beq.n	8009b06 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	225d      	movs	r2, #93	; 0x5d
 8009b02:	2105      	movs	r1, #5
 8009b04:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	1cba      	adds	r2, r7, #2
 8009b16:	2146      	movs	r1, #70	; 0x46
 8009b18:	8812      	ldrh	r2, [r2, #0]
 8009b1a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	1cba      	adds	r2, r7, #2
 8009b20:	2144      	movs	r1, #68	; 0x44
 8009b22:	8812      	ldrh	r2, [r2, #0]
 8009b24:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	1cba      	adds	r2, r7, #2
 8009b30:	8812      	ldrh	r2, [r2, #0]
 8009b32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	1cba      	adds	r2, r7, #2
 8009b38:	8812      	ldrh	r2, [r2, #0]
 8009b3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68da      	ldr	r2, [r3, #12]
 8009b4c:	23e0      	movs	r3, #224	; 0xe0
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d908      	bls.n	8009b66 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	49a4      	ldr	r1, [pc, #656]	; (8009df0 <HAL_SPI_TransmitReceive+0x3a0>)
 8009b60:	400a      	ands	r2, r1
 8009b62:	605a      	str	r2, [r3, #4]
 8009b64:	e008      	b.n	8009b78 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2180      	movs	r1, #128	; 0x80
 8009b72:	0149      	lsls	r1, r1, #5
 8009b74:	430a      	orrs	r2, r1
 8009b76:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2240      	movs	r2, #64	; 0x40
 8009b80:	4013      	ands	r3, r2
 8009b82:	2b40      	cmp	r3, #64	; 0x40
 8009b84:	d007      	beq.n	8009b96 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2140      	movs	r1, #64	; 0x40
 8009b92:	430a      	orrs	r2, r1
 8009b94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	23e0      	movs	r3, #224	; 0xe0
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d800      	bhi.n	8009ba4 <HAL_SPI_TransmitReceive+0x154>
 8009ba2:	e07f      	b.n	8009ca4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d005      	beq.n	8009bb8 <HAL_SPI_TransmitReceive+0x168>
 8009bac:	2312      	movs	r3, #18
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d000      	beq.n	8009bb8 <HAL_SPI_TransmitReceive+0x168>
 8009bb6:	e069      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	881a      	ldrh	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc8:	1c9a      	adds	r2, r3, #2
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bdc:	e056      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	2202      	movs	r2, #2
 8009be6:	4013      	ands	r3, r2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d11b      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x1d4>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d016      	beq.n	8009c24 <HAL_SPI_TransmitReceive+0x1d4>
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d113      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	881a      	ldrh	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	1c9a      	adds	r2, r3, #2
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d11c      	bne.n	8009c6c <HAL_SPI_TransmitReceive+0x21c>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2246      	movs	r2, #70	; 0x46
 8009c36:	5a9b      	ldrh	r3, [r3, r2]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d016      	beq.n	8009c6c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68da      	ldr	r2, [r3, #12]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c48:	b292      	uxth	r2, r2
 8009c4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	1c9a      	adds	r2, r3, #2
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2246      	movs	r2, #70	; 0x46
 8009c5a:	5a9b      	ldrh	r3, [r3, r2]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b299      	uxth	r1, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2246      	movs	r2, #70	; 0x46
 8009c66:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c6c:	f7fd f988 	bl	8006f80 <HAL_GetTick>
 8009c70:	0002      	movs	r2, r0
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d807      	bhi.n	8009c8c <HAL_SPI_TransmitReceive+0x23c>
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	3301      	adds	r3, #1
 8009c80:	d004      	beq.n	8009c8c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009c82:	2323      	movs	r3, #35	; 0x23
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	2203      	movs	r2, #3
 8009c88:	701a      	strb	r2, [r3, #0]
        goto error;
 8009c8a:	e0a2      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1a3      	bne.n	8009bde <HAL_SPI_TransmitReceive+0x18e>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2246      	movs	r2, #70	; 0x46
 8009c9a:	5a9b      	ldrh	r3, [r3, r2]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d19d      	bne.n	8009bde <HAL_SPI_TransmitReceive+0x18e>
 8009ca2:	e085      	b.n	8009db0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <HAL_SPI_TransmitReceive+0x268>
 8009cac:	2312      	movs	r3, #18
 8009cae:	18fb      	adds	r3, r7, r3
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d000      	beq.n	8009cb8 <HAL_SPI_TransmitReceive+0x268>
 8009cb6:	e070      	b.n	8009d9a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	7812      	ldrb	r2, [r2, #0]
 8009cc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cde:	e05c      	b.n	8009d9a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	4013      	ands	r3, r2
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d11c      	bne.n	8009d28 <HAL_SPI_TransmitReceive+0x2d8>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d017      	beq.n	8009d28 <HAL_SPI_TransmitReceive+0x2d8>
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d114      	bne.n	8009d28 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	330c      	adds	r3, #12
 8009d08:	7812      	ldrb	r2, [r2, #0]
 8009d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	4013      	ands	r3, r2
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d11e      	bne.n	8009d74 <HAL_SPI_TransmitReceive+0x324>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2246      	movs	r2, #70	; 0x46
 8009d3a:	5a9b      	ldrh	r3, [r3, r2]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d018      	beq.n	8009d74 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	330c      	adds	r3, #12
 8009d48:	001a      	movs	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	b2d2      	uxtb	r2, r2
 8009d52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2246      	movs	r2, #70	; 0x46
 8009d62:	5a9b      	ldrh	r3, [r3, r2]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b299      	uxth	r1, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2246      	movs	r2, #70	; 0x46
 8009d6e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d70:	2301      	movs	r3, #1
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d74:	f7fd f904 	bl	8006f80 <HAL_GetTick>
 8009d78:	0002      	movs	r2, r0
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d802      	bhi.n	8009d8a <HAL_SPI_TransmitReceive+0x33a>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	3301      	adds	r3, #1
 8009d88:	d102      	bne.n	8009d90 <HAL_SPI_TransmitReceive+0x340>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009d90:	2323      	movs	r3, #35	; 0x23
 8009d92:	18fb      	adds	r3, r7, r3
 8009d94:	2203      	movs	r2, #3
 8009d96:	701a      	strb	r2, [r3, #0]
        goto error;
 8009d98:	e01b      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d19d      	bne.n	8009ce0 <HAL_SPI_TransmitReceive+0x290>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2246      	movs	r2, #70	; 0x46
 8009da8:	5a9b      	ldrh	r3, [r3, r2]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d197      	bne.n	8009ce0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	0018      	movs	r0, r3
 8009db8:	f000 fc66 	bl	800a688 <SPI_EndRxTxTransaction>
 8009dbc:	1e03      	subs	r3, r0, #0
 8009dbe:	d007      	beq.n	8009dd0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009dc0:	2323      	movs	r3, #35	; 0x23
 8009dc2:	18fb      	adds	r3, r7, r3
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8009dce:	e000      	b.n	8009dd2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009dd0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	225d      	movs	r2, #93	; 0x5d
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	225c      	movs	r2, #92	; 0x5c
 8009dde:	2100      	movs	r1, #0
 8009de0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009de2:	2323      	movs	r3, #35	; 0x23
 8009de4:	18fb      	adds	r3, r7, r3
 8009de6:	781b      	ldrb	r3, [r3, #0]
}
 8009de8:	0018      	movs	r0, r3
 8009dea:	46bd      	mov	sp, r7
 8009dec:	b00a      	add	sp, #40	; 0x28
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	ffffefff 	.word	0xffffefff

08009df4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009df4:	b590      	push	{r4, r7, lr}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	001a      	movs	r2, r3
 8009e02:	1cbb      	adds	r3, r7, #2
 8009e04:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e06:	2317      	movs	r3, #23
 8009e08:	18fb      	adds	r3, r7, r3
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	225c      	movs	r2, #92	; 0x5c
 8009e12:	5c9b      	ldrb	r3, [r3, r2]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_SPI_TransmitReceive_DMA+0x28>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e186      	b.n	800a12a <HAL_SPI_TransmitReceive_DMA+0x336>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	225c      	movs	r2, #92	; 0x5c
 8009e20:	2101      	movs	r1, #1
 8009e22:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e24:	2016      	movs	r0, #22
 8009e26:	183b      	adds	r3, r7, r0
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	215d      	movs	r1, #93	; 0x5d
 8009e2c:	5c52      	ldrb	r2, [r2, r1]
 8009e2e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009e36:	0001      	movs	r1, r0
 8009e38:	187b      	adds	r3, r7, r1
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d011      	beq.n	8009e64 <HAL_SPI_TransmitReceive_DMA+0x70>
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	2382      	movs	r3, #130	; 0x82
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d107      	bne.n	8009e5a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d103      	bne.n	8009e5a <HAL_SPI_TransmitReceive_DMA+0x66>
 8009e52:	187b      	adds	r3, r7, r1
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d004      	beq.n	8009e64 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8009e5a:	2317      	movs	r3, #23
 8009e5c:	18fb      	adds	r3, r7, r3
 8009e5e:	2202      	movs	r2, #2
 8009e60:	701a      	strb	r2, [r3, #0]
    goto error;
 8009e62:	e15b      	b.n	800a11c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d006      	beq.n	8009e78 <HAL_SPI_TransmitReceive_DMA+0x84>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <HAL_SPI_TransmitReceive_DMA+0x84>
 8009e70:	1cbb      	adds	r3, r7, #2
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d104      	bne.n	8009e82 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8009e78:	2317      	movs	r3, #23
 8009e7a:	18fb      	adds	r3, r7, r3
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009e80:	e14c      	b.n	800a11c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	225d      	movs	r2, #93	; 0x5d
 8009e86:	5c9b      	ldrb	r3, [r3, r2]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d003      	beq.n	8009e96 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	225d      	movs	r2, #93	; 0x5d
 8009e92:	2105      	movs	r1, #5
 8009e94:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1cba      	adds	r2, r7, #2
 8009ea6:	8812      	ldrh	r2, [r2, #0]
 8009ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	1cba      	adds	r2, r7, #2
 8009eae:	8812      	ldrh	r2, [r2, #0]
 8009eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	1cba      	adds	r2, r7, #2
 8009ebc:	2144      	movs	r1, #68	; 0x44
 8009ebe:	8812      	ldrh	r2, [r2, #0]
 8009ec0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1cba      	adds	r2, r7, #2
 8009ec6:	2146      	movs	r1, #70	; 0x46
 8009ec8:	8812      	ldrh	r2, [r2, #0]
 8009eca:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4994      	ldr	r1, [pc, #592]	; (800a134 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8009ee4:	400a      	ands	r2, r1
 8009ee6:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	23e0      	movs	r3, #224	; 0xe0
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d908      	bls.n	8009f06 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	498e      	ldr	r1, [pc, #568]	; (800a138 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8009f00:	400a      	ands	r2, r1
 8009f02:	605a      	str	r2, [r3, #4]
 8009f04:	e074      	b.n	8009ff0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2180      	movs	r1, #128	; 0x80
 8009f12:	0149      	lsls	r1, r1, #5
 8009f14:	430a      	orrs	r2, r1
 8009f16:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1c:	699a      	ldr	r2, [r3, #24]
 8009f1e:	2380      	movs	r3, #128	; 0x80
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d127      	bne.n	8009f76 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009f2a:	001a      	movs	r2, r3
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4013      	ands	r3, r2
 8009f30:	d10f      	bne.n	8009f52 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	497f      	ldr	r1, [pc, #508]	; (800a13c <HAL_SPI_TransmitReceive_DMA+0x348>)
 8009f3e:	400a      	ands	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	085b      	lsrs	r3, r3, #1
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f50:	e011      	b.n	8009f76 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2180      	movs	r1, #128	; 0x80
 8009f5e:	01c9      	lsls	r1, r1, #7
 8009f60:	430a      	orrs	r2, r1
 8009f62:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3301      	adds	r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	2380      	movs	r3, #128	; 0x80
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d135      	bne.n	8009ff0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	496a      	ldr	r1, [pc, #424]	; (800a138 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8009f90:	400a      	ands	r2, r1
 8009f92:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2246      	movs	r2, #70	; 0x46
 8009f98:	5a9b      	ldrh	r3, [r3, r2]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	001a      	movs	r2, r3
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	d111      	bne.n	8009fc8 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4964      	ldr	r1, [pc, #400]	; (800a140 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8009fb0:	400a      	ands	r2, r1
 8009fb2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2246      	movs	r2, #70	; 0x46
 8009fb8:	5a9b      	ldrh	r3, [r3, r2]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	b299      	uxth	r1, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2246      	movs	r2, #70	; 0x46
 8009fc4:	5299      	strh	r1, [r3, r2]
 8009fc6:	e013      	b.n	8009ff0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2180      	movs	r1, #128	; 0x80
 8009fd4:	0189      	lsls	r1, r1, #6
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2246      	movs	r2, #70	; 0x46
 8009fde:	5a9b      	ldrh	r3, [r3, r2]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	085b      	lsrs	r3, r3, #1
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	b299      	uxth	r1, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2246      	movs	r2, #70	; 0x46
 8009fee:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	225d      	movs	r2, #93	; 0x5d
 8009ff4:	5c9b      	ldrb	r3, [r3, r2]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d108      	bne.n	800a00e <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a000:	4a50      	ldr	r2, [pc, #320]	; (800a144 <HAL_SPI_TransmitReceive_DMA+0x350>)
 800a002:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a008:	4a4f      	ldr	r2, [pc, #316]	; (800a148 <HAL_SPI_TransmitReceive_DMA+0x354>)
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a00c:	e007      	b.n	800a01e <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a012:	4a4e      	ldr	r2, [pc, #312]	; (800a14c <HAL_SPI_TransmitReceive_DMA+0x358>)
 800a014:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01a:	4a4d      	ldr	r2, [pc, #308]	; (800a150 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800a01c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a022:	4a4c      	ldr	r2, [pc, #304]	; (800a154 <HAL_SPI_TransmitReceive_DMA+0x360>)
 800a024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a02a:	2200      	movs	r2, #0
 800a02c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	330c      	adds	r3, #12
 800a038:	0019      	movs	r1, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2246      	movs	r2, #70	; 0x46
 800a044:	5a9b      	ldrh	r3, [r3, r2]
 800a046:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a048:	0022      	movs	r2, r4
 800a04a:	f7fd f977 	bl	800733c <HAL_DMA_Start_IT>
 800a04e:	1e03      	subs	r3, r0, #0
 800a050:	d00e      	beq.n	800a070 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a056:	2210      	movs	r2, #16
 800a058:	431a      	orrs	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a05e:	2317      	movs	r3, #23
 800a060:	18fb      	adds	r3, r7, r3
 800a062:	2201      	movs	r2, #1
 800a064:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	225d      	movs	r2, #93	; 0x5d
 800a06a:	2101      	movs	r1, #1
 800a06c:	5499      	strb	r1, [r3, r2]
    goto error;
 800a06e:	e055      	b.n	800a11c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2101      	movs	r1, #1
 800a07c:	430a      	orrs	r2, r1
 800a07e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a084:	2200      	movs	r2, #0
 800a086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08c:	2200      	movs	r2, #0
 800a08e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a094:	2200      	movs	r2, #0
 800a096:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a09c:	2200      	movs	r2, #0
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	0019      	movs	r1, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	330c      	adds	r3, #12
 800a0b0:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a0b8:	f7fd f940 	bl	800733c <HAL_DMA_Start_IT>
 800a0bc:	1e03      	subs	r3, r0, #0
 800a0be:	d00e      	beq.n	800a0de <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0c4:	2210      	movs	r2, #16
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a0cc:	2317      	movs	r3, #23
 800a0ce:	18fb      	adds	r3, r7, r3
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	225d      	movs	r2, #93	; 0x5d
 800a0d8:	2101      	movs	r1, #1
 800a0da:	5499      	strb	r1, [r3, r2]
    goto error;
 800a0dc:	e01e      	b.n	800a11c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2240      	movs	r2, #64	; 0x40
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d007      	beq.n	800a0fc <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2140      	movs	r1, #64	; 0x40
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2120      	movs	r1, #32
 800a108:	430a      	orrs	r2, r1
 800a10a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2102      	movs	r1, #2
 800a118:	430a      	orrs	r2, r1
 800a11a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	225c      	movs	r2, #92	; 0x5c
 800a120:	2100      	movs	r1, #0
 800a122:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a124:	2317      	movs	r3, #23
 800a126:	18fb      	adds	r3, r7, r3
 800a128:	781b      	ldrb	r3, [r3, #0]
}
 800a12a:	0018      	movs	r0, r3
 800a12c:	46bd      	mov	sp, r7
 800a12e:	b007      	add	sp, #28
 800a130:	bd90      	pop	{r4, r7, pc}
 800a132:	46c0      	nop			; (mov r8, r8)
 800a134:	ffff9fff 	.word	0xffff9fff
 800a138:	ffffefff 	.word	0xffffefff
 800a13c:	ffffbfff 	.word	0xffffbfff
 800a140:	ffffdfff 	.word	0xffffdfff
 800a144:	0800a2ef 	.word	0x0800a2ef
 800a148:	0800a1a9 	.word	0x0800a1a9
 800a14c:	0800a30d 	.word	0x0800a30d
 800a150:	0800a259 	.word	0x0800a259
 800a154:	0800a32b 	.word	0x0800a32b

0800a158 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a160:	46c0      	nop			; (mov r8, r8)
 800a162:	46bd      	mov	sp, r7
 800a164:	b002      	add	sp, #8
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a170:	46c0      	nop			; (mov r8, r8)
 800a172:	46bd      	mov	sp, r7
 800a174:	b002      	add	sp, #8
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a180:	46c0      	nop			; (mov r8, r8)
 800a182:	46bd      	mov	sp, r7
 800a184:	b002      	add	sp, #8
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a190:	46c0      	nop			; (mov r8, r8)
 800a192:	46bd      	mov	sp, r7
 800a194:	b002      	add	sp, #8
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a1a0:	46c0      	nop			; (mov r8, r8)
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b002      	add	sp, #8
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1b6:	f7fc fee3 	bl	8006f80 <HAL_GetTick>
 800a1ba:	0003      	movs	r3, r0
 800a1bc:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d03e      	beq.n	800a24a <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2120      	movs	r1, #32
 800a1d8:	438a      	bics	r2, r1
 800a1da:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10e      	bne.n	800a202 <SPI_DMAReceiveCplt+0x5a>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	2382      	movs	r3, #130	; 0x82
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d108      	bne.n	800a202 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2103      	movs	r1, #3
 800a1fc:	438a      	bics	r2, r1
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	e007      	b.n	800a212 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2101      	movs	r1, #1
 800a20e:	438a      	bics	r2, r1
 800a210:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2164      	movs	r1, #100	; 0x64
 800a218:	0018      	movs	r0, r3
 800a21a:	f000 f9d7 	bl	800a5cc <SPI_EndRxTransaction>
 800a21e:	1e03      	subs	r3, r0, #0
 800a220:	d002      	beq.n	800a228 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2220      	movs	r2, #32
 800a226:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2246      	movs	r2, #70	; 0x46
 800a22c:	2100      	movs	r1, #0
 800a22e:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	225d      	movs	r2, #93	; 0x5d
 800a234:	2101      	movs	r1, #1
 800a236:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d004      	beq.n	800a24a <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	0018      	movs	r0, r3
 800a244:	f7ff ffa8 	bl	800a198 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a248:	e003      	b.n	800a252 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f7ff ff83 	bl	800a158 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a252:	46bd      	mov	sp, r7
 800a254:	b004      	add	sp, #16
 800a256:	bd80      	pop	{r7, pc}

0800a258 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a266:	f7fc fe8b 	bl	8006f80 <HAL_GetTick>
 800a26a:	0003      	movs	r3, r0
 800a26c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2220      	movs	r2, #32
 800a276:	4013      	ands	r3, r2
 800a278:	2b20      	cmp	r3, #32
 800a27a:	d031      	beq.n	800a2e0 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2120      	movs	r1, #32
 800a288:	438a      	bics	r2, r1
 800a28a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2164      	movs	r1, #100	; 0x64
 800a292:	0018      	movs	r0, r3
 800a294:	f000 f9f8 	bl	800a688 <SPI_EndRxTxTransaction>
 800a298:	1e03      	subs	r3, r0, #0
 800a29a:	d005      	beq.n	800a2a8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2103      	movs	r1, #3
 800a2b4:	438a      	bics	r2, r1
 800a2b6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2246      	movs	r2, #70	; 0x46
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	225d      	movs	r2, #93	; 0x5d
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d004      	beq.n	800a2e0 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f7ff ff5d 	bl	800a198 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a2de:	e003      	b.n	800a2e8 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f7ff ff40 	bl	800a168 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b004      	add	sp, #16
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	0018      	movs	r0, r3
 800a300:	f7ff ff3a 	bl	800a178 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a304:	46c0      	nop			; (mov r8, r8)
 800a306:	46bd      	mov	sp, r7
 800a308:	b004      	add	sp, #16
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a318:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	0018      	movs	r0, r3
 800a31e:	f7ff ff33 	bl	800a188 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a322:	46c0      	nop			; (mov r8, r8)
 800a324:	46bd      	mov	sp, r7
 800a326:	b004      	add	sp, #16
 800a328:	bd80      	pop	{r7, pc}

0800a32a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2103      	movs	r1, #3
 800a344:	438a      	bics	r2, r1
 800a346:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a34c:	2210      	movs	r2, #16
 800a34e:	431a      	orrs	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	225d      	movs	r2, #93	; 0x5d
 800a358:	2101      	movs	r1, #1
 800a35a:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	0018      	movs	r0, r3
 800a360:	f7ff ff1a 	bl	800a198 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a364:	46c0      	nop			; (mov r8, r8)
 800a366:	46bd      	mov	sp, r7
 800a368:	b004      	add	sp, #16
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	1dfb      	adds	r3, r7, #7
 800a37a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a37c:	f7fc fe00 	bl	8006f80 <HAL_GetTick>
 800a380:	0002      	movs	r2, r0
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	18d3      	adds	r3, r2, r3
 800a38a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a38c:	f7fc fdf8 	bl	8006f80 <HAL_GetTick>
 800a390:	0003      	movs	r3, r0
 800a392:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a394:	4b3a      	ldr	r3, [pc, #232]	; (800a480 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	015b      	lsls	r3, r3, #5
 800a39a:	0d1b      	lsrs	r3, r3, #20
 800a39c:	69fa      	ldr	r2, [r7, #28]
 800a39e:	4353      	muls	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3a2:	e058      	b.n	800a456 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	d055      	beq.n	800a456 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3aa:	f7fc fde9 	bl	8006f80 <HAL_GetTick>
 800a3ae:	0002      	movs	r2, r0
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	69fa      	ldr	r2, [r7, #28]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d902      	bls.n	800a3c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d142      	bne.n	800a446 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685a      	ldr	r2, [r3, #4]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	21e0      	movs	r1, #224	; 0xe0
 800a3cc:	438a      	bics	r2, r1
 800a3ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	2382      	movs	r3, #130	; 0x82
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d113      	bne.n	800a404 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	2380      	movs	r3, #128	; 0x80
 800a3e2:	021b      	lsls	r3, r3, #8
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d005      	beq.n	800a3f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	2380      	movs	r3, #128	; 0x80
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d107      	bne.n	800a404 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2140      	movs	r1, #64	; 0x40
 800a400:	438a      	bics	r2, r1
 800a402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a408:	2380      	movs	r3, #128	; 0x80
 800a40a:	019b      	lsls	r3, r3, #6
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d110      	bne.n	800a432 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	491a      	ldr	r1, [pc, #104]	; (800a484 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a41c:	400a      	ands	r2, r1
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2180      	movs	r1, #128	; 0x80
 800a42c:	0189      	lsls	r1, r1, #6
 800a42e:	430a      	orrs	r2, r1
 800a430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	225d      	movs	r2, #93	; 0x5d
 800a436:	2101      	movs	r1, #1
 800a438:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	225c      	movs	r2, #92	; 0x5c
 800a43e:	2100      	movs	r1, #0
 800a440:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e017      	b.n	800a476 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	3b01      	subs	r3, #1
 800a454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	4013      	ands	r3, r2
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	425a      	negs	r2, r3
 800a466:	4153      	adcs	r3, r2
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	001a      	movs	r2, r3
 800a46c:	1dfb      	adds	r3, r7, #7
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d197      	bne.n	800a3a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	0018      	movs	r0, r3
 800a478:	46bd      	mov	sp, r7
 800a47a:	b008      	add	sp, #32
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	20000000 	.word	0x20000000
 800a484:	ffffdfff 	.word	0xffffdfff

0800a488 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a496:	2317      	movs	r3, #23
 800a498:	18fb      	adds	r3, r7, r3
 800a49a:	2200      	movs	r2, #0
 800a49c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a49e:	f7fc fd6f 	bl	8006f80 <HAL_GetTick>
 800a4a2:	0002      	movs	r2, r0
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a6:	1a9b      	subs	r3, r3, r2
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	18d3      	adds	r3, r2, r3
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a4ae:	f7fc fd67 	bl	8006f80 <HAL_GetTick>
 800a4b2:	0003      	movs	r3, r0
 800a4b4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	330c      	adds	r3, #12
 800a4bc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a4be:	4b41      	ldr	r3, [pc, #260]	; (800a5c4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	0013      	movs	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	189b      	adds	r3, r3, r2
 800a4c8:	00da      	lsls	r2, r3, #3
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	0d1b      	lsrs	r3, r3, #20
 800a4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d0:	4353      	muls	r3, r2
 800a4d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a4d4:	e068      	b.n	800a5a8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	23c0      	movs	r3, #192	; 0xc0
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d10a      	bne.n	800a4f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d107      	bne.n	800a4f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	2117      	movs	r1, #23
 800a4ee:	187b      	adds	r3, r7, r1
 800a4f0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a4f2:	187b      	adds	r3, r7, r1
 800a4f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	d055      	beq.n	800a5a8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4fc:	f7fc fd40 	bl	8006f80 <HAL_GetTick>
 800a500:	0002      	movs	r2, r0
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a508:	429a      	cmp	r2, r3
 800a50a:	d902      	bls.n	800a512 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d142      	bne.n	800a598 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	21e0      	movs	r1, #224	; 0xe0
 800a51e:	438a      	bics	r2, r1
 800a520:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	2382      	movs	r3, #130	; 0x82
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d113      	bne.n	800a556 <SPI_WaitFifoStateUntilTimeout+0xce>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	689a      	ldr	r2, [r3, #8]
 800a532:	2380      	movs	r3, #128	; 0x80
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	429a      	cmp	r2, r3
 800a538:	d005      	beq.n	800a546 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	2380      	movs	r3, #128	; 0x80
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	429a      	cmp	r2, r3
 800a544:	d107      	bne.n	800a556 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2140      	movs	r1, #64	; 0x40
 800a552:	438a      	bics	r2, r1
 800a554:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a55a:	2380      	movs	r3, #128	; 0x80
 800a55c:	019b      	lsls	r3, r3, #6
 800a55e:	429a      	cmp	r2, r3
 800a560:	d110      	bne.n	800a584 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4916      	ldr	r1, [pc, #88]	; (800a5c8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a56e:	400a      	ands	r2, r1
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2180      	movs	r1, #128	; 0x80
 800a57e:	0189      	lsls	r1, r1, #6
 800a580:	430a      	orrs	r2, r1
 800a582:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	225d      	movs	r2, #93	; 0x5d
 800a588:	2101      	movs	r1, #1
 800a58a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	225c      	movs	r2, #92	; 0x5c
 800a590:	2100      	movs	r1, #0
 800a592:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e010      	b.n	800a5ba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d18e      	bne.n	800a4d6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	0018      	movs	r0, r3
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	b00a      	add	sp, #40	; 0x28
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	46c0      	nop			; (mov r8, r8)
 800a5c4:	20000000 	.word	0x20000000
 800a5c8:	ffffdfff 	.word	0xffffdfff

0800a5cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	2382      	movs	r3, #130	; 0x82
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d113      	bne.n	800a60c <SPI_EndRxTransaction+0x40>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	2380      	movs	r3, #128	; 0x80
 800a5ea:	021b      	lsls	r3, r3, #8
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d005      	beq.n	800a5fc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	2380      	movs	r3, #128	; 0x80
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d107      	bne.n	800a60c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2140      	movs	r1, #64	; 0x40
 800a608:	438a      	bics	r2, r1
 800a60a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	0013      	movs	r3, r2
 800a616:	2200      	movs	r2, #0
 800a618:	2180      	movs	r1, #128	; 0x80
 800a61a:	f7ff fea7 	bl	800a36c <SPI_WaitFlagStateUntilTimeout>
 800a61e:	1e03      	subs	r3, r0, #0
 800a620:	d007      	beq.n	800a632 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a626:	2220      	movs	r2, #32
 800a628:	431a      	orrs	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e026      	b.n	800a680 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	2382      	movs	r3, #130	; 0x82
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d11f      	bne.n	800a67e <SPI_EndRxTransaction+0xb2>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	2380      	movs	r3, #128	; 0x80
 800a644:	021b      	lsls	r3, r3, #8
 800a646:	429a      	cmp	r2, r3
 800a648:	d005      	beq.n	800a656 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	689a      	ldr	r2, [r3, #8]
 800a64e:	2380      	movs	r3, #128	; 0x80
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	429a      	cmp	r2, r3
 800a654:	d113      	bne.n	800a67e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	23c0      	movs	r3, #192	; 0xc0
 800a65a:	00d9      	lsls	r1, r3, #3
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	0013      	movs	r3, r2
 800a664:	2200      	movs	r2, #0
 800a666:	f7ff ff0f 	bl	800a488 <SPI_WaitFifoStateUntilTimeout>
 800a66a:	1e03      	subs	r3, r0, #0
 800a66c:	d007      	beq.n	800a67e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a672:	2220      	movs	r2, #32
 800a674:	431a      	orrs	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e000      	b.n	800a680 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	0018      	movs	r0, r3
 800a682:	46bd      	mov	sp, r7
 800a684:	b004      	add	sp, #16
 800a686:	bd80      	pop	{r7, pc}

0800a688 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af02      	add	r7, sp, #8
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	23c0      	movs	r3, #192	; 0xc0
 800a698:	0159      	lsls	r1, r3, #5
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	0013      	movs	r3, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f7ff fef0 	bl	800a488 <SPI_WaitFifoStateUntilTimeout>
 800a6a8:	1e03      	subs	r3, r0, #0
 800a6aa:	d007      	beq.n	800a6bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e027      	b.n	800a70c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	0013      	movs	r3, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2180      	movs	r1, #128	; 0x80
 800a6ca:	f7ff fe4f 	bl	800a36c <SPI_WaitFlagStateUntilTimeout>
 800a6ce:	1e03      	subs	r3, r0, #0
 800a6d0:	d007      	beq.n	800a6e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e014      	b.n	800a70c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	23c0      	movs	r3, #192	; 0xc0
 800a6e6:	00d9      	lsls	r1, r3, #3
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	0013      	movs	r3, r2
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f7ff fec9 	bl	800a488 <SPI_WaitFifoStateUntilTimeout>
 800a6f6:	1e03      	subs	r3, r0, #0
 800a6f8:	d007      	beq.n	800a70a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6fe:	2220      	movs	r2, #32
 800a700:	431a      	orrs	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e000      	b.n	800a70c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	0018      	movs	r0, r3
 800a70e:	46bd      	mov	sp, r7
 800a710:	b004      	add	sp, #16
 800a712:	bd80      	pop	{r7, pc}

0800a714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e046      	b.n	800a7b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2288      	movs	r2, #136	; 0x88
 800a72a:	589b      	ldr	r3, [r3, r2]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d107      	bne.n	800a740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2284      	movs	r2, #132	; 0x84
 800a734:	2100      	movs	r1, #0
 800a736:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	0018      	movs	r0, r3
 800a73c:	f7f9 fdf0 	bl	8004320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2288      	movs	r2, #136	; 0x88
 800a744:	2124      	movs	r1, #36	; 0x24
 800a746:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2101      	movs	r1, #1
 800a754:	438a      	bics	r2, r1
 800a756:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	0018      	movs	r0, r3
 800a75c:	f000 f830 	bl	800a7c0 <UART_SetConfig>
 800a760:	0003      	movs	r3, r0
 800a762:	2b01      	cmp	r3, #1
 800a764:	d101      	bne.n	800a76a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e024      	b.n	800a7b4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	0018      	movs	r0, r3
 800a776:	f000 fae1 	bl	800ad3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	490d      	ldr	r1, [pc, #52]	; (800a7bc <HAL_UART_Init+0xa8>)
 800a786:	400a      	ands	r2, r1
 800a788:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	212a      	movs	r1, #42	; 0x2a
 800a796:	438a      	bics	r2, r1
 800a798:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	f000 fb79 	bl	800aea4 <UART_CheckIdleState>
 800a7b2:	0003      	movs	r3, r0
}
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	b002      	add	sp, #8
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	ffffb7ff 	.word	0xffffb7ff

0800a7c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7c0:	b5b0      	push	{r4, r5, r7, lr}
 800a7c2:	b090      	sub	sp, #64	; 0x40
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7c8:	231a      	movs	r3, #26
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	189b      	adds	r3, r3, r2
 800a7ce:	19db      	adds	r3, r3, r7
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4aaf      	ldr	r2, [pc, #700]	; (800aab0 <UART_SetConfig+0x2f0>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	0019      	movs	r1, r3
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fe:	430b      	orrs	r3, r1
 800a800:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4aaa      	ldr	r2, [pc, #680]	; (800aab4 <UART_SetConfig+0x2f4>)
 800a80a:	4013      	ands	r3, r2
 800a80c:	0018      	movs	r0, r3
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	68d9      	ldr	r1, [r3, #12]
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	0003      	movs	r3, r0
 800a818:	430b      	orrs	r3, r1
 800a81a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4aa4      	ldr	r2, [pc, #656]	; (800aab8 <UART_SetConfig+0x2f8>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d004      	beq.n	800a836 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a832:	4313      	orrs	r3, r2
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	4a9f      	ldr	r2, [pc, #636]	; (800aabc <UART_SetConfig+0x2fc>)
 800a83e:	4013      	ands	r3, r2
 800a840:	0019      	movs	r1, r3
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a848:	430b      	orrs	r3, r1
 800a84a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a852:	220f      	movs	r2, #15
 800a854:	4393      	bics	r3, r2
 800a856:	0018      	movs	r0, r3
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	0003      	movs	r3, r0
 800a862:	430b      	orrs	r3, r1
 800a864:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a95      	ldr	r2, [pc, #596]	; (800aac0 <UART_SetConfig+0x300>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d131      	bne.n	800a8d4 <UART_SetConfig+0x114>
 800a870:	4b94      	ldr	r3, [pc, #592]	; (800aac4 <UART_SetConfig+0x304>)
 800a872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a874:	2203      	movs	r2, #3
 800a876:	4013      	ands	r3, r2
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d01d      	beq.n	800a8b8 <UART_SetConfig+0xf8>
 800a87c:	d823      	bhi.n	800a8c6 <UART_SetConfig+0x106>
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d00c      	beq.n	800a89c <UART_SetConfig+0xdc>
 800a882:	d820      	bhi.n	800a8c6 <UART_SetConfig+0x106>
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <UART_SetConfig+0xce>
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d00e      	beq.n	800a8aa <UART_SetConfig+0xea>
 800a88c:	e01b      	b.n	800a8c6 <UART_SetConfig+0x106>
 800a88e:	231b      	movs	r3, #27
 800a890:	2220      	movs	r2, #32
 800a892:	189b      	adds	r3, r3, r2
 800a894:	19db      	adds	r3, r3, r7
 800a896:	2200      	movs	r2, #0
 800a898:	701a      	strb	r2, [r3, #0]
 800a89a:	e0b4      	b.n	800aa06 <UART_SetConfig+0x246>
 800a89c:	231b      	movs	r3, #27
 800a89e:	2220      	movs	r2, #32
 800a8a0:	189b      	adds	r3, r3, r2
 800a8a2:	19db      	adds	r3, r3, r7
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e0ad      	b.n	800aa06 <UART_SetConfig+0x246>
 800a8aa:	231b      	movs	r3, #27
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	189b      	adds	r3, r3, r2
 800a8b0:	19db      	adds	r3, r3, r7
 800a8b2:	2204      	movs	r2, #4
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	e0a6      	b.n	800aa06 <UART_SetConfig+0x246>
 800a8b8:	231b      	movs	r3, #27
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	189b      	adds	r3, r3, r2
 800a8be:	19db      	adds	r3, r3, r7
 800a8c0:	2208      	movs	r2, #8
 800a8c2:	701a      	strb	r2, [r3, #0]
 800a8c4:	e09f      	b.n	800aa06 <UART_SetConfig+0x246>
 800a8c6:	231b      	movs	r3, #27
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	189b      	adds	r3, r3, r2
 800a8cc:	19db      	adds	r3, r3, r7
 800a8ce:	2210      	movs	r2, #16
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	e098      	b.n	800aa06 <UART_SetConfig+0x246>
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a7b      	ldr	r2, [pc, #492]	; (800aac8 <UART_SetConfig+0x308>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d131      	bne.n	800a942 <UART_SetConfig+0x182>
 800a8de:	4b79      	ldr	r3, [pc, #484]	; (800aac4 <UART_SetConfig+0x304>)
 800a8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e2:	220c      	movs	r2, #12
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	2b0c      	cmp	r3, #12
 800a8e8:	d01d      	beq.n	800a926 <UART_SetConfig+0x166>
 800a8ea:	d823      	bhi.n	800a934 <UART_SetConfig+0x174>
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	d00c      	beq.n	800a90a <UART_SetConfig+0x14a>
 800a8f0:	d820      	bhi.n	800a934 <UART_SetConfig+0x174>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <UART_SetConfig+0x13c>
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d00e      	beq.n	800a918 <UART_SetConfig+0x158>
 800a8fa:	e01b      	b.n	800a934 <UART_SetConfig+0x174>
 800a8fc:	231b      	movs	r3, #27
 800a8fe:	2220      	movs	r2, #32
 800a900:	189b      	adds	r3, r3, r2
 800a902:	19db      	adds	r3, r3, r7
 800a904:	2200      	movs	r2, #0
 800a906:	701a      	strb	r2, [r3, #0]
 800a908:	e07d      	b.n	800aa06 <UART_SetConfig+0x246>
 800a90a:	231b      	movs	r3, #27
 800a90c:	2220      	movs	r2, #32
 800a90e:	189b      	adds	r3, r3, r2
 800a910:	19db      	adds	r3, r3, r7
 800a912:	2202      	movs	r2, #2
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	e076      	b.n	800aa06 <UART_SetConfig+0x246>
 800a918:	231b      	movs	r3, #27
 800a91a:	2220      	movs	r2, #32
 800a91c:	189b      	adds	r3, r3, r2
 800a91e:	19db      	adds	r3, r3, r7
 800a920:	2204      	movs	r2, #4
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e06f      	b.n	800aa06 <UART_SetConfig+0x246>
 800a926:	231b      	movs	r3, #27
 800a928:	2220      	movs	r2, #32
 800a92a:	189b      	adds	r3, r3, r2
 800a92c:	19db      	adds	r3, r3, r7
 800a92e:	2208      	movs	r2, #8
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e068      	b.n	800aa06 <UART_SetConfig+0x246>
 800a934:	231b      	movs	r3, #27
 800a936:	2220      	movs	r2, #32
 800a938:	189b      	adds	r3, r3, r2
 800a93a:	19db      	adds	r3, r3, r7
 800a93c:	2210      	movs	r2, #16
 800a93e:	701a      	strb	r2, [r3, #0]
 800a940:	e061      	b.n	800aa06 <UART_SetConfig+0x246>
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a61      	ldr	r2, [pc, #388]	; (800aacc <UART_SetConfig+0x30c>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d106      	bne.n	800a95a <UART_SetConfig+0x19a>
 800a94c:	231b      	movs	r3, #27
 800a94e:	2220      	movs	r2, #32
 800a950:	189b      	adds	r3, r3, r2
 800a952:	19db      	adds	r3, r3, r7
 800a954:	2200      	movs	r2, #0
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e055      	b.n	800aa06 <UART_SetConfig+0x246>
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a5c      	ldr	r2, [pc, #368]	; (800aad0 <UART_SetConfig+0x310>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d106      	bne.n	800a972 <UART_SetConfig+0x1b2>
 800a964:	231b      	movs	r3, #27
 800a966:	2220      	movs	r2, #32
 800a968:	189b      	adds	r3, r3, r2
 800a96a:	19db      	adds	r3, r3, r7
 800a96c:	2200      	movs	r2, #0
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	e049      	b.n	800aa06 <UART_SetConfig+0x246>
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a50      	ldr	r2, [pc, #320]	; (800aab8 <UART_SetConfig+0x2f8>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d13e      	bne.n	800a9fa <UART_SetConfig+0x23a>
 800a97c:	4b51      	ldr	r3, [pc, #324]	; (800aac4 <UART_SetConfig+0x304>)
 800a97e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a980:	23c0      	movs	r3, #192	; 0xc0
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	4013      	ands	r3, r2
 800a986:	22c0      	movs	r2, #192	; 0xc0
 800a988:	0112      	lsls	r2, r2, #4
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d027      	beq.n	800a9de <UART_SetConfig+0x21e>
 800a98e:	22c0      	movs	r2, #192	; 0xc0
 800a990:	0112      	lsls	r2, r2, #4
 800a992:	4293      	cmp	r3, r2
 800a994:	d82a      	bhi.n	800a9ec <UART_SetConfig+0x22c>
 800a996:	2280      	movs	r2, #128	; 0x80
 800a998:	0112      	lsls	r2, r2, #4
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d011      	beq.n	800a9c2 <UART_SetConfig+0x202>
 800a99e:	2280      	movs	r2, #128	; 0x80
 800a9a0:	0112      	lsls	r2, r2, #4
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d822      	bhi.n	800a9ec <UART_SetConfig+0x22c>
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <UART_SetConfig+0x1f4>
 800a9aa:	2280      	movs	r2, #128	; 0x80
 800a9ac:	00d2      	lsls	r2, r2, #3
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d00e      	beq.n	800a9d0 <UART_SetConfig+0x210>
 800a9b2:	e01b      	b.n	800a9ec <UART_SetConfig+0x22c>
 800a9b4:	231b      	movs	r3, #27
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	189b      	adds	r3, r3, r2
 800a9ba:	19db      	adds	r3, r3, r7
 800a9bc:	2200      	movs	r2, #0
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e021      	b.n	800aa06 <UART_SetConfig+0x246>
 800a9c2:	231b      	movs	r3, #27
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	189b      	adds	r3, r3, r2
 800a9c8:	19db      	adds	r3, r3, r7
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	e01a      	b.n	800aa06 <UART_SetConfig+0x246>
 800a9d0:	231b      	movs	r3, #27
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	189b      	adds	r3, r3, r2
 800a9d6:	19db      	adds	r3, r3, r7
 800a9d8:	2204      	movs	r2, #4
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	e013      	b.n	800aa06 <UART_SetConfig+0x246>
 800a9de:	231b      	movs	r3, #27
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	189b      	adds	r3, r3, r2
 800a9e4:	19db      	adds	r3, r3, r7
 800a9e6:	2208      	movs	r2, #8
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e00c      	b.n	800aa06 <UART_SetConfig+0x246>
 800a9ec:	231b      	movs	r3, #27
 800a9ee:	2220      	movs	r2, #32
 800a9f0:	189b      	adds	r3, r3, r2
 800a9f2:	19db      	adds	r3, r3, r7
 800a9f4:	2210      	movs	r2, #16
 800a9f6:	701a      	strb	r2, [r3, #0]
 800a9f8:	e005      	b.n	800aa06 <UART_SetConfig+0x246>
 800a9fa:	231b      	movs	r3, #27
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	189b      	adds	r3, r3, r2
 800aa00:	19db      	adds	r3, r3, r7
 800aa02:	2210      	movs	r2, #16
 800aa04:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a2b      	ldr	r2, [pc, #172]	; (800aab8 <UART_SetConfig+0x2f8>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d000      	beq.n	800aa12 <UART_SetConfig+0x252>
 800aa10:	e0a9      	b.n	800ab66 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa12:	231b      	movs	r3, #27
 800aa14:	2220      	movs	r2, #32
 800aa16:	189b      	adds	r3, r3, r2
 800aa18:	19db      	adds	r3, r3, r7
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d015      	beq.n	800aa4c <UART_SetConfig+0x28c>
 800aa20:	dc18      	bgt.n	800aa54 <UART_SetConfig+0x294>
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d00d      	beq.n	800aa42 <UART_SetConfig+0x282>
 800aa26:	dc15      	bgt.n	800aa54 <UART_SetConfig+0x294>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <UART_SetConfig+0x272>
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d005      	beq.n	800aa3c <UART_SetConfig+0x27c>
 800aa30:	e010      	b.n	800aa54 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa32:	f7fe fae3 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 800aa36:	0003      	movs	r3, r0
 800aa38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa3a:	e014      	b.n	800aa66 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa3c:	4b25      	ldr	r3, [pc, #148]	; (800aad4 <UART_SetConfig+0x314>)
 800aa3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa40:	e011      	b.n	800aa66 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa42:	f7fe fa4f 	bl	8008ee4 <HAL_RCC_GetSysClockFreq>
 800aa46:	0003      	movs	r3, r0
 800aa48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa4a:	e00c      	b.n	800aa66 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa4c:	2380      	movs	r3, #128	; 0x80
 800aa4e:	021b      	lsls	r3, r3, #8
 800aa50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa52:	e008      	b.n	800aa66 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800aa58:	231a      	movs	r3, #26
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	189b      	adds	r3, r3, r2
 800aa5e:	19db      	adds	r3, r3, r7
 800aa60:	2201      	movs	r2, #1
 800aa62:	701a      	strb	r2, [r3, #0]
        break;
 800aa64:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d100      	bne.n	800aa6e <UART_SetConfig+0x2ae>
 800aa6c:	e14b      	b.n	800ad06 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa72:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <UART_SetConfig+0x318>)
 800aa74:	0052      	lsls	r2, r2, #1
 800aa76:	5ad3      	ldrh	r3, [r2, r3]
 800aa78:	0019      	movs	r1, r3
 800aa7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aa7c:	f7f5 fb42 	bl	8000104 <__udivsi3>
 800aa80:	0003      	movs	r3, r0
 800aa82:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	0013      	movs	r3, r2
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	189b      	adds	r3, r3, r2
 800aa8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d305      	bcc.n	800aaa0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d91d      	bls.n	800aadc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800aaa0:	231a      	movs	r3, #26
 800aaa2:	2220      	movs	r2, #32
 800aaa4:	189b      	adds	r3, r3, r2
 800aaa6:	19db      	adds	r3, r3, r7
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	701a      	strb	r2, [r3, #0]
 800aaac:	e12b      	b.n	800ad06 <UART_SetConfig+0x546>
 800aaae:	46c0      	nop			; (mov r8, r8)
 800aab0:	cfff69f3 	.word	0xcfff69f3
 800aab4:	ffffcfff 	.word	0xffffcfff
 800aab8:	40008000 	.word	0x40008000
 800aabc:	11fff4ff 	.word	0x11fff4ff
 800aac0:	40013800 	.word	0x40013800
 800aac4:	40021000 	.word	0x40021000
 800aac8:	40004400 	.word	0x40004400
 800aacc:	40004800 	.word	0x40004800
 800aad0:	40004c00 	.word	0x40004c00
 800aad4:	00f42400 	.word	0x00f42400
 800aad8:	0800c1b0 	.word	0x0800c1b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aade:	61bb      	str	r3, [r7, #24]
 800aae0:	2300      	movs	r3, #0
 800aae2:	61fb      	str	r3, [r7, #28]
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aae8:	4b92      	ldr	r3, [pc, #584]	; (800ad34 <UART_SetConfig+0x574>)
 800aaea:	0052      	lsls	r2, r2, #1
 800aaec:	5ad3      	ldrh	r3, [r2, r3]
 800aaee:	613b      	str	r3, [r7, #16]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	69b8      	ldr	r0, [r7, #24]
 800aafa:	69f9      	ldr	r1, [r7, #28]
 800aafc:	f7f5 fcf0 	bl	80004e0 <__aeabi_uldivmod>
 800ab00:	0002      	movs	r2, r0
 800ab02:	000b      	movs	r3, r1
 800ab04:	0e11      	lsrs	r1, r2, #24
 800ab06:	021d      	lsls	r5, r3, #8
 800ab08:	430d      	orrs	r5, r1
 800ab0a:	0214      	lsls	r4, r2, #8
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	085b      	lsrs	r3, r3, #1
 800ab12:	60bb      	str	r3, [r7, #8]
 800ab14:	2300      	movs	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	68b8      	ldr	r0, [r7, #8]
 800ab1a:	68f9      	ldr	r1, [r7, #12]
 800ab1c:	1900      	adds	r0, r0, r4
 800ab1e:	4169      	adcs	r1, r5
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	603b      	str	r3, [r7, #0]
 800ab26:	2300      	movs	r3, #0
 800ab28:	607b      	str	r3, [r7, #4]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f7f5 fcd7 	bl	80004e0 <__aeabi_uldivmod>
 800ab32:	0002      	movs	r2, r0
 800ab34:	000b      	movs	r3, r1
 800ab36:	0013      	movs	r3, r2
 800ab38:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3c:	23c0      	movs	r3, #192	; 0xc0
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d309      	bcc.n	800ab58 <UART_SetConfig+0x398>
 800ab44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab46:	2380      	movs	r3, #128	; 0x80
 800ab48:	035b      	lsls	r3, r3, #13
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d204      	bcs.n	800ab58 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab54:	60da      	str	r2, [r3, #12]
 800ab56:	e0d6      	b.n	800ad06 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800ab58:	231a      	movs	r3, #26
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	189b      	adds	r3, r3, r2
 800ab5e:	19db      	adds	r3, r3, r7
 800ab60:	2201      	movs	r2, #1
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	e0cf      	b.n	800ad06 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	69da      	ldr	r2, [r3, #28]
 800ab6a:	2380      	movs	r3, #128	; 0x80
 800ab6c:	021b      	lsls	r3, r3, #8
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d000      	beq.n	800ab74 <UART_SetConfig+0x3b4>
 800ab72:	e070      	b.n	800ac56 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800ab74:	231b      	movs	r3, #27
 800ab76:	2220      	movs	r2, #32
 800ab78:	189b      	adds	r3, r3, r2
 800ab7a:	19db      	adds	r3, r3, r7
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b08      	cmp	r3, #8
 800ab80:	d015      	beq.n	800abae <UART_SetConfig+0x3ee>
 800ab82:	dc18      	bgt.n	800abb6 <UART_SetConfig+0x3f6>
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	d00d      	beq.n	800aba4 <UART_SetConfig+0x3e4>
 800ab88:	dc15      	bgt.n	800abb6 <UART_SetConfig+0x3f6>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <UART_SetConfig+0x3d4>
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d005      	beq.n	800ab9e <UART_SetConfig+0x3de>
 800ab92:	e010      	b.n	800abb6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab94:	f7fe fa32 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 800ab98:	0003      	movs	r3, r0
 800ab9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab9c:	e014      	b.n	800abc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab9e:	4b66      	ldr	r3, [pc, #408]	; (800ad38 <UART_SetConfig+0x578>)
 800aba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aba2:	e011      	b.n	800abc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aba4:	f7fe f99e 	bl	8008ee4 <HAL_RCC_GetSysClockFreq>
 800aba8:	0003      	movs	r3, r0
 800abaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abac:	e00c      	b.n	800abc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abae:	2380      	movs	r3, #128	; 0x80
 800abb0:	021b      	lsls	r3, r3, #8
 800abb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abb4:	e008      	b.n	800abc8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800abb6:	2300      	movs	r3, #0
 800abb8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800abba:	231a      	movs	r3, #26
 800abbc:	2220      	movs	r2, #32
 800abbe:	189b      	adds	r3, r3, r2
 800abc0:	19db      	adds	r3, r3, r7
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]
        break;
 800abc6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d100      	bne.n	800abd0 <UART_SetConfig+0x410>
 800abce:	e09a      	b.n	800ad06 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abd4:	4b57      	ldr	r3, [pc, #348]	; (800ad34 <UART_SetConfig+0x574>)
 800abd6:	0052      	lsls	r2, r2, #1
 800abd8:	5ad3      	ldrh	r3, [r2, r3]
 800abda:	0019      	movs	r1, r3
 800abdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800abde:	f7f5 fa91 	bl	8000104 <__udivsi3>
 800abe2:	0003      	movs	r3, r0
 800abe4:	005a      	lsls	r2, r3, #1
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	18d2      	adds	r2, r2, r3
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	0019      	movs	r1, r3
 800abf4:	0010      	movs	r0, r2
 800abf6:	f7f5 fa85 	bl	8000104 <__udivsi3>
 800abfa:	0003      	movs	r3, r0
 800abfc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	2b0f      	cmp	r3, #15
 800ac02:	d921      	bls.n	800ac48 <UART_SetConfig+0x488>
 800ac04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac06:	2380      	movs	r3, #128	; 0x80
 800ac08:	025b      	lsls	r3, r3, #9
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d21c      	bcs.n	800ac48 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	200e      	movs	r0, #14
 800ac14:	2420      	movs	r4, #32
 800ac16:	1903      	adds	r3, r0, r4
 800ac18:	19db      	adds	r3, r3, r7
 800ac1a:	210f      	movs	r1, #15
 800ac1c:	438a      	bics	r2, r1
 800ac1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	085b      	lsrs	r3, r3, #1
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	2207      	movs	r2, #7
 800ac28:	4013      	ands	r3, r2
 800ac2a:	b299      	uxth	r1, r3
 800ac2c:	1903      	adds	r3, r0, r4
 800ac2e:	19db      	adds	r3, r3, r7
 800ac30:	1902      	adds	r2, r0, r4
 800ac32:	19d2      	adds	r2, r2, r7
 800ac34:	8812      	ldrh	r2, [r2, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	1902      	adds	r2, r0, r4
 800ac40:	19d2      	adds	r2, r2, r7
 800ac42:	8812      	ldrh	r2, [r2, #0]
 800ac44:	60da      	str	r2, [r3, #12]
 800ac46:	e05e      	b.n	800ad06 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800ac48:	231a      	movs	r3, #26
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	189b      	adds	r3, r3, r2
 800ac4e:	19db      	adds	r3, r3, r7
 800ac50:	2201      	movs	r2, #1
 800ac52:	701a      	strb	r2, [r3, #0]
 800ac54:	e057      	b.n	800ad06 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac56:	231b      	movs	r3, #27
 800ac58:	2220      	movs	r2, #32
 800ac5a:	189b      	adds	r3, r3, r2
 800ac5c:	19db      	adds	r3, r3, r7
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d015      	beq.n	800ac90 <UART_SetConfig+0x4d0>
 800ac64:	dc18      	bgt.n	800ac98 <UART_SetConfig+0x4d8>
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d00d      	beq.n	800ac86 <UART_SetConfig+0x4c6>
 800ac6a:	dc15      	bgt.n	800ac98 <UART_SetConfig+0x4d8>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <UART_SetConfig+0x4b6>
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d005      	beq.n	800ac80 <UART_SetConfig+0x4c0>
 800ac74:	e010      	b.n	800ac98 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac76:	f7fe f9c1 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 800ac7a:	0003      	movs	r3, r0
 800ac7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac7e:	e014      	b.n	800acaa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac80:	4b2d      	ldr	r3, [pc, #180]	; (800ad38 <UART_SetConfig+0x578>)
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac84:	e011      	b.n	800acaa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac86:	f7fe f92d 	bl	8008ee4 <HAL_RCC_GetSysClockFreq>
 800ac8a:	0003      	movs	r3, r0
 800ac8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac8e:	e00c      	b.n	800acaa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac90:	2380      	movs	r3, #128	; 0x80
 800ac92:	021b      	lsls	r3, r3, #8
 800ac94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac96:	e008      	b.n	800acaa <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800ac9c:	231a      	movs	r3, #26
 800ac9e:	2220      	movs	r2, #32
 800aca0:	189b      	adds	r3, r3, r2
 800aca2:	19db      	adds	r3, r3, r7
 800aca4:	2201      	movs	r2, #1
 800aca6:	701a      	strb	r2, [r3, #0]
        break;
 800aca8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800acaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acac:	2b00      	cmp	r3, #0
 800acae:	d02a      	beq.n	800ad06 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acb4:	4b1f      	ldr	r3, [pc, #124]	; (800ad34 <UART_SetConfig+0x574>)
 800acb6:	0052      	lsls	r2, r2, #1
 800acb8:	5ad3      	ldrh	r3, [r2, r3]
 800acba:	0019      	movs	r1, r3
 800acbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800acbe:	f7f5 fa21 	bl	8000104 <__udivsi3>
 800acc2:	0003      	movs	r3, r0
 800acc4:	001a      	movs	r2, r3
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	085b      	lsrs	r3, r3, #1
 800accc:	18d2      	adds	r2, r2, r3
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	0019      	movs	r1, r3
 800acd4:	0010      	movs	r0, r2
 800acd6:	f7f5 fa15 	bl	8000104 <__udivsi3>
 800acda:	0003      	movs	r3, r0
 800acdc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	2b0f      	cmp	r3, #15
 800ace2:	d90a      	bls.n	800acfa <UART_SetConfig+0x53a>
 800ace4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace6:	2380      	movs	r3, #128	; 0x80
 800ace8:	025b      	lsls	r3, r3, #9
 800acea:	429a      	cmp	r2, r3
 800acec:	d205      	bcs.n	800acfa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60da      	str	r2, [r3, #12]
 800acf8:	e005      	b.n	800ad06 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800acfa:	231a      	movs	r3, #26
 800acfc:	2220      	movs	r2, #32
 800acfe:	189b      	adds	r3, r3, r2
 800ad00:	19db      	adds	r3, r3, r7
 800ad02:	2201      	movs	r2, #1
 800ad04:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	226a      	movs	r2, #106	; 0x6a
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	2268      	movs	r2, #104	; 0x68
 800ad12:	2101      	movs	r1, #1
 800ad14:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad18:	2200      	movs	r2, #0
 800ad1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	2200      	movs	r2, #0
 800ad20:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad22:	231a      	movs	r3, #26
 800ad24:	2220      	movs	r2, #32
 800ad26:	189b      	adds	r3, r3, r2
 800ad28:	19db      	adds	r3, r3, r7
 800ad2a:	781b      	ldrb	r3, [r3, #0]
}
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b010      	add	sp, #64	; 0x40
 800ad32:	bdb0      	pop	{r4, r5, r7, pc}
 800ad34:	0800c1b0 	.word	0x0800c1b0
 800ad38:	00f42400 	.word	0x00f42400

0800ad3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	2201      	movs	r2, #1
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	d00b      	beq.n	800ad66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4a4a      	ldr	r2, [pc, #296]	; (800ae80 <UART_AdvFeatureConfig+0x144>)
 800ad56:	4013      	ands	r3, r2
 800ad58:	0019      	movs	r1, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	d00b      	beq.n	800ad88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	4a43      	ldr	r2, [pc, #268]	; (800ae84 <UART_AdvFeatureConfig+0x148>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	0019      	movs	r1, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	430a      	orrs	r2, r1
 800ad86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	4013      	ands	r3, r2
 800ad90:	d00b      	beq.n	800adaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4a3b      	ldr	r2, [pc, #236]	; (800ae88 <UART_AdvFeatureConfig+0x14c>)
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	0019      	movs	r1, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	2208      	movs	r2, #8
 800adb0:	4013      	ands	r3, r2
 800adb2:	d00b      	beq.n	800adcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4a34      	ldr	r2, [pc, #208]	; (800ae8c <UART_AdvFeatureConfig+0x150>)
 800adbc:	4013      	ands	r3, r2
 800adbe:	0019      	movs	r1, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	2210      	movs	r2, #16
 800add2:	4013      	ands	r3, r2
 800add4:	d00b      	beq.n	800adee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	4a2c      	ldr	r2, [pc, #176]	; (800ae90 <UART_AdvFeatureConfig+0x154>)
 800adde:	4013      	ands	r3, r2
 800ade0:	0019      	movs	r1, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf2:	2220      	movs	r2, #32
 800adf4:	4013      	ands	r3, r2
 800adf6:	d00b      	beq.n	800ae10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	4a25      	ldr	r2, [pc, #148]	; (800ae94 <UART_AdvFeatureConfig+0x158>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	0019      	movs	r1, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae14:	2240      	movs	r2, #64	; 0x40
 800ae16:	4013      	ands	r3, r2
 800ae18:	d01d      	beq.n	800ae56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	4a1d      	ldr	r2, [pc, #116]	; (800ae98 <UART_AdvFeatureConfig+0x15c>)
 800ae22:	4013      	ands	r3, r2
 800ae24:	0019      	movs	r1, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae36:	2380      	movs	r3, #128	; 0x80
 800ae38:	035b      	lsls	r3, r3, #13
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d10b      	bne.n	800ae56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4a15      	ldr	r2, [pc, #84]	; (800ae9c <UART_AdvFeatureConfig+0x160>)
 800ae46:	4013      	ands	r3, r2
 800ae48:	0019      	movs	r1, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5a:	2280      	movs	r2, #128	; 0x80
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	d00b      	beq.n	800ae78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	4a0e      	ldr	r2, [pc, #56]	; (800aea0 <UART_AdvFeatureConfig+0x164>)
 800ae68:	4013      	ands	r3, r2
 800ae6a:	0019      	movs	r1, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	605a      	str	r2, [r3, #4]
  }
}
 800ae78:	46c0      	nop			; (mov r8, r8)
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b002      	add	sp, #8
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	fffdffff 	.word	0xfffdffff
 800ae84:	fffeffff 	.word	0xfffeffff
 800ae88:	fffbffff 	.word	0xfffbffff
 800ae8c:	ffff7fff 	.word	0xffff7fff
 800ae90:	ffffefff 	.word	0xffffefff
 800ae94:	ffffdfff 	.word	0xffffdfff
 800ae98:	ffefffff 	.word	0xffefffff
 800ae9c:	ff9fffff 	.word	0xff9fffff
 800aea0:	fff7ffff 	.word	0xfff7ffff

0800aea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2290      	movs	r2, #144	; 0x90
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aeb4:	f7fc f864 	bl	8006f80 <HAL_GetTick>
 800aeb8:	0003      	movs	r3, r0
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2208      	movs	r2, #8
 800aec4:	4013      	ands	r3, r2
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d10c      	bne.n	800aee4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2280      	movs	r2, #128	; 0x80
 800aece:	0391      	lsls	r1, r2, #14
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	4a1a      	ldr	r2, [pc, #104]	; (800af3c <UART_CheckIdleState+0x98>)
 800aed4:	9200      	str	r2, [sp, #0]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f000 f832 	bl	800af40 <UART_WaitOnFlagUntilTimeout>
 800aedc:	1e03      	subs	r3, r0, #0
 800aede:	d001      	beq.n	800aee4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e026      	b.n	800af32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2204      	movs	r2, #4
 800aeec:	4013      	ands	r3, r2
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d10c      	bne.n	800af0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2280      	movs	r2, #128	; 0x80
 800aef6:	03d1      	lsls	r1, r2, #15
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	4a10      	ldr	r2, [pc, #64]	; (800af3c <UART_CheckIdleState+0x98>)
 800aefc:	9200      	str	r2, [sp, #0]
 800aefe:	2200      	movs	r2, #0
 800af00:	f000 f81e 	bl	800af40 <UART_WaitOnFlagUntilTimeout>
 800af04:	1e03      	subs	r3, r0, #0
 800af06:	d001      	beq.n	800af0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e012      	b.n	800af32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2288      	movs	r2, #136	; 0x88
 800af10:	2120      	movs	r1, #32
 800af12:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	228c      	movs	r2, #140	; 0x8c
 800af18:	2120      	movs	r1, #32
 800af1a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2284      	movs	r2, #132	; 0x84
 800af2c:	2100      	movs	r1, #0
 800af2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	0018      	movs	r0, r3
 800af34:	46bd      	mov	sp, r7
 800af36:	b004      	add	sp, #16
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	46c0      	nop			; (mov r8, r8)
 800af3c:	01ffffff 	.word	0x01ffffff

0800af40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b094      	sub	sp, #80	; 0x50
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	1dfb      	adds	r3, r7, #7
 800af4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af50:	e0a7      	b.n	800b0a2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af54:	3301      	adds	r3, #1
 800af56:	d100      	bne.n	800af5a <UART_WaitOnFlagUntilTimeout+0x1a>
 800af58:	e0a3      	b.n	800b0a2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af5a:	f7fc f811 	bl	8006f80 <HAL_GetTick>
 800af5e:	0002      	movs	r2, r0
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af66:	429a      	cmp	r2, r3
 800af68:	d302      	bcc.n	800af70 <UART_WaitOnFlagUntilTimeout+0x30>
 800af6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d13f      	bne.n	800aff0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af70:	f3ef 8310 	mrs	r3, PRIMASK
 800af74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af78:	647b      	str	r3, [r7, #68]	; 0x44
 800af7a:	2301      	movs	r3, #1
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	f383 8810 	msr	PRIMASK, r3
}
 800af84:	46c0      	nop			; (mov r8, r8)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	494e      	ldr	r1, [pc, #312]	; (800b0cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800af92:	400a      	ands	r2, r1
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	f383 8810 	msr	PRIMASK, r3
}
 800afa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa2:	f3ef 8310 	mrs	r3, PRIMASK
 800afa6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800afa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afaa:	643b      	str	r3, [r7, #64]	; 0x40
 800afac:	2301      	movs	r3, #1
 800afae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	f383 8810 	msr	PRIMASK, r3
}
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2101      	movs	r1, #1
 800afc4:	438a      	bics	r2, r1
 800afc6:	609a      	str	r2, [r3, #8]
 800afc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afce:	f383 8810 	msr	PRIMASK, r3
}
 800afd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2288      	movs	r2, #136	; 0x88
 800afd8:	2120      	movs	r1, #32
 800afda:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	228c      	movs	r2, #140	; 0x8c
 800afe0:	2120      	movs	r1, #32
 800afe2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2284      	movs	r2, #132	; 0x84
 800afe8:	2100      	movs	r1, #0
 800afea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e069      	b.n	800b0c4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2204      	movs	r2, #4
 800aff8:	4013      	ands	r3, r2
 800affa:	d052      	beq.n	800b0a2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	69da      	ldr	r2, [r3, #28]
 800b002:	2380      	movs	r3, #128	; 0x80
 800b004:	011b      	lsls	r3, r3, #4
 800b006:	401a      	ands	r2, r3
 800b008:	2380      	movs	r3, #128	; 0x80
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d148      	bne.n	800b0a2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2280      	movs	r2, #128	; 0x80
 800b016:	0112      	lsls	r2, r2, #4
 800b018:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b01a:	f3ef 8310 	mrs	r3, PRIMASK
 800b01e:	613b      	str	r3, [r7, #16]
  return(result);
 800b020:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b022:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b024:	2301      	movs	r3, #1
 800b026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f383 8810 	msr	PRIMASK, r3
}
 800b02e:	46c0      	nop			; (mov r8, r8)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4924      	ldr	r1, [pc, #144]	; (800b0cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b03c:	400a      	ands	r2, r1
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b042:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	f383 8810 	msr	PRIMASK, r3
}
 800b04a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b04c:	f3ef 8310 	mrs	r3, PRIMASK
 800b050:	61fb      	str	r3, [r7, #28]
  return(result);
 800b052:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b054:	64bb      	str	r3, [r7, #72]	; 0x48
 800b056:	2301      	movs	r3, #1
 800b058:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	f383 8810 	msr	PRIMASK, r3
}
 800b060:	46c0      	nop			; (mov r8, r8)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2101      	movs	r1, #1
 800b06e:	438a      	bics	r2, r1
 800b070:	609a      	str	r2, [r3, #8]
 800b072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b074:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	f383 8810 	msr	PRIMASK, r3
}
 800b07c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2288      	movs	r2, #136	; 0x88
 800b082:	2120      	movs	r1, #32
 800b084:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	228c      	movs	r2, #140	; 0x8c
 800b08a:	2120      	movs	r1, #32
 800b08c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2290      	movs	r2, #144	; 0x90
 800b092:	2120      	movs	r1, #32
 800b094:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2284      	movs	r2, #132	; 0x84
 800b09a:	2100      	movs	r1, #0
 800b09c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e010      	b.n	800b0c4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	425a      	negs	r2, r3
 800b0b2:	4153      	adcs	r3, r2
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	001a      	movs	r2, r3
 800b0b8:	1dfb      	adds	r3, r7, #7
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d100      	bne.n	800b0c2 <UART_WaitOnFlagUntilTimeout+0x182>
 800b0c0:	e747      	b.n	800af52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	0018      	movs	r0, r3
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	b014      	add	sp, #80	; 0x50
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	fffffe5f 	.word	0xfffffe5f

0800b0d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2284      	movs	r2, #132	; 0x84
 800b0dc:	5c9b      	ldrb	r3, [r3, r2]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d101      	bne.n	800b0e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	e027      	b.n	800b136 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2284      	movs	r2, #132	; 0x84
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2288      	movs	r2, #136	; 0x88
 800b0f2:	2124      	movs	r1, #36	; 0x24
 800b0f4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2101      	movs	r1, #1
 800b10a:	438a      	bics	r2, r1
 800b10c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	4a0b      	ldr	r2, [pc, #44]	; (800b140 <HAL_UARTEx_DisableFifoMode+0x70>)
 800b112:	4013      	ands	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2288      	movs	r2, #136	; 0x88
 800b128:	2120      	movs	r1, #32
 800b12a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2284      	movs	r2, #132	; 0x84
 800b130:	2100      	movs	r1, #0
 800b132:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	0018      	movs	r0, r3
 800b138:	46bd      	mov	sp, r7
 800b13a:	b004      	add	sp, #16
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	dfffffff 	.word	0xdfffffff

0800b144 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2284      	movs	r2, #132	; 0x84
 800b152:	5c9b      	ldrb	r3, [r3, r2]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d101      	bne.n	800b15c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b158:	2302      	movs	r3, #2
 800b15a:	e02e      	b.n	800b1ba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2284      	movs	r2, #132	; 0x84
 800b160:	2101      	movs	r1, #1
 800b162:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2288      	movs	r2, #136	; 0x88
 800b168:	2124      	movs	r1, #36	; 0x24
 800b16a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2101      	movs	r1, #1
 800b180:	438a      	bics	r2, r1
 800b182:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	08d9      	lsrs	r1, r3, #3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	430a      	orrs	r2, r1
 800b196:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	0018      	movs	r0, r3
 800b19c:	f000 f854 	bl	800b248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2288      	movs	r2, #136	; 0x88
 800b1ac:	2120      	movs	r1, #32
 800b1ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2284      	movs	r2, #132	; 0x84
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	b004      	add	sp, #16
 800b1c0:	bd80      	pop	{r7, pc}
	...

0800b1c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2284      	movs	r2, #132	; 0x84
 800b1d2:	5c9b      	ldrb	r3, [r3, r2]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e02f      	b.n	800b23c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2284      	movs	r2, #132	; 0x84
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2288      	movs	r2, #136	; 0x88
 800b1e8:	2124      	movs	r1, #36	; 0x24
 800b1ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2101      	movs	r1, #1
 800b200:	438a      	bics	r2, r1
 800b202:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	4a0e      	ldr	r2, [pc, #56]	; (800b244 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800b20c:	4013      	ands	r3, r2
 800b20e:	0019      	movs	r1, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	0018      	movs	r0, r3
 800b21e:	f000 f813 	bl	800b248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2288      	movs	r2, #136	; 0x88
 800b22e:	2120      	movs	r1, #32
 800b230:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2284      	movs	r2, #132	; 0x84
 800b236:	2100      	movs	r1, #0
 800b238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	0018      	movs	r0, r3
 800b23e:	46bd      	mov	sp, r7
 800b240:	b004      	add	sp, #16
 800b242:	bd80      	pop	{r7, pc}
 800b244:	f1ffffff 	.word	0xf1ffffff

0800b248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b254:	2b00      	cmp	r3, #0
 800b256:	d108      	bne.n	800b26a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	226a      	movs	r2, #106	; 0x6a
 800b25c:	2101      	movs	r1, #1
 800b25e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2268      	movs	r2, #104	; 0x68
 800b264:	2101      	movs	r1, #1
 800b266:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b268:	e043      	b.n	800b2f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b26a:	260f      	movs	r6, #15
 800b26c:	19bb      	adds	r3, r7, r6
 800b26e:	2208      	movs	r2, #8
 800b270:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b272:	200e      	movs	r0, #14
 800b274:	183b      	adds	r3, r7, r0
 800b276:	2208      	movs	r2, #8
 800b278:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	0e5b      	lsrs	r3, r3, #25
 800b282:	b2da      	uxtb	r2, r3
 800b284:	240d      	movs	r4, #13
 800b286:	193b      	adds	r3, r7, r4
 800b288:	2107      	movs	r1, #7
 800b28a:	400a      	ands	r2, r1
 800b28c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	0f5b      	lsrs	r3, r3, #29
 800b296:	b2da      	uxtb	r2, r3
 800b298:	250c      	movs	r5, #12
 800b29a:	197b      	adds	r3, r7, r5
 800b29c:	2107      	movs	r1, #7
 800b29e:	400a      	ands	r2, r1
 800b2a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2a2:	183b      	adds	r3, r7, r0
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	197a      	adds	r2, r7, r5
 800b2a8:	7812      	ldrb	r2, [r2, #0]
 800b2aa:	4914      	ldr	r1, [pc, #80]	; (800b2fc <UARTEx_SetNbDataToProcess+0xb4>)
 800b2ac:	5c8a      	ldrb	r2, [r1, r2]
 800b2ae:	435a      	muls	r2, r3
 800b2b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2b2:	197b      	adds	r3, r7, r5
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	4a12      	ldr	r2, [pc, #72]	; (800b300 <UARTEx_SetNbDataToProcess+0xb8>)
 800b2b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2ba:	0019      	movs	r1, r3
 800b2bc:	f7f4 ffac 	bl	8000218 <__divsi3>
 800b2c0:	0003      	movs	r3, r0
 800b2c2:	b299      	uxth	r1, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	226a      	movs	r2, #106	; 0x6a
 800b2c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2ca:	19bb      	adds	r3, r7, r6
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	193a      	adds	r2, r7, r4
 800b2d0:	7812      	ldrb	r2, [r2, #0]
 800b2d2:	490a      	ldr	r1, [pc, #40]	; (800b2fc <UARTEx_SetNbDataToProcess+0xb4>)
 800b2d4:	5c8a      	ldrb	r2, [r1, r2]
 800b2d6:	435a      	muls	r2, r3
 800b2d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2da:	193b      	adds	r3, r7, r4
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	4a08      	ldr	r2, [pc, #32]	; (800b300 <UARTEx_SetNbDataToProcess+0xb8>)
 800b2e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2e2:	0019      	movs	r1, r3
 800b2e4:	f7f4 ff98 	bl	8000218 <__divsi3>
 800b2e8:	0003      	movs	r3, r0
 800b2ea:	b299      	uxth	r1, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2268      	movs	r2, #104	; 0x68
 800b2f0:	5299      	strh	r1, [r3, r2]
}
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	b005      	add	sp, #20
 800b2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	0800c1c8 	.word	0x0800c1c8
 800b300:	0800c1d0 	.word	0x0800c1d0

0800b304 <memset>:
 800b304:	0003      	movs	r3, r0
 800b306:	1882      	adds	r2, r0, r2
 800b308:	4293      	cmp	r3, r2
 800b30a:	d100      	bne.n	800b30e <memset+0xa>
 800b30c:	4770      	bx	lr
 800b30e:	7019      	strb	r1, [r3, #0]
 800b310:	3301      	adds	r3, #1
 800b312:	e7f9      	b.n	800b308 <memset+0x4>

0800b314 <__libc_init_array>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	2600      	movs	r6, #0
 800b318:	4c0c      	ldr	r4, [pc, #48]	; (800b34c <__libc_init_array+0x38>)
 800b31a:	4d0d      	ldr	r5, [pc, #52]	; (800b350 <__libc_init_array+0x3c>)
 800b31c:	1b64      	subs	r4, r4, r5
 800b31e:	10a4      	asrs	r4, r4, #2
 800b320:	42a6      	cmp	r6, r4
 800b322:	d109      	bne.n	800b338 <__libc_init_array+0x24>
 800b324:	2600      	movs	r6, #0
 800b326:	f000 f86f 	bl	800b408 <_init>
 800b32a:	4c0a      	ldr	r4, [pc, #40]	; (800b354 <__libc_init_array+0x40>)
 800b32c:	4d0a      	ldr	r5, [pc, #40]	; (800b358 <__libc_init_array+0x44>)
 800b32e:	1b64      	subs	r4, r4, r5
 800b330:	10a4      	asrs	r4, r4, #2
 800b332:	42a6      	cmp	r6, r4
 800b334:	d105      	bne.n	800b342 <__libc_init_array+0x2e>
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	00b3      	lsls	r3, r6, #2
 800b33a:	58eb      	ldr	r3, [r5, r3]
 800b33c:	4798      	blx	r3
 800b33e:	3601      	adds	r6, #1
 800b340:	e7ee      	b.n	800b320 <__libc_init_array+0xc>
 800b342:	00b3      	lsls	r3, r6, #2
 800b344:	58eb      	ldr	r3, [r5, r3]
 800b346:	4798      	blx	r3
 800b348:	3601      	adds	r6, #1
 800b34a:	e7f2      	b.n	800b332 <__libc_init_array+0x1e>
 800b34c:	0800c1e0 	.word	0x0800c1e0
 800b350:	0800c1e0 	.word	0x0800c1e0
 800b354:	0800c1e4 	.word	0x0800c1e4
 800b358:	0800c1e0 	.word	0x0800c1e0

0800b35c <memcpy>:
 800b35c:	2300      	movs	r3, #0
 800b35e:	b510      	push	{r4, lr}
 800b360:	429a      	cmp	r2, r3
 800b362:	d100      	bne.n	800b366 <memcpy+0xa>
 800b364:	bd10      	pop	{r4, pc}
 800b366:	5ccc      	ldrb	r4, [r1, r3]
 800b368:	54c4      	strb	r4, [r0, r3]
 800b36a:	3301      	adds	r3, #1
 800b36c:	e7f8      	b.n	800b360 <memcpy+0x4>
	...

0800b370 <round>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	004a      	lsls	r2, r1, #1
 800b374:	000d      	movs	r5, r1
 800b376:	4920      	ldr	r1, [pc, #128]	; (800b3f8 <round+0x88>)
 800b378:	0d52      	lsrs	r2, r2, #21
 800b37a:	1851      	adds	r1, r2, r1
 800b37c:	0006      	movs	r6, r0
 800b37e:	2913      	cmp	r1, #19
 800b380:	dc18      	bgt.n	800b3b4 <round+0x44>
 800b382:	2900      	cmp	r1, #0
 800b384:	da09      	bge.n	800b39a <round+0x2a>
 800b386:	0feb      	lsrs	r3, r5, #31
 800b388:	2200      	movs	r2, #0
 800b38a:	07db      	lsls	r3, r3, #31
 800b38c:	3101      	adds	r1, #1
 800b38e:	d101      	bne.n	800b394 <round+0x24>
 800b390:	491a      	ldr	r1, [pc, #104]	; (800b3fc <round+0x8c>)
 800b392:	430b      	orrs	r3, r1
 800b394:	0019      	movs	r1, r3
 800b396:	0010      	movs	r0, r2
 800b398:	e017      	b.n	800b3ca <round+0x5a>
 800b39a:	4c19      	ldr	r4, [pc, #100]	; (800b400 <round+0x90>)
 800b39c:	410c      	asrs	r4, r1
 800b39e:	0022      	movs	r2, r4
 800b3a0:	402a      	ands	r2, r5
 800b3a2:	4302      	orrs	r2, r0
 800b3a4:	d013      	beq.n	800b3ce <round+0x5e>
 800b3a6:	2280      	movs	r2, #128	; 0x80
 800b3a8:	0312      	lsls	r2, r2, #12
 800b3aa:	410a      	asrs	r2, r1
 800b3ac:	1953      	adds	r3, r2, r5
 800b3ae:	43a3      	bics	r3, r4
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	e7ef      	b.n	800b394 <round+0x24>
 800b3b4:	2933      	cmp	r1, #51	; 0x33
 800b3b6:	dd0d      	ble.n	800b3d4 <round+0x64>
 800b3b8:	2380      	movs	r3, #128	; 0x80
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	4299      	cmp	r1, r3
 800b3be:	d106      	bne.n	800b3ce <round+0x5e>
 800b3c0:	0002      	movs	r2, r0
 800b3c2:	002b      	movs	r3, r5
 800b3c4:	0029      	movs	r1, r5
 800b3c6:	f7f6 f8bf 	bl	8001548 <__aeabi_dadd>
 800b3ca:	0006      	movs	r6, r0
 800b3cc:	000d      	movs	r5, r1
 800b3ce:	0030      	movs	r0, r6
 800b3d0:	0029      	movs	r1, r5
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	4c0b      	ldr	r4, [pc, #44]	; (800b404 <round+0x94>)
 800b3d6:	1912      	adds	r2, r2, r4
 800b3d8:	2401      	movs	r4, #1
 800b3da:	4264      	negs	r4, r4
 800b3dc:	40d4      	lsrs	r4, r2
 800b3de:	4220      	tst	r0, r4
 800b3e0:	d0f5      	beq.n	800b3ce <round+0x5e>
 800b3e2:	2233      	movs	r2, #51	; 0x33
 800b3e4:	1a51      	subs	r1, r2, r1
 800b3e6:	3a32      	subs	r2, #50	; 0x32
 800b3e8:	408a      	lsls	r2, r1
 800b3ea:	1812      	adds	r2, r2, r0
 800b3ec:	4282      	cmp	r2, r0
 800b3ee:	4180      	sbcs	r0, r0
 800b3f0:	4240      	negs	r0, r0
 800b3f2:	182b      	adds	r3, r5, r0
 800b3f4:	43a2      	bics	r2, r4
 800b3f6:	e7cd      	b.n	800b394 <round+0x24>
 800b3f8:	fffffc01 	.word	0xfffffc01
 800b3fc:	3ff00000 	.word	0x3ff00000
 800b400:	000fffff 	.word	0x000fffff
 800b404:	fffffbed 	.word	0xfffffbed

0800b408 <_init>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40e:	bc08      	pop	{r3}
 800b410:	469e      	mov	lr, r3
 800b412:	4770      	bx	lr

0800b414 <_fini>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	46c0      	nop			; (mov r8, r8)
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr
