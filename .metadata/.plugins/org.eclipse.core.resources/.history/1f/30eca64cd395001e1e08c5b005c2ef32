/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "SPIRIT_Config.h"
#include <string.h> /* memset */

#include "string.h"
#include "ArduCAM.h"
#include <stdbool.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define XTAL_FREQUENCY              50000000

/*  Radio configuration parameters  */
#define XTAL_OFFSET_PPM             0
//#define INFINITE_TIMEOUT            0.0
#define BASE_FREQUENCY              433.0e6
#define CHANNEL_SPACE               100e3
#define CHANNEL_NUMBER              0
#define MODULATION_SELECT           FSK
#define DATARATE                    38400
#define FREQ_DEVIATION              20e3
#define BANDWIDTH                   100E3

#define POWER_INDEX                 7
#define POWER_DBM                   11.6

//#define RECEIVE_TIMEOUT             2000.0 // change the value for required timeout period
#define RSSI_THRESHOLD              -120  // Default RSSI at reception, more than noise floor
//#define CSMA_RSSI_THRESHOLD         -90   // Higher RSSI to Transmit. If it's lower, the Channel will be seen as busy.

///*  Packet configuration parameters  */
#define PREAMBLE_LENGTH             PKT_PREAMBLE_LENGTH_04BYTES
#define SYNC_LENGTH                 PKT_SYNC_LENGTH_4BYTES
#define SYNC_WORD                   0x88888888
#define LENGTH_TYPE                 PKT_LENGTH_VAR
#define LENGTH_WIDTH                7
#define CRC_MODE                    PKT_CRC_MODE_8BITS
#define CONTROL_LENGTH              PKT_CONTROL_LENGTH_0BYTES
#define EN_ADDRESS                  S_ENABLE
#define EN_FEC                      S_DISABLE
#define EN_WHITENING                S_ENABLE

#define EN_FILT_MY_ADDRESS          S_ENABLE
#define EN_FILT_MULTICAST_ADDRESS   S_ENABLE
#define EN_FILT_BROADCAST_ADDRESS   S_ENABLE
#define MY_ADDRESS                  0x44
#define MULTICAST_ADDRESS           0xEE
#define BROADCAST_ADDRESS           0xFF

#define MAX_BUFFER_LEN              96
#define MAX_PAYLOAD_LEN             126 // (2^7 - 1) - 1 - 0 = 126 (LENGTH_WID=7, 1 address byte, & 0 control bytes)

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

void SPSGRF_Init(void);
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen);
void SPSGRF_StartRx(void);
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff);


int wrSensorRegs16_8(const struct sensor_reg reglist[]);
void initCam();
uint8_t wrSensorReg16_8(int regID, int regDat);
uint8_t rdSensorReg16_8(uint16_t regID, uint8_t* regDat);
void write_reg(int address,int value);
uint8_t get_bit(uint8_t addr, uint8_t bit);
volatile bool checkForLastBit(uint8_t temp, uint8_t temp_last);
volatile bool checkForFirstBit(uint8_t temp, uint8_t temp_last);



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile SpiritFlagStatus xTxDoneFlag;
volatile SpiritFlagStatus xRxDoneFlag;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	uint8_t payload[40];



	uint8_t temp = 0;
	uint8_t count = 0;
	uint8_t spi_recv_buf = 0;
	uint8_t spi_buf;
	uint8_t tempData, tempData_last;

	uint8_t vid, pid;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */

	//camera init
	HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
	//Check if SPI  communication with camera module is working
	while (spi_recv_buf != 0x55) {
		spi_buf = 0x00 | 0x80;
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);

		spi_buf = 0x55;
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);

		spi_buf = 0x00;
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);

		spi_buf = 0x55;
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);

		if (spi_recv_buf != 0x55) {
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //Toogle diode to show if  Camera hasnt responded, or we dont recive correct data
			HAL_Delay(1000);
		} else {
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //Tooge diode when Camera  responds correctly
			HAL_Delay(1000);

		}
	}
	//Check if the camera module type is OV5642
	wrSensorReg16_8(0xff, 0x01);
	rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid);
	rdSensorReg16_8(OV5642_CHIPID_LOW, &pid);
	//Check if camera module responds
	if ((vid != 0x56) || (pid != 0x42)) {
		//Serial.println("Can't find OV5642 module!");
		while (1);
	}

	// init cam
	initCam();

	// Write ARDUCHIP_TIM, VSYNC_LEVEL_MASK to spi
	write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);

	//Change picture size
	wrSensorRegs16_8(ov5642_2592x1944);

	// Close auto exposure mode
	//uint8_t _x3503;
	//wrSensorReg16_8(0x5001,_x3503|0x01);
	//Manually set the exposure value
	wrSensorReg16_8(0x3500, 0x00);
	wrSensorReg16_8(0x3501, 0x79);
	wrSensorReg16_8(0x3502, 0xe0);

	 /*
	 *
	 *
	 *
	 * Spirit 1 init
	 *
	 *
	 *
	 */

	SpiritEnterShutdown();
	SpiritExitShutdown();
	SpiritManagementWaExtraCurrent();

	do {
		for (volatile uint8_t i = 0; i != 0xFF; i++)
			; // delay for state transition
		SpiritRefreshStatus(); // reads the MC_STATUS register
	} while (g_xStatus.MC_STATE != MC_STATE_READY);

	SRadioInit xRadioInit;

	// Initialize radio RF parameters
	xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
	xRadioInit.lFrequencyBase = BASE_FREQUENCY;
	xRadioInit.nChannelSpace = CHANNEL_SPACE;
	xRadioInit.cChannelNumber = CHANNEL_NUMBER;
	xRadioInit.xModulationSelect = MODULATION_SELECT;
	xRadioInit.lDatarate = DATARATE;
	xRadioInit.lFreqDev = FREQ_DEVIATION;
	xRadioInit.lBandwidth = BANDWIDTH;
	SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
	SpiritRadioInit(&xRadioInit);

	// Set the transmitter power level
	SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
	SpiritRadioSetPALevelMaxIndex(POWER_INDEX);

	PktBasicInit xBasicInit;
	PktBasicAddressesInit xBasicAddress;

	// Configure packet handler to use the Basic packet format
	xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
	xBasicInit.xSyncLength = SYNC_LENGTH;
	xBasicInit.lSyncWords = SYNC_WORD;
	xBasicInit.xFixVarLength = LENGTH_TYPE;
	xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
	xBasicInit.xCrcMode = CRC_MODE;
	xBasicInit.xControlLength = CONTROL_LENGTH;
	xBasicInit.xAddressField = EN_ADDRESS;
	xBasicInit.xFec = EN_FEC;
	xBasicInit.xDataWhitening = EN_WHITENING;
	SpiritPktBasicInit(&xBasicInit);

	// Configure destination address criteria for automatic packet filtering
	xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
	xBasicAddress.cMyAddress = MY_ADDRESS;
	xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
	xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
	xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
	xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
	SpiritPktBasicAddressesInit(&xBasicAddress);

	SGpioInit xGpioInit;

	// Configure GPIO3 as interrupt request pin (active low)
	xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
	xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
	xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
	SpiritGpioInit(&xGpioInit);

	// Generate an interrupt request for the following IRQs
	SpiritIrqDeInit(NULL);
	SpiritIrq(TX_DATA_SENT, S_ENABLE);
	SpiritIrq(RX_DATA_READY, S_ENABLE);
	SpiritIrq(RX_DATA_DISC, S_ENABLE);
	SpiritIrq(RX_TIMEOUT, S_ENABLE);
	SpiritIrqClearStatus();

	// Enable the synchronization quality indicator check (perfect match required)
	// NOTE: 9.10.4: "It is recommended to always enable the SQI check."
	SpiritQiSetSqiThreshold(SQI_TH_0);
	SpiritQiSqiCheck(S_ENABLE);

	// Set the RSSI Threshold for Carrier Sense (9.10.2)
	// NOTE: CS_MODE = 0 at reset
	SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);

	// Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
	  SpiritTimerSetRxTimeoutMs(2000.0);
	  #else
	SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
	SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);

	SpiritPktBasicSetDestinationAddress(0x44);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// camera code
		//Clear fifo flag
		write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);

		// Start capture
		write_reg(ARDUCHIP_FIFO, FIFO_RDPTR_RST_MASK);

		///Flush FIFO buffer
		write_reg(ARDUCHIP_FIFO, FIFO_WRPTR_RST_MASK);

		//Clear fifo flag
		write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);

		// Start capture
		write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);

		//Wait for capture to be done
		while (get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK) == 0);
		//HAL_Delay(2000);

		//Start to read data from FIFO
		//Set CS to low
		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
		//Send start command

		//spi_buf = BURST_FIFO_READ;
		spi_buf = BURST_FIFO_READ;
		temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1, 100);

		//Read FIFO data
		spi_buf = 0x00;
		do {

			tempData_last = tempData;

			temp = HAL_SPI_TransmitReceive(&hspi2, &spi_buf, &spi_recv_buf, 1,
					100);
			payload[count] = spi_recv_buf;
			if (tempData == 0x00) {
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //Reset LCD screen
			}
			count = count + 1;
			if (count == 40) {
				xTxDoneFlag = S_RESET;
				SPSGRF_StartTx(&payload, strlen(payload));
				while (!xTxDoneFlag)
					;
				count = 0;
				memset(payload, '\0', strlen(payload));
			}

			tempData = spi_recv_buf;
			if (!checkForFirstBit(tempData, tempData_last)) {
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //Reset LCD screen
			}

		} while (checkForLastBit(tempData, tempData_last));

		HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);

		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);

		HAL_Delay(1000); // Block for 2000 ms

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x10707DBC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI2_CS_Pin SPIRIT1_SPI_CSn_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPIRIT1_SPI_CSn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : SPIRIT1_SDN_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : SPIRIT1_GPIO3_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
